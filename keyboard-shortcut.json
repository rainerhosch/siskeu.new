// Override key bindings by placing them into your key bindings file.
[
    { "key": "escape escape",         "command": "workbench.action.exitZenMode",
                                         "when": "inZenMode" },
    { "key": "shift+escape",          "command": "closeReferenceSearch",
                                         "when": "inReferenceSearchEditor && !config.editor.stablePeek" },
    { "key": "escape",                "command": "closeReferenceSearch",
                                         "when": "inReferenceSearchEditor && !config.editor.stablePeek" },
    { "key": "escape",                "command": "editor.closeTestPeek",
                                         "when": "testing.isInPeek && !config.editor.stablePeek || testing.isPeekVisible && !config.editor.stablePeek" },
    { "key": "ctrl+shift+j",          "command": "aiSettings.action.openhidden",
                                         "when": "!isSettingsPaneOpen" },
    { "key": "shift+escape",          "command": "cancelSelection",
                                         "when": "editorHasSelection && textInputFocus" },
    { "key": "escape",                "command": "cancelSelection",
                                         "when": "editorHasSelection && textInputFocus" },
    { "key": "ctrl+end",              "command": "cursorBottom",
                                         "when": "textInputFocus" },
    { "key": "ctrl+shift+end",        "command": "cursorBottomSelect",
                                         "when": "textInputFocus" },
    { "key": "ctrl+shift+alt+down",   "command": "cursorColumnSelectDown",
                                         "when": "textInputFocus" },
    { "key": "ctrl+shift+alt+left",   "command": "cursorColumnSelectLeft",
                                         "when": "textInputFocus" },
    { "key": "ctrl+shift+alt+pagedown", "command": "cursorColumnSelectPageDown",
                                         "when": "textInputFocus" },
    { "key": "ctrl+shift+alt+pageup", "command": "cursorColumnSelectPageUp",
                                         "when": "textInputFocus" },
    { "key": "ctrl+shift+alt+right",  "command": "cursorColumnSelectRight",
                                         "when": "textInputFocus" },
    { "key": "ctrl+shift+alt+up",     "command": "cursorColumnSelectUp",
                                         "when": "textInputFocus" },
    { "key": "down",                  "command": "cursorDown",
                                         "when": "textInputFocus" },
    { "key": "ctrl+shift+down",       "command": "cursorDownSelect",
                                         "when": "textInputFocus" },
    { "key": "shift+down",            "command": "cursorDownSelect",
                                         "when": "textInputFocus" },
    { "key": "end",                   "command": "cursorEnd",
                                         "when": "textInputFocus",
                                         "args": {"sticky":false} },
    { "key": "shift+end",             "command": "cursorEndSelect",
                                         "when": "textInputFocus",
                                         "args": {"sticky":false} },
    { "key": "home",                  "command": "cursorHome",
                                         "when": "textInputFocus" },
    { "key": "shift+home",            "command": "cursorHomeSelect",
                                         "when": "textInputFocus" },
    { "key": "left",                  "command": "cursorLeft",
                                         "when": "textInputFocus" },
    { "key": "shift+left",            "command": "cursorLeftSelect",
                                         "when": "textInputFocus" },
    { "key": "pagedown",              "command": "cursorPageDown",
                                         "when": "textInputFocus" },
    { "key": "shift+pagedown",        "command": "cursorPageDownSelect",
                                         "when": "textInputFocus" },
    { "key": "pageup",                "command": "cursorPageUp",
                                         "when": "textInputFocus" },
    { "key": "shift+pageup",          "command": "cursorPageUpSelect",
                                         "when": "textInputFocus" },
    { "key": "right",                 "command": "cursorRight",
                                         "when": "textInputFocus" },
    { "key": "shift+right",           "command": "cursorRightSelect",
                                         "when": "textInputFocus" },
    { "key": "ctrl+home",             "command": "cursorTop",
                                         "when": "textInputFocus" },
    { "key": "ctrl+shift+home",       "command": "cursorTopSelect",
                                         "when": "textInputFocus" },
    { "key": "up",                    "command": "cursorUp",
                                         "when": "textInputFocus" },
    { "key": "ctrl+shift+up",         "command": "cursorUpSelect",
                                         "when": "textInputFocus" },
    { "key": "shift+up",              "command": "cursorUpSelect",
                                         "when": "textInputFocus" },
    { "key": "shift+backspace",       "command": "deleteLeft",
                                         "when": "textInputFocus" },
    { "key": "backspace",             "command": "deleteLeft",
                                         "when": "textInputFocus" },
    { "key": "delete",                "command": "deleteRight",
                                         "when": "textInputFocus" },
    { "key": "ctrl+a",                "command": "editor.action.selectAll" },
    { "key": "ctrl+p",                "command": "expandLineSelection",
                                         "when": "textInputFocus" },
    { "key": "ctrl+down",             "command": "inlineChat.arrowOutDown",
                                         "when": "inlineChatFocused && inlineChatHasProvider && inlineChatInnerCursorLast && !accessibilityModeEnabled && !isEmbeddedDiffEditor" },
    { "key": "ctrl+up",               "command": "inlineChat.arrowOutUp",
                                         "when": "inlineChatFocused && inlineChatHasProvider && inlineChatInnerCursorFirst && !accessibilityModeEnabled && !isEmbeddedDiffEditor" },
    { "key": "shift+tab",             "command": "outdent",
                                         "when": "editorTextFocus && !editorReadonly && !editorTabMovesFocus" },
    { "key": "ctrl+shift+z",          "command": "redo" },
    { "key": "ctrl+y",                "command": "redo" },
    { "key": "ctrl+down",             "command": "scrollLineDown",
                                         "when": "textInputFocus" },
    { "key": "ctrl+up",               "command": "scrollLineUp",
                                         "when": "textInputFocus" },
    { "key": "alt+pagedown",          "command": "scrollPageDown",
                                         "when": "textInputFocus" },
    { "key": "alt+pageup",            "command": "scrollPageUp",
                                         "when": "textInputFocus" },
    { "key": "tab",                   "command": "tab",
                                         "when": "editorTextFocus && !editorReadonly && !editorTabMovesFocus" },
    { "key": "ctrl+z",                "command": "undo" },
    { "key": "shift+down",            "command": "cursorColumnSelectDown",
                                         "when": "editorColumnSelection && textInputFocus" },
    { "key": "shift+left",            "command": "cursorColumnSelectLeft",
                                         "when": "editorColumnSelection && textInputFocus" },
    { "key": "shift+pagedown",        "command": "cursorColumnSelectPageDown",
                                         "when": "editorColumnSelection && textInputFocus" },
    { "key": "shift+pageup",          "command": "cursorColumnSelectPageUp",
                                         "when": "editorColumnSelection && textInputFocus" },
    { "key": "shift+right",           "command": "cursorColumnSelectRight",
                                         "when": "editorColumnSelection && textInputFocus" },
    { "key": "shift+up",              "command": "cursorColumnSelectUp",
                                         "when": "editorColumnSelection && textInputFocus" },
    { "key": "shift+escape",          "command": "removeSecondaryCursors",
                                         "when": "editorHasMultipleSelections && textInputFocus" },
    { "key": "escape",                "command": "removeSecondaryCursors",
                                         "when": "editorHasMultipleSelections && textInputFocus" },
    { "key": "ctrl+down",             "command": "notebook.cell.chat.arrowOutDown",
                                         "when": "inlineChatFocused && inlineChatInnerCursorLast && notebookCellChatFocused && !accessibilityModeEnabled && !notebookCellEditorFocused" },
    { "key": "ctrl+up",               "command": "notebook.cell.chat.arrowOutUp",
                                         "when": "inlineChatFocused && inlineChatInnerCursorFirst && notebookCellChatFocused && !accessibilityModeEnabled && !notebookCellEditorFocused" },
    { "key": "ctrl+up",               "command": "notebook.cell.focusChatWidget",
                                         "when": "editorTextFocus && inputFocus && notebookEditorFocused && !accessibilityModeEnabled && !isEmbeddedDiffEditor && notebookEditorCursorAtBoundary != 'bottom' && notebookEditorCursorAtBoundary != 'none'" },
    { "key": "ctrl+down",             "command": "notebook.cell.focusNextChatWidget",
                                         "when": "editorTextFocus && inputFocus && notebookEditorFocused && !accessibilityModeEnabled && !isEmbeddedDiffEditor && notebookEditorCursorAtBoundary != 'none' && notebookEditorCursorAtBoundary != 'top'" },
    { "key": "ctrl+down",             "command": "inlineChat.focus",
                                         "when": "editorTextFocus && inlineChatVisible && !accessibilityModeEnabled && !inlineChatFocused && !isEmbeddedDiffEditor && inlineChatOuterCursorPosition == 'above'" },
    { "key": "ctrl+up",               "command": "inlineChat.focus",
                                         "when": "editorTextFocus && inlineChatVisible && !accessibilityModeEnabled && !inlineChatFocused && !isEmbeddedDiffEditor && inlineChatOuterCursorPosition == 'below'" },
    { "key": "escape",                "command": "notebook.cell.chat.acceptChanges",
                                         "when": "inlineChatFocused && notebookCellChatFocused && notebookChatUserDidEdit && !notebookCellEditorFocused" },
    { "key": "down",                  "command": "notebook.cell.chat.nextFromHistory",
                                         "when": "inlineChatFocused && notebookCellChatFocused" },
    { "key": "up",                    "command": "notebook.cell.chat.previousFromHistory",
                                         "when": "inlineChatFocused && notebookCellChatFocused" },
    { "key": "f12",                   "command": "goToNextReference",
                                         "when": "inReferenceSearchEditor || referenceSearchVisible" },
    { "key": "f4",                    "command": "goToNextReference",
                                         "when": "inReferenceSearchEditor || referenceSearchVisible" },
    { "key": "shift+f12",             "command": "goToPreviousReference",
                                         "when": "inReferenceSearchEditor || referenceSearchVisible" },
    { "key": "shift+f4",              "command": "goToPreviousReference",
                                         "when": "inReferenceSearchEditor || referenceSearchVisible" },
    { "key": "ctrl+enter",            "command": "refactorPreview.apply",
                                         "when": "refactorPreview.enabled && refactorPreview.hasCheckedChanges && focusedView == 'refactorPreview'" },
    { "key": "alt+enter",             "command": "testing.editFocusedTest",
                                         "when": "focusedView == 'workbench.view.testing'" },
    { "key": "escape",                "command": "notebook.cell.quitEdit",
                                         "when": "inputFocus && notebookEditorFocused && !editorHasMultipleSelections && !editorHasSelection && !editorHoverVisible && !inlineChatFocused" },
    { "key": "ctrl+alt+enter",        "command": "notebook.cell.quitEdit",
                                         "when": "inputFocus && notebookEditorFocused && !inlineChatFocused && notebookCellType == 'markup'" },
    { "key": "escape",                "command": "inlineChat.discard",
                                         "when": "inlineChatHasProvider && inlineChatVisible && !inlineChatUserDidEdit" },
    { "key": "ctrl+f",                "command": "actions.find",
                                         "when": "editorFocus || editorIsOpen" },
    { "key": "enter",                 "command": "breakpointWidget.action.acceptInput",
                                         "when": "breakpointWidgetVisible && inBreakpointWidget" },
    { "key": "ctrl+up",               "command": "chat.action.focus",
                                         "when": "chatCursorAtTop && inChatInput && chatLocation == 'panel'" },
    { "key": "ctrl+up",               "command": "chat.action.focus",
                                         "when": "inChatInput && isLinux && chatLocation == 'panel' || inChatInput && isWindows && chatLocation == 'panel'" },
    { "key": "shift+escape",          "command": "closeBreakpointWidget",
                                         "when": "breakpointWidgetVisible && textInputFocus" },
    { "key": "escape",                "command": "closeBreakpointWidget",
                                         "when": "breakpointWidgetVisible && textInputFocus" },
    { "key": "ctrl+u",                "command": "cursorUndo",
                                         "when": "textInputFocus" },
    { "key": "ctrl+right",            "command": "cursorWordEndRight",
                                         "when": "textInputFocus && !accessibilityModeEnabled" },
    { "key": "ctrl+shift+right",      "command": "cursorWordEndRightSelect",
                                         "when": "textInputFocus && !accessibilityModeEnabled" },
    { "key": "ctrl+left",             "command": "cursorWordLeft",
                                         "when": "textInputFocus && !accessibilityModeEnabled" },
    { "key": "ctrl+shift+left",       "command": "cursorWordLeftSelect",
                                         "when": "textInputFocus && !accessibilityModeEnabled" },
    { "key": "ctrl+backspace",        "command": "deleteWordLeft",
                                         "when": "textInputFocus && !editorReadonly" },
    { "key": "ctrl+delete",           "command": "deleteWordRight",
                                         "when": "textInputFocus && !editorReadonly" },
    { "key": "tab",                   "command": "editor.action.acceptGPT4",
                                         "when": "hasGPT4Diff" },
    { "key": "f7",                    "command": "editor.action.accessibleDiffViewer.next",
                                         "when": "isInDiffEditor" },
    { "key": "shift+f7",              "command": "editor.action.accessibleDiffViewer.prev",
                                         "when": "isInDiffEditor" },
    { "key": "ctrl+m ctrl+c",         "command": "editor.action.addCommentLine",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "ctrl+d",                "command": "editor.action.addSelectionToNextFindMatch",
                                         "when": "editorFocus" },
    { "key": "shift+alt+.",           "command": "editor.action.autoFix",
                                         "when": "textInputFocus && !editorReadonly && supportedCodeAction =~ /(\\s|^)quickfix\\b/" },
    { "key": "shift+alt+a",           "command": "editor.action.blockComment",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "escape",                "command": "editor.action.cancelSelectionAnchor",
                                         "when": "editorTextFocus && selectionAnchorSet" },
    { "key": "ctrl+f2",               "command": "editor.action.changeAll",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "ctrl+insert",           "command": "editor.action.clipboardCopyAction" },
    { "key": "ctrl+c",                "command": "editor.action.clipboardCopyAction" },
    { "key": "shift+delete",          "command": "editor.action.clipboardCutAction" },
    { "key": "ctrl+x",                "command": "editor.action.clipboardCutAction" },
    { "key": "shift+insert",          "command": "editor.action.clipboardPasteAction" },
    { "key": "ctrl+v",                "command": "editor.action.clipboardPasteAction" },
    { "key": "ctrl+/",                "command": "editor.action.commentLine",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "shift+alt+down",        "command": "editor.action.copyLinesDownAction",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "shift+alt+up",          "command": "editor.action.copyLinesUpAction",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "ctrl+shift+k",          "command": "editor.action.deleteLines",
                                         "when": "textInputFocus && !editorReadonly" },
    { "key": "alt+f3",                "command": "editor.action.dirtydiff.next",
                                         "when": "editorTextFocus && !textCompareEditorActive" },
    { "key": "shift+alt+f3",          "command": "editor.action.dirtydiff.previous",
                                         "when": "editorTextFocus && !textCompareEditorActive" },
    { "key": "enter",                 "command": "editor.action.extensioneditor.findNext",
                                         "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'workbench.editor.extension'" },
    { "key": "shift+enter",           "command": "editor.action.extensioneditor.findPrevious",
                                         "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'workbench.editor.extension'" },
    { "key": "ctrl+f",                "command": "editor.action.extensioneditor.showfind",
                                         "when": "!editorFocus && activeEditor == 'workbench.editor.extension'" },
    { "key": "shift+alt+f",           "command": "editor.action.formatDocument",
                                         "when": "editorHasDocumentFormattingProvider && editorTextFocus && !editorReadonly && !inCompositeEditor" },
    { "key": "shift+alt+f",           "command": "editor.action.formatDocument.none",
                                         "when": "editorTextFocus && !editorHasDocumentFormattingProvider && !editorReadonly" },
    { "key": "ctrl+m ctrl+f",         "command": "editor.action.formatSelection",
                                         "when": "editorHasDocumentSelectionFormattingProvider && editorTextFocus && !editorReadonly" },
    { "key": "ctrl+down",             "command": "editor.action.goToBottomHover",
                                         "when": "editorHoverFocused" },
    { "key": "end",                   "command": "editor.action.goToBottomHover",
                                         "when": "editorHoverFocused" },
    { "key": "enter",                 "command": "editor.action.goToFocusedStickyScrollLine",
                                         "when": "stickyScrollFocused" },
    { "key": "ctrl+f12",              "command": "editor.action.goToImplementation",
                                         "when": "editorHasImplementationProvider && editorTextFocus" },
    { "key": "shift+f12",             "command": "editor.action.goToReferences",
                                         "when": "editorHasReferenceProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor" },
    { "key": "ctrl+up",               "command": "editor.action.goToTopHover",
                                         "when": "editorHoverFocused" },
    { "key": "home",                  "command": "editor.action.goToTopHover",
                                         "when": "editorHoverFocused" },
    { "key": "escape",                "command": "editor.action.hideColorPicker",
                                         "when": "standaloneColorPickerVisible" },
    { "key": "ctrl+shift+.",          "command": "editor.action.inPlaceReplace.down",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "ctrl+shift+,",          "command": "editor.action.inPlaceReplace.up",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "ctrl+]",                "command": "editor.action.indentLines",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "escape",                "command": "editor.action.inlineEdit.reject",
                                         "when": "inlineEditVisible && !editorReadonly" },
    { "key": "escape",                "command": "editor.action.inlineEdits.hide",
                                         "when": "inlineEditsVisible" },
    { "key": "alt+]",                 "command": "editor.action.inlineEdits.showNext",
                                         "when": "inlineEditsVisible && !editorReadonly" },
    { "key": "alt+[",                 "command": "editor.action.inlineEdits.showPrevious",
                                         "when": "inlineEditsVisible && !editorReadonly" },
    { "key": "escape",                "command": "editor.action.inlineSuggest.hide",
                                         "when": "inlineSuggestionVisible" },
    { "key": "alt+]",                 "command": "editor.action.inlineSuggest.showNext",
                                         "when": "inlineSuggestionVisible && !editorReadonly" },
    { "key": "alt+[",                 "command": "editor.action.inlineSuggest.showPrevious",
                                         "when": "inlineSuggestionVisible && !editorReadonly" },
    { "key": "enter",                 "command": "editor.action.insertColorWithStandaloneColorPicker",
                                         "when": "standaloneColorPickerFocused" },
    { "key": "ctrl+alt+up",           "command": "editor.action.insertCursorAbove",
                                         "when": "editorTextFocus" },
    { "key": "shift+alt+i",           "command": "editor.action.insertCursorAtEndOfEachLineSelected",
                                         "when": "editorTextFocus" },
    { "key": "ctrl+alt+down",         "command": "editor.action.insertCursorBelow",
                                         "when": "editorTextFocus" },
    { "key": "ctrl+enter",            "command": "editor.action.insertLineAfter",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "ctrl+shift+enter",      "command": "editor.action.insertLineBefore",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "ctrl+shift+\\",         "command": "editor.action.jumpToBracket",
                                         "when": "editorTextFocus" },
    { "key": "ctrl+shift+f2",         "command": "editor.action.linkedEditing",
                                         "when": "editorHasRenameProvider && editorTextFocus && !editorReadonly" },
    { "key": "alt+f8",                "command": "editor.action.marker.next",
                                         "when": "editorFocus" },
    { "key": "f8",                    "command": "editor.action.marker.nextInFiles",
                                         "when": "editorFocus" },
    { "key": "shift+alt+f8",          "command": "editor.action.marker.prev",
                                         "when": "editorFocus" },
    { "key": "shift+f8",              "command": "editor.action.marker.prevInFiles",
                                         "when": "editorFocus" },
    { "key": "ctrl+alt+f8",           "command": "editor.action.marker.this",
                                         "when": "editorFocus" },
    { "key": "alt+down",              "command": "editor.action.moveLinesDownAction",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "alt+up",                "command": "editor.action.moveLinesUpAction",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "ctrl+m ctrl+d",         "command": "editor.action.moveSelectionToNextFindMatch",
                                         "when": "editorFocus" },
    { "key": "alt+f9",                "command": "editor.action.nextCommentThreadAction" },
    { "key": "ctrl+m ctrl+alt+down",  "command": "editor.action.nextCommentingRange",
                                         "when": "accessibilityModeEnabled && commentFocused || accessibilityModeEnabled && editorFocus || accessibilityHelpIsShown && accessibilityModeEnabled && accessibleViewCurrentProviderId == 'comments'" },
    { "key": "f3",                    "command": "editor.action.nextMatchFindAction",
                                         "when": "editorFocus" },
    { "key": "enter",                 "command": "editor.action.nextMatchFindAction",
                                         "when": "editorFocus && findInputFocussed" },
    { "key": "ctrl+f3",               "command": "editor.action.nextSelectionMatchFindAction",
                                         "when": "editorFocus" },
    { "key": "shift+alt+o",           "command": "editor.action.organizeImports",
                                         "when": "textInputFocus && !editorReadonly && supportedCodeAction =~ /(\\s|^)source\\.organizeImports\\b/" },
    { "key": "ctrl+[",                "command": "editor.action.outdentLines",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "alt+down",              "command": "editor.action.pageDownHover",
                                         "when": "editorHoverFocused" },
    { "key": "pagedown",              "command": "editor.action.pageDownHover",
                                         "when": "editorHoverFocused" },
    { "key": "alt+up",                "command": "editor.action.pageUpHover",
                                         "when": "editorHoverFocused" },
    { "key": "pageup",                "command": "editor.action.pageUpHover",
                                         "when": "editorHoverFocused" },
    { "key": "alt+f12",               "command": "editor.action.peekDefinition",
                                         "when": "editorHasDefinitionProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor" },
    { "key": "ctrl+shift+f12",        "command": "editor.action.peekImplementation",
                                         "when": "editorHasImplementationProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor" },
    { "key": "shift+alt+f9",          "command": "editor.action.previousCommentThreadAction" },
    { "key": "ctrl+m ctrl+alt+up",    "command": "editor.action.previousCommentingRange",
                                         "when": "accessibilityModeEnabled && commentFocused || accessibilityModeEnabled && editorFocus || accessibilityHelpIsShown && accessibilityModeEnabled && accessibleViewCurrentProviderId == 'comments'" },
    { "key": "shift+f3",              "command": "editor.action.previousMatchFindAction",
                                         "when": "editorFocus" },
    { "key": "shift+enter",           "command": "editor.action.previousMatchFindAction",
                                         "when": "editorFocus && findInputFocussed" },
    { "key": "ctrl+shift+f3",         "command": "editor.action.previousSelectionMatchFindAction",
                                         "when": "editorFocus" },
    { "key": "ctrl+.",                "command": "editor.action.quickFix",
                                         "when": "editorHasCodeActionsProvider && textInputFocus && !editorReadonly" },
    { "key": "ctrl+shift+r",          "command": "editor.action.refactor",
                                         "when": "editorHasCodeActionsProvider && textInputFocus && !editorReadonly" },
    { "key": "ctrl+alt+backspace",    "command": "editor.action.removeBrackets",
                                         "when": "editorTextFocus" },
    { "key": "ctrl+m ctrl+u",         "command": "editor.action.removeCommentLine",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "f2",                    "command": "editor.action.rename",
                                         "when": "editorHasRenameProvider && editorTextFocus && !editorReadonly" },
    { "key": "f12",                   "command": "editor.action.revealDefinition",
                                         "when": "editorHasDefinitionProvider && editorTextFocus" },
    { "key": "ctrl+f12",              "command": "editor.action.revealDefinition",
                                         "when": "editorHasDefinitionProvider && editorTextFocus && isWeb" },
    { "key": "ctrl+m f12",            "command": "editor.action.revealDefinitionAside",
                                         "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor" },
    { "key": "ctrl+m ctrl+f12",       "command": "editor.action.revealDefinitionAside",
                                         "when": "editorHasDefinitionProvider && editorTextFocus && isWeb && !isInEmbeddedEditor" },
    { "key": "down",                  "command": "editor.action.scrollDownHover",
                                         "when": "editorHoverFocused" },
    { "key": "left",                  "command": "editor.action.scrollLeftHover",
                                         "when": "editorHoverFocused" },
    { "key": "right",                 "command": "editor.action.scrollRightHover",
                                         "when": "editorHoverFocused" },
    { "key": "up",                    "command": "editor.action.scrollUpHover",
                                         "when": "editorHoverFocused" },
    { "key": "escape",                "command": "editor.action.selectEditor",
                                         "when": "stickyScrollFocused" },
    { "key": "ctrl+m ctrl+k",         "command": "editor.action.selectFromAnchorToCursor",
                                         "when": "editorTextFocus && selectionAnchorSet" },
    { "key": "ctrl+shift+l",          "command": "editor.action.selectHighlights",
                                         "when": "editorFocus" },
    { "key": "down",                  "command": "editor.action.selectNextStickyScrollLine",
                                         "when": "stickyScrollFocused" },
    { "key": "up",                    "command": "editor.action.selectPreviousStickyScrollLine",
                                         "when": "stickyScrollFocused" },
    { "key": "ctrl+m ctrl+b",         "command": "editor.action.setSelectionAnchor",
                                         "when": "editorTextFocus" },
    { "key": "shift+f10",             "command": "editor.action.showContextMenu",
                                         "when": "textInputFocus" },
    { "key": "ctrl+m ctrl+i",         "command": "editor.action.showHover",
                                         "when": "editorTextFocus" },
    { "key": "shift+alt+right",       "command": "editor.action.smartSelect.expand",
                                         "when": "editorTextFocus" },
    { "key": "shift+alt+left",        "command": "editor.action.smartSelect.shrink",
                                         "when": "editorTextFocus" },
    { "key": "ctrl+h",                "command": "editor.action.startFindReplaceAction",
                                         "when": "editorFocus || editorIsOpen" },
    { "key": "ctrl+enter",            "command": "editor.action.submitComment",
                                         "when": "commentEditorFocused" },
    { "key": "ctrl+m",                "command": "editor.action.toggleTabFocusMode" },
    { "key": "alt+z",                 "command": "editor.action.toggleWordWrap" },
    { "key": "ctrl+shift+space",      "command": "editor.action.triggerParameterHints",
                                         "when": "editorHasSignatureHelpProvider && editorTextFocus" },
    { "key": "ctrl+i",                "command": "editor.action.triggerSuggest",
                                         "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly && !suggestWidgetVisible" },
    { "key": "ctrl+space",            "command": "editor.action.triggerSuggest",
                                         "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly && !suggestWidgetVisible" },
    { "key": "ctrl+m ctrl+x",         "command": "editor.action.trimTrailingWhitespace",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "enter",                 "command": "editor.action.webvieweditor.findNext",
                                         "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'WebviewEditor'" },
    { "key": "shift+enter",           "command": "editor.action.webvieweditor.findPrevious",
                                         "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'WebviewEditor'" },
    { "key": "escape",                "command": "editor.action.webvieweditor.hideFind",
                                         "when": "webviewFindWidgetVisible && !editorFocus && activeEditor == 'WebviewEditor'" },
    { "key": "ctrl+f",                "command": "editor.action.webvieweditor.showFind",
                                         "when": "webviewFindWidgetEnabled && !editorFocus && activeEditor == 'WebviewEditor'" },
    { "key": "f7",                    "command": "editor.action.wordHighlight.next",
                                         "when": "editorTextFocus && hasWordHighlights" },
    { "key": "shift+f7",              "command": "editor.action.wordHighlight.prev",
                                         "when": "editorTextFocus && hasWordHighlights" },
    { "key": "escape",                "command": "editor.cancelOperation",
                                         "when": "cancellableOperation" },
    { "key": "ctrl+.",                "command": "editor.changeDropType",
                                         "when": "dropWidgetVisible" },
    { "key": "ctrl+.",                "command": "editor.changePasteType",
                                         "when": "pasteWidgetVisible" },
    { "key": "ctrl+m ctrl+,",         "command": "editor.createFoldingRangeFromSelection",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "escape",                "command": "editor.debug.action.closeExceptionWidget",
                                         "when": "exceptionWidgetVisible" },
    { "key": "ctrl+m ctrl+i",         "command": "editor.debug.action.showDebugHover",
                                         "when": "editorTextFocus && inDebugMode" },
    { "key": "f9",                    "command": "editor.debug.action.toggleBreakpoint",
                                         "when": "debuggersAvailable && disassemblyViewFocus || debuggersAvailable && editorTextFocus" },
    { "key": "tab",                   "command": "editor.emmet.action.expandAbbreviation",
                                         "when": "config.emmet.triggerExpansionOnTab && editorTextFocus && !editorReadonly && !editorTabMovesFocus" },
    { "key": "ctrl+shift+[",          "command": "editor.fold",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "ctrl+m ctrl+0",         "command": "editor.foldAll",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "ctrl+m ctrl+/",         "command": "editor.foldAllBlockComments",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "ctrl+m ctrl+-",         "command": "editor.foldAllExcept",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "ctrl+m ctrl+8",         "command": "editor.foldAllMarkerRegions",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "ctrl+m ctrl+1",         "command": "editor.foldLevel1",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "ctrl+m ctrl+2",         "command": "editor.foldLevel2",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "ctrl+m ctrl+3",         "command": "editor.foldLevel3",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "ctrl+m ctrl+4",         "command": "editor.foldLevel4",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "ctrl+m ctrl+5",         "command": "editor.foldLevel5",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "ctrl+m ctrl+6",         "command": "editor.foldLevel6",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "ctrl+m ctrl+7",         "command": "editor.foldLevel7",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "ctrl+m ctrl+[",         "command": "editor.foldRecursively",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "f12",                   "command": "editor.gotoNextSymbolFromResult",
                                         "when": "hasSymbols" },
    { "key": "escape",                "command": "editor.gotoNextSymbolFromResult.cancel",
                                         "when": "hasSymbols" },
    { "key": "escape",                "command": "editor.hideDropWidget",
                                         "when": "dropWidgetVisible" },
    { "key": "escape",                "command": "editor.hidePasteWidget",
                                         "when": "pasteWidgetVisible" },
    { "key": "ctrl+m ctrl+.",         "command": "editor.removeManualFoldingRanges",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "ctrl+m ctrl+l",         "command": "editor.toggleFold",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "ctrl+m ctrl+shift+l",   "command": "editor.toggleFoldRecursively",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "ctrl+shift+]",          "command": "editor.unfold",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "ctrl+m ctrl+j",         "command": "editor.unfoldAll",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "ctrl+m ctrl+=",         "command": "editor.unfoldAllExcept",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "ctrl+m ctrl+9",         "command": "editor.unfoldAllMarkerRegions",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "ctrl+m ctrl+]",         "command": "editor.unfoldRecursively",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "escape",                "command": "inlayHints.stopReadingLineWithHint",
                                         "when": "isReadingLineWithInlayHints" },
    { "key": "tab",                   "command": "insertSnippet",
                                         "when": "editorTextFocus && hasSnippetCompletions && !editorTabMovesFocus && !inSnippetMode" },
    { "key": "ctrl+enter",            "command": "interactive.execute",
                                         "when": "activeEditor == 'workbench.editor.interactive'" },
    { "key": "shift+enter",           "command": "interactive.execute",
                                         "when": "config.interactiveWindow.executeWithShiftEnter && activeEditor == 'workbench.editor.interactive'" },
    { "key": "enter",                 "command": "interactive.execute",
                                         "when": "!config.interactiveWindow.executeWithShiftEnter && activeEditor == 'workbench.editor.interactive'" },
    { "key": "escape",                "command": "notebook.cell.chat.discard",
                                         "when": "inlineChatFocused && notebookCellChatFocused && !notebookCellEditorFocused && !notebookChatUserDidEdit" },
    { "key": "pagedown",              "command": "notebook.cell.cursorPageDown",
                                         "when": "editorTextFocus && inputFocus && notebookEditorFocused" },
    { "key": "shift+pagedown",        "command": "notebook.cell.cursorPageDownSelect",
                                         "when": "editorTextFocus && inputFocus && notebookEditorFocused && !notebookOutputFocused" },
    { "key": "pageup",                "command": "notebook.cell.cursorPageUp",
                                         "when": "editorTextFocus && inputFocus && notebookEditorFocused" },
    { "key": "shift+pageup",          "command": "notebook.cell.cursorPageUpSelect",
                                         "when": "editorTextFocus && inputFocus && notebookEditorFocused && !notebookOutputFocused" },
    { "key": "ctrl+alt+enter",        "command": "notebook.cell.execute",
                                         "when": "notebookCellListFocused && notebookMissingKernelExtension && !notebookCellExecuting && notebookCellType == 'code' || !notebookCellExecuting && notebookCellType == 'code' && notebookCellListFocused || inlineChatFocused && notebookCellChatFocused && notebookKernelCount > 0 || !notebookCellExecuting && notebookCellType == 'code' && notebookCellListFocused || inlineChatFocused && notebookCellChatFocused && notebookKernelSourceCount > 0 || inlineChatFocused && notebookCellChatFocused && notebookMissingKernelExtension && !notebookCellExecuting && notebookCellType == 'code'" },
    { "key": "alt+enter",             "command": "notebook.cell.executeAndInsertBelow",
                                         "when": "notebookCellListFocused && notebookCellType == 'markup' || notebookCellListFocused && notebookMissingKernelExtension && !notebookCellExecuting && notebookCellType == 'code' || notebookCellListFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelCount > 0 || notebookCellListFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelSourceCount > 0" },
    { "key": "shift+enter",           "command": "notebook.cell.executeAndSelectBelow",
                                         "when": "notebookCellListFocused && !inlineChatFocused && notebookCellType == 'markup' || notebookCellListFocused && notebookMissingKernelExtension && !inlineChatFocused && !notebookCellExecuting && notebookCellType == 'code' || notebookCellListFocused && !inlineChatFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelCount > 0 || notebookCellListFocused && !inlineChatFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelSourceCount > 0" },
    { "key": "ctrl+shift+v",          "command": "notebook.cell.pasteAbove",
                                         "when": "notebookEditorFocused && !inputFocus" },
    { "key": "down",                  "command": "notebook.focusNextEditor",
                                         "when": "config.notebook.navigation.allowNavigateToSurroundingCells && editorTextFocus && inputFocus && notebookEditorFocused && !accessibilityModeEnabled && !isEmbeddedDiffEditor && notebookEditorCursorAtBoundary != 'none' && notebookEditorCursorAtBoundary != 'top'" },
    { "key": "up",                    "command": "notebook.focusPreviousEditor",
                                         "when": "config.notebook.navigation.allowNavigateToSurroundingCells && editorTextFocus && inputFocus && notebookEditorFocused && !accessibilityModeEnabled && !isEmbeddedDiffEditor && notebookEditorCursorAtBoundary != 'bottom' && notebookEditorCursorAtBoundary != 'none'" },
    { "key": "shift+alt+f",           "command": "notebook.formatCell",
                                         "when": "editorHasDocumentFormattingProvider && editorTextFocus && inCompositeEditor && notebookEditable && !editorReadonly && activeEditor == 'workbench.editor.notebook'" },
    { "key": "ctrl+enter",            "command": "openReferenceToSide",
                                         "when": "listFocus && referenceSearchVisible && !inputFocus && !treeElementCanCollapse && !treeElementCanExpand && !treestickyScrollFocused" },
    { "key": "enter",                 "command": "repl.action.acceptInput",
                                         "when": "inDebugRepl && textInputFocus" },
    { "key": "ctrl+f",                "command": "repl.action.filter",
                                         "when": "inDebugRepl && textInputFocus" },
    { "key": "ctrl+shift+r",          "command": "rerunSearchEditorSearch",
                                         "when": "inSearchEditor" },
    { "key": "escape",                "command": "search.action.focusQueryEditorWidget",
                                         "when": "inSearchEditor" },
    { "key": "ctrl+shift+backspace",  "command": "search.searchEditor.action.deleteFileResults",
                                         "when": "inSearchEditor" },
    { "key": "escape",                "command": "settings.action.clearSearchResults",
                                         "when": "inSettingsEditor && inSettingsSearch" },
    { "key": "down",                  "command": "settings.action.focusSettingsFile",
                                         "when": "inSettingsSearch && !suggestWidgetVisible" },
    { "key": "ctrl+f",                "command": "settings.action.search",
                                         "when": "inSettingsEditor" },
    { "key": "ctrl+/",                "command": "toggleExplainMode",
                                         "when": "suggestWidgetVisible" },
    { "key": "ctrl+m f2",             "command": "togglePeekWidgetFocus",
                                         "when": "inReferenceSearchEditor || referenceSearchVisible" },
    { "key": "ctrl+m ctrl+alt+c",     "command": "workbench.action.addComment" },
    { "key": "ctrl+/",                "command": "workbench.action.chat.attachContext",
                                         "when": "inChatInput" },
    { "key": "ctrl+alt+enter",        "command": "workbench.action.chat.runInTerminal",
                                         "when": "accessibleViewInCodeBlock && chatIsEnabled || chatIsEnabled && inChat" },
    { "key": "enter",                 "command": "workbench.action.chat.submit",
                                         "when": "chatInputHasText && inChatInput && !chatSessionRequestInProgress" },
    { "key": "ctrl+enter",            "command": "workbench.action.chat.submitSecondaryAgent",
                                         "when": "chatInputHasText && inChatInput && !chatInputHasAgent && !chatSessionRequestInProgress" },
    { "key": "alt+f5",                "command": "workbench.action.editor.nextChange",
                                         "when": "editorTextFocus && !textCompareEditorActive" },
    { "key": "shift+alt+f5",          "command": "workbench.action.editor.previousChange",
                                         "when": "editorTextFocus && !textCompareEditorActive" },
    { "key": "shift+escape",          "command": "workbench.action.hideComment",
                                         "when": "commentEditorFocused" },
    { "key": "escape",                "command": "workbench.action.hideComment",
                                         "when": "commentEditorFocused" },
    { "key": "tab",                   "command": "editor.action.inlineEdit.accept",
                                         "when": "cursorAtInlineEdit && inlineEditVisible && !editorReadonly" },
    { "key": "ctrl+alt+=",            "command": "editor.action.inlineEdit.jumpTo",
                                         "when": "inlineEditVisible && !cursorAtInlineEdit && !editorReadonly" },
    { "key": "ctrl+alt+=",            "command": "editor.action.inlineEdit.trigger",
                                         "when": "!editorReadonly && !inlineEditVisible" },
    { "key": "ctrl+right",            "command": "editor.action.inlineSuggest.acceptNextWord",
                                         "when": "cppSuggestion && !editorReadonly || inlineSuggestionVisible && !editorReadonly" },
    { "key": "alt+f8",                "command": "testing.goToNextMessage",
                                         "when": "editorFocus && testing.isPeekVisible" },
    { "key": "shift+alt+f8",          "command": "testing.goToPreviousMessage",
                                         "when": "editorFocus && testing.isPeekVisible" },
    { "key": "shift+escape",          "command": "closeFindWidget",
                                         "when": "editorFocus && findWidgetVisible && !isComposing" },
    { "key": "escape",                "command": "closeFindWidget",
                                         "when": "editorFocus && findWidgetVisible && !isComposing" },
    { "key": "ctrl+alt+enter",        "command": "editor.action.replaceAll",
                                         "when": "editorFocus && findWidgetVisible" },
    { "key": "ctrl+shift+1",          "command": "editor.action.replaceOne",
                                         "when": "editorFocus && findWidgetVisible" },
    { "key": "enter",                 "command": "editor.action.replaceOne",
                                         "when": "editorFocus && findWidgetVisible && replaceInputFocussed" },
    { "key": "alt+enter",             "command": "editor.action.selectAllMatches",
                                         "when": "editorFocus && findWidgetVisible" },
    { "key": "alt+c",                 "command": "toggleFindCaseSensitive",
                                         "when": "editorFocus" },
    { "key": "alt+l",                 "command": "toggleFindInSelection",
                                         "when": "editorFocus" },
    { "key": "alt+r",                 "command": "toggleFindRegex",
                                         "when": "editorFocus" },
    { "key": "alt+w",                 "command": "toggleFindWholeWord",
                                         "when": "editorFocus" },
    { "key": "alt+p",                 "command": "togglePreserveCase",
                                         "when": "editorFocus" },
    { "key": "ctrl+alt+=",            "command": "editor.action.inlineEdit.jumpBack",
                                         "when": "cursorAtInlineEdit && !editorReadonly" },
    { "key": "ctrl+enter",            "command": "notebook.cell.chat.acceptChanges",
                                         "when": "inlineChatFocused && notebookCellChatFocused && !notebookCellEditorFocused" },
    { "key": "tab",                   "command": "jumpToNextSnippetPlaceholder",
                                         "when": "hasNextTabstop && inSnippetMode && textInputFocus" },
    { "key": "shift+tab",             "command": "jumpToPrevSnippetPlaceholder",
                                         "when": "hasPrevTabstop && inSnippetMode && textInputFocus" },
    { "key": "escape",                "command": "leaveEditorMessage",
                                         "when": "messageVisible" },
    { "key": "shift+escape",          "command": "leaveSnippet",
                                         "when": "inSnippetMode && textInputFocus" },
    { "key": "escape",                "command": "leaveSnippet",
                                         "when": "inSnippetMode && textInputFocus" },
    { "key": "shift+escape",          "command": "closeDirtyDiff",
                                         "when": "dirtyDiffVisible" },
    { "key": "escape",                "command": "closeDirtyDiff",
                                         "when": "dirtyDiffVisible" },
    { "key": "shift+escape",          "command": "closeMarkersNavigation",
                                         "when": "editorFocus && markersNavigationVisible" },
    { "key": "escape",                "command": "closeMarkersNavigation",
                                         "when": "editorFocus && markersNavigationVisible" },
    { "key": "escape",                "command": "notifications.hideToasts",
                                         "when": "notificationToastsVisible" },
    { "key": "shift+escape",          "command": "closeParameterHints",
                                         "when": "editorFocus && parameterHintsVisible" },
    { "key": "escape",                "command": "closeParameterHints",
                                         "when": "editorFocus && parameterHintsVisible" },
    { "key": "alt+down",              "command": "showNextParameterHint",
                                         "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible" },
    { "key": "down",                  "command": "showNextParameterHint",
                                         "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible" },
    { "key": "alt+up",                "command": "showPrevParameterHint",
                                         "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible" },
    { "key": "up",                    "command": "showPrevParameterHint",
                                         "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible" },
    { "key": "shift+tab",             "command": "acceptAlternativeSelectedSuggestion",
                                         "when": "suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus" },
    { "key": "shift+enter",           "command": "acceptAlternativeSelectedSuggestion",
                                         "when": "suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus" },
    { "key": "tab",                   "command": "acceptSelectedSuggestion",
                                         "when": "suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus" },
    { "key": "enter",                 "command": "acceptSelectedSuggestion",
                                         "when": "acceptSuggestionOnEnter && suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && suggestionMakesTextEdit && textInputFocus" },
    { "key": "ctrl+i",                "command": "focusSuggestion",
                                         "when": "suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion" },
    { "key": "ctrl+space",            "command": "focusSuggestion",
                                         "when": "suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion" },
    { "key": "shift+escape",          "command": "hideSuggestWidget",
                                         "when": "suggestWidgetVisible && textInputFocus" },
    { "key": "escape",                "command": "hideSuggestWidget",
                                         "when": "suggestWidgetVisible && textInputFocus" },
    { "key": "tab",                   "command": "insertBestCompletion",
                                         "when": "atEndOfWord && textInputFocus && !hasOtherSuggestions && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'" },
    { "key": "tab",                   "command": "insertNextSuggestion",
                                         "when": "hasOtherSuggestions && textInputFocus && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'" },
    { "key": "shift+tab",             "command": "insertPrevSuggestion",
                                         "when": "hasOtherSuggestions && textInputFocus && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'" },
    { "key": "ctrl+pagedown",         "command": "selectNextPageSuggestion",
                                         "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion" },
    { "key": "pagedown",              "command": "selectNextPageSuggestion",
                                         "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion" },
    { "key": "ctrl+down",             "command": "selectNextSuggestion",
                                         "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion" },
    { "key": "down",                  "command": "selectNextSuggestion",
                                         "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion" },
    { "key": "ctrl+pageup",           "command": "selectPrevPageSuggestion",
                                         "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion" },
    { "key": "pageup",                "command": "selectPrevPageSuggestion",
                                         "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion" },
    { "key": "ctrl+up",               "command": "selectPrevSuggestion",
                                         "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion" },
    { "key": "up",                    "command": "selectPrevSuggestion",
                                         "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion" },
    { "key": "ctrl+i",                "command": "toggleSuggestionDetails",
                                         "when": "suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus" },
    { "key": "ctrl+space",            "command": "toggleSuggestionDetails",
                                         "when": "suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus" },
    { "key": "ctrl+alt+space",        "command": "toggleSuggestionFocus",
                                         "when": "suggestWidgetVisible && textInputFocus" },
    { "key": "enter",                 "command": "acceptRenameInput",
                                         "when": "editorFocus && renameInputVisible && !isComposing" },
    { "key": "ctrl+enter",            "command": "acceptRenameInputWithPreview",
                                         "when": "config.editor.rename.enablePreview && editorFocus && renameInputVisible && !isComposing" },
    { "key": "shift+escape",          "command": "cancelLinkedEditingInput",
                                         "when": "LinkedEditingInputVisible && editorTextFocus" },
    { "key": "escape",                "command": "cancelLinkedEditingInput",
                                         "when": "LinkedEditingInputVisible && editorTextFocus" },
    { "key": "shift+escape",          "command": "cancelRenameInput",
                                         "when": "editorFocus && renameInputVisible" },
    { "key": "escape",                "command": "cancelRenameInput",
                                         "when": "editorFocus && renameInputVisible" },
    { "key": "down",                  "command": "focusNextRenameSuggestion",
                                         "when": "renameInputVisible" },
    { "key": "up",                    "command": "focusPreviousRenameSuggestion",
                                         "when": "renameInputVisible" },
    { "key": "ctrl+shift+l",          "command": "addCursorsAtSearchResults",
                                         "when": "fileMatchOrMatchFocus && searchViewletVisible" },
    { "key": "ctrl+m ctrl+g",         "command": "aiFeedback.action.open" },
    { "key": "ctrl+shift+;",          "command": "breadcrumbs.focus",
                                         "when": "breadcrumbsPossible && breadcrumbsVisible" },
    { "key": "ctrl+shift+.",          "command": "breadcrumbs.focusAndSelect",
                                         "when": "breadcrumbsPossible && breadcrumbsVisible" },
    { "key": "ctrl+right",            "command": "breadcrumbs.focusNext",
                                         "when": "breadcrumbsActive && breadcrumbsVisible" },
    { "key": "right",                 "command": "breadcrumbs.focusNext",
                                         "when": "breadcrumbsActive && breadcrumbsVisible" },
    { "key": "ctrl+left",             "command": "breadcrumbs.focusPrevious",
                                         "when": "breadcrumbsActive && breadcrumbsVisible" },
    { "key": "left",                  "command": "breadcrumbs.focusPrevious",
                                         "when": "breadcrumbsActive && breadcrumbsVisible" },
    { "key": "ctrl+enter",            "command": "breadcrumbs.revealFocused",
                                         "when": "breadcrumbsActive && breadcrumbsVisible" },
    { "key": "space",                 "command": "breadcrumbs.revealFocused",
                                         "when": "breadcrumbsActive && breadcrumbsVisible" },
    { "key": "ctrl+enter",            "command": "breadcrumbs.revealFocusedFromTreeAside",
                                         "when": "breadcrumbsActive && breadcrumbsVisible && listFocus && !inputFocus && !treestickyScrollFocused" },
    { "key": "down",                  "command": "breadcrumbs.selectFocused",
                                         "when": "breadcrumbsActive && breadcrumbsVisible" },
    { "key": "enter",                 "command": "breadcrumbs.selectFocused",
                                         "when": "breadcrumbsActive && breadcrumbsVisible" },
    { "key": "ctrl+shift+.",          "command": "breadcrumbs.toggleToOn",
                                         "when": "!config.breadcrumbs.enabled" },
    { "key": "escape",                "command": "closeReplaceInFilesWidget",
                                         "when": "replaceInputBoxFocus && searchViewletVisible" },
    { "key": "escape",                "command": "commentsClearFilterText",
                                         "when": "commentsFilterFocus" },
    { "key": "ctrl+f",                "command": "commentsFocusFilter",
                                         "when": "focusedView == 'workbench.panel.comments'" },
    { "key": "ctrl+down",             "command": "commentsFocusViewFromFilter",
                                         "when": "commentsFilterFocus" },
    { "key": "shift+alt+c",           "command": "copyFilePath",
                                         "when": "!editorFocus" },
    { "key": "shift+alt+c",           "command": "copyFilePath",
                                         "when": "editorFocus" },
    { "key": "ctrl+m ctrl+shift+c",   "command": "copyRelativeFilePath",
                                         "when": "!editorFocus" },
    { "key": "ctrl+m ctrl+shift+c",   "command": "copyRelativeFilePath",
                                         "when": "editorFocus" },
    { "key": "alt+enter",             "command": "debug.openBreakpointToSide",
                                         "when": "breakpointsFocused" },
    { "key": "ctrl+enter",            "command": "debug.openBreakpointToSide",
                                         "when": "breakpointsFocused" },
    { "key": "ctrl+f5",               "command": "debug.openView",
                                         "when": "!debuggersAvailable" },
    { "key": "f5",                    "command": "debug.openView",
                                         "when": "!debuggersAvailable" },
    { "key": "delete",                "command": "debug.removeBreakpoint",
                                         "when": "breakpointsFocused && !breakpointInputFocused" },
    { "key": "delete",                "command": "debug.removeWatchExpression",
                                         "when": "watchExpressionsFocused && !expressionSelected" },
    { "key": "alt+-",                 "command": "decreaseSearchEditorContextLines",
                                         "when": "inSearchEditor" },
    { "key": "alt+f1",                "command": "editor.action.accessibilityHelp",
                                         "when": "!accessibilityHelpIsShown" },
    { "key": "alt+k",                 "command": "editor.action.accessibilityHelpConfigureKeybindings",
                                         "when": "accessibilityHelpIsShown" },
    { "key": "alt+h",                 "command": "editor.action.accessibilityHelpOpenHelpLink",
                                         "when": "accessibilityHelpIsShown" },
    { "key": "alt+f2",                "command": "editor.action.accessibleView" },
    { "key": "ctrl+/",                "command": "editor.action.accessibleViewAcceptInlineCompletion",
                                         "when": "accessibleViewIsShown && accessibleViewCurrentProviderId == 'inlineCompletions'" },
    { "key": "alt+f6",                "command": "editor.action.accessibleViewDisableHint",
                                         "when": "accessibilityHelpIsShown && accessibleViewVerbosityEnabled || accessibleViewIsShown && accessibleViewVerbosityEnabled" },
    { "key": "alt+]",                 "command": "editor.action.accessibleViewNext",
                                         "when": "accessibleViewIsShown && accessibleViewSupportsNavigation" },
    { "key": "ctrl+alt+pagedown",     "command": "editor.action.accessibleViewNextCodeBlock",
                                         "when": "accessibleViewContainsCodeBlocks && accessibleViewCurrentProviderId == 'panelChat'" },
    { "key": "alt+[",                 "command": "editor.action.accessibleViewPrevious",
                                         "when": "accessibleViewIsShown && accessibleViewSupportsNavigation" },
    { "key": "ctrl+alt+pageup",       "command": "editor.action.accessibleViewPreviousCodeBlock",
                                         "when": "accessibleViewContainsCodeBlocks && accessibleViewCurrentProviderId == 'panelChat'" },
    { "key": "ctrl+m ctrl+k",         "command": "editor.action.defineKeybinding",
                                         "when": "resource == 'vscode-userdata:/c%3A/Users/PSIIT/AppData/Roaming/Cursor/User/keybindings.json'" },
    { "key": "tab",                   "command": "editor.action.inlineSuggest.commit",
                                         "when": "inlineSuggestionHasIndentationLessThanTabSize && inlineSuggestionVisible && !editorHoverFocused && !editorTabMovesFocus && !suggestWidgetVisible" },
    { "key": "shift+f9",              "command": "editor.debug.action.toggleInlineBreakpoint",
                                         "when": "editorTextFocus" },
    { "key": "shift+alt+d",           "command": "editor.detectLanguage",
                                         "when": "editorTextFocus && !notebookEditable" },
    { "key": "shift+enter",           "command": "editor.refocusCallHierarchy",
                                         "when": "callHierarchyVisible" },
    { "key": "shift+enter",           "command": "editor.refocusTypeHierarchy",
                                         "when": "typeHierarchyVisible" },
    { "key": "shift+alt+h",           "command": "editor.showCallHierarchy",
                                         "when": "editorHasCallHierarchyProvider && editorTextFocus && !inReferenceSearchEditor" },
    { "key": "shift+alt+h",           "command": "editor.showIncomingCalls",
                                         "when": "callHierarchyVisible && callHierarchyDirection == 'outgoingCalls'" },
    { "key": "shift+alt+h",           "command": "editor.showOutgoingCalls",
                                         "when": "callHierarchyVisible && callHierarchyDirection == 'incomingCalls'" },
    { "key": "shift+alt+h",           "command": "editor.showSubtypes",
                                         "when": "typeHierarchyVisible && typeHierarchyDirection == 'supertypes'" },
    { "key": "shift+alt+h",           "command": "editor.showSupertypes",
                                         "when": "typeHierarchyVisible && typeHierarchyDirection == 'subtypes'" },
    { "key": "ctrl+enter",            "command": "explorer.openToSide",
                                         "when": "explorerViewletFocus && foldersViewVisible && !inputFocus" },
    { "key": "shift+alt+f",           "command": "filesExplorer.findInFolder",
                                         "when": "explorerResourceIsFolder && filesExplorerFocus && foldersViewVisible && !inputFocus" },
    { "key": "alt+down",              "command": "history.showNext",
                                         "when": "historyNavigationForwardsEnabled && historyNavigationWidgetFocus && !isComposing && !suggestWidgetVisible" },
    { "key": "down",                  "command": "history.showNext",
                                         "when": "historyNavigationForwardsEnabled && historyNavigationWidgetFocus && !isComposing && !suggestWidgetVisible" },
    { "key": "alt+up",                "command": "history.showPrevious",
                                         "when": "historyNavigationBackwardsEnabled && historyNavigationWidgetFocus && !isComposing && !suggestWidgetVisible" },
    { "key": "up",                    "command": "history.showPrevious",
                                         "when": "historyNavigationBackwardsEnabled && historyNavigationWidgetFocus && !isComposing && !suggestWidgetVisible" },
    { "key": "down",                  "command": "iconSelectBox.focusDown",
                                         "when": "iconSelectBoxFocus" },
    { "key": "right",                 "command": "iconSelectBox.focusNext",
                                         "when": "iconSelectBoxFocus && iconSelectBoxInputEmpty || iconSelectBoxFocus && !iconSelectBoxInputFocus" },
    { "key": "left",                  "command": "iconSelectBox.focusPrevious",
                                         "when": "iconSelectBoxFocus && iconSelectBoxInputEmpty || iconSelectBoxFocus && !iconSelectBoxInputFocus" },
    { "key": "up",                    "command": "iconSelectBox.focusUp",
                                         "when": "iconSelectBoxFocus" },
    { "key": "enter",                 "command": "iconSelectBox.selectFocused",
                                         "when": "iconSelectBoxFocus" },
    { "key": "alt+=",                 "command": "increaseSearchEditorContextLines",
                                         "when": "inSearchEditor" },
    { "key": "escape",                "command": "inlineChat.close",
                                         "when": "inlineChatHasProvider && inlineChatVisible" },
    { "key": "escape",                "command": "inlineChat.discardHunkChange",
                                         "when": "inlineChatHasProvider && inlineChatVisible && inlineChatResponseType == 'messagesAndEdits'" },
    { "key": "ctrl+i",                "command": "inlineChat.holdForSpeech",
                                         "when": "hasSpeechProvider && inlineChatHasProvider && inlineChatVisible && textInputFocus" },
    { "key": "f7",                    "command": "inlineChat.moveToNextHunk",
                                         "when": "inlineChatHasProvider && inlineChatVisible" },
    { "key": "shift+f7",              "command": "inlineChat.moveToPreviousHunk",
                                         "when": "inlineChatHasProvider && inlineChatVisible" },
    { "key": "ctrl+r",                "command": "inlineChat.regenerate",
                                         "when": "inlineChatHasProvider && inlineChatVisible" },
    { "key": "ctrl+m i",              "command": "inlineChat.start",
                                         "when": "editorFocus && inlineChatHasProvider && !editorReadonly" },
    { "key": "ctrl+i",                "command": "inlineChat.start",
                                         "when": "editorFocus && inlineChatHasProvider && !editorReadonly" },
    { "key": "ctrl+z",                "command": "inlineChat.unstash",
                                         "when": "inlineChatHasStashedSession && !editorReadonly" },
    { "key": "ctrl+down",             "command": "inlineChat.viewInChat",
                                         "when": "inlineChatHasProvider && inlineChatVisible" },
    { "key": "down",                  "command": "interactive.history.next",
                                         "when": "!suggestWidgetVisible && activeEditor == 'workbench.editor.interactive' && interactiveInputCursorAtBoundary != 'none' && interactiveInputCursorAtBoundary != 'top'" },
    { "key": "down",                  "command": "interactive.history.next",
                                         "when": "!suggestWidgetVisible && activeEditor == 'workbench.editor.repl' && interactiveInputCursorAtBoundary != 'none' && interactiveInputCursorAtBoundary != 'top'" },
    { "key": "up",                    "command": "interactive.history.previous",
                                         "when": "!suggestWidgetVisible && activeEditor == 'workbench.editor.interactive' && interactiveInputCursorAtBoundary != 'bottom' && interactiveInputCursorAtBoundary != 'none'" },
    { "key": "up",                    "command": "interactive.history.previous",
                                         "when": "!suggestWidgetVisible && activeEditor == 'workbench.editor.repl' && interactiveInputCursorAtBoundary != 'bottom' && interactiveInputCursorAtBoundary != 'none'" },
    { "key": "ctrl+end",              "command": "interactive.scrollToBottom",
                                         "when": "activeEditor == 'workbench.editor.interactive'" },
    { "key": "ctrl+home",             "command": "interactive.scrollToTop",
                                         "when": "activeEditor == 'workbench.editor.interactive'" },
    { "key": "enter",                 "command": "keybindings.editor.acceptWhenExpression",
                                         "when": "inKeybindings && whenFocus && !suggestWidgetVisible" },
    { "key": "ctrl+m ctrl+a",         "command": "keybindings.editor.addKeybinding",
                                         "when": "inKeybindings && keybindingFocus" },
    { "key": "escape",                "command": "keybindings.editor.clearSearchResults",
                                         "when": "inKeybindings && inKeybindingsSearch" },
    { "key": "ctrl+c",                "command": "keybindings.editor.copyKeybindingEntry",
                                         "when": "inKeybindings && keybindingFocus && !whenFocus" },
    { "key": "enter",                 "command": "keybindings.editor.defineKeybinding",
                                         "when": "inKeybindings && keybindingFocus && !whenFocus" },
    { "key": "ctrl+m ctrl+e",         "command": "keybindings.editor.defineWhenExpression",
                                         "when": "inKeybindings && keybindingFocus" },
    { "key": "ctrl+down",             "command": "keybindings.editor.focusKeybindings",
                                         "when": "inKeybindings && inKeybindingsSearch" },
    { "key": "alt+k",                 "command": "keybindings.editor.recordSearchKeys",
                                         "when": "inKeybindings && inKeybindingsSearch" },
    { "key": "escape",                "command": "keybindings.editor.rejectWhenExpression",
                                         "when": "inKeybindings && whenFocus && !suggestWidgetVisible" },
    { "key": "delete",                "command": "keybindings.editor.removeKeybinding",
                                         "when": "inKeybindings && keybindingFocus && !inputFocus" },
    { "key": "ctrl+f",                "command": "keybindings.editor.searchKeybindings",
                                         "when": "inKeybindings" },
    { "key": "alt+p",                 "command": "keybindings.editor.toggleSortByPrecedence",
                                         "when": "inKeybindings" },
    { "key": "escape",                "command": "list.clear",
                                         "when": "listFocus && listHasSelectionOrFocus && !inputFocus && !treestickyScrollFocused" },
    { "key": "escape",                "command": "list.closeFind",
                                         "when": "listFocus && treeFindOpen" },
    { "key": "left",                  "command": "list.collapse",
                                         "when": "listFocus && treeElementCanCollapse && !inputFocus && !treestickyScrollFocused || listFocus && treeElementHasParent && !inputFocus && !treestickyScrollFocused" },
    { "key": "ctrl+left",             "command": "list.collapseAll",
                                         "when": "listFocus && !inputFocus && !treestickyScrollFocused" },
    { "key": "right",                 "command": "list.expand",
                                         "when": "listFocus && treeElementCanExpand && !inputFocus && !treestickyScrollFocused || listFocus && treeElementHasChild && !inputFocus && !treestickyScrollFocused" },
    { "key": "shift+down",            "command": "list.expandSelectionDown",
                                         "when": "listFocus && listSupportsMultiselect && !inputFocus && !treestickyScrollFocused" },
    { "key": "shift+up",              "command": "list.expandSelectionUp",
                                         "when": "listFocus && listSupportsMultiselect && !inputFocus && !treestickyScrollFocused" },
    { "key": "f3",                    "command": "list.find",
                                         "when": "listFocus && listSupportsFind" },
    { "key": "ctrl+alt+f",            "command": "list.find",
                                         "when": "listFocus && listSupportsFind" },
    { "key": "alt+down",              "command": "list.focusAnyDown",
                                         "when": "listFocus && !inputFocus && !treestickyScrollFocused" },
    { "key": "alt+home",              "command": "list.focusAnyFirst",
                                         "when": "listFocus && !inputFocus && !treestickyScrollFocused" },
    { "key": "alt+end",               "command": "list.focusAnyLast",
                                         "when": "listFocus && !inputFocus && !treestickyScrollFocused" },
    { "key": "alt+up",                "command": "list.focusAnyUp",
                                         "when": "listFocus && !inputFocus && !treestickyScrollFocused" },
    { "key": "down",                  "command": "list.focusDown",
                                         "when": "listFocus && !inputFocus && !treestickyScrollFocused" },
    { "key": "home",                  "command": "list.focusFirst",
                                         "when": "listFocus && !inputFocus && !treestickyScrollFocused" },
    { "key": "end",                   "command": "list.focusLast",
                                         "when": "listFocus && !inputFocus && !treestickyScrollFocused" },
    { "key": "pagedown",              "command": "list.focusPageDown",
                                         "when": "listFocus && !inputFocus && !treestickyScrollFocused" },
    { "key": "pageup",                "command": "list.focusPageUp",
                                         "when": "listFocus && !inputFocus && !treestickyScrollFocused" },
    { "key": "up",                    "command": "list.focusUp",
                                         "when": "listFocus && !inputFocus && !treestickyScrollFocused" },
    { "key": "ctrl+down",             "command": "list.scrollDown",
                                         "when": "listFocus && !inputFocus && !treestickyScrollFocused && listScrollAtBoundary != 'both' && listScrollAtBoundary != 'bottom'" },
    { "key": "ctrl+up",               "command": "list.scrollUp",
                                         "when": "listFocus && !inputFocus && !treestickyScrollFocused && listScrollAtBoundary != 'both' && listScrollAtBoundary != 'top'" },
    { "key": "enter",                 "command": "list.select",
                                         "when": "listFocus && !inputFocus && !treestickyScrollFocused" },
    { "key": "ctrl+a",                "command": "list.selectAll",
                                         "when": "listFocus && listSupportsMultiselect && !inputFocus && !treestickyScrollFocused" },
    { "key": "ctrl+m ctrl+i",         "command": "list.showHover",
                                         "when": "listFocus && !inputFocus && !treestickyScrollFocused" },
    { "key": "space",                 "command": "list.toggleExpand",
                                         "when": "listFocus && !inputFocus && !treestickyScrollFocused" },
    { "key": "ctrl+shift+enter",      "command": "list.toggleSelection",
                                         "when": "listFocus && !inputFocus && !treestickyScrollFocused" },
    { "key": "y",                     "command": "notebook.cell.changeToCode",
                                         "when": "notebookEditorFocused && !inputFocus && !notebookOutputFocused && activeEditor == 'workbench.editor.notebook' && notebookCellType == 'markup'" },
    { "key": "m",                     "command": "notebook.cell.changeToMarkdown",
                                         "when": "notebookEditorFocused && !inputFocus && !notebookOutputFocused && activeEditor == 'workbench.editor.notebook' && notebookCellType == 'code'" },
    { "key": "enter",                 "command": "notebook.cell.chat.accept",
                                         "when": "inlineChatFocused && notebookCellChatFocused && !notebookCellEditorFocused" },
    { "key": "ctrl+enter",            "command": "notebook.cell.chat.acceptChanges",
                                         "when": "notebookEditorFocused && !inputFocus && !notebookCellEditorFocused && notebookChatOuterFocusPosition == 'below'" },
    { "key": "ctrl+down",             "command": "notebook.cell.chat.focus",
                                         "when": "notebookEditorFocused && !inputFocus && notebookChatOuterFocusPosition == 'above'" },
    { "key": "ctrl+up",               "command": "notebook.cell.chat.focus",
                                         "when": "notebookEditorFocused && !inputFocus && notebookChatOuterFocusPosition == 'below'" },
    { "key": "ctrl+down",             "command": "notebook.cell.chat.focusNextCell",
                                         "when": "inlineChatFocused && notebookCellChatFocused" },
    { "key": "ctrl+up",               "command": "notebook.cell.chat.focusPreviousCell",
                                         "when": "inlineChatFocused && notebookCellChatFocused" },
    { "key": "ctrl+m i",              "command": "notebook.cell.chat.start",
                                         "when": "config.notebook.experimental.cellChat && notebookChatAgentRegistered && notebookEditable && notebookEditorFocused && !inputFocus || config.notebook.experimental.generate && notebookChatAgentRegistered && notebookEditable && notebookEditorFocused && !inputFocus" },
    { "key": "ctrl+i",                "command": "notebook.cell.chat.start",
                                         "when": "config.notebook.experimental.cellChat && notebookChatAgentRegistered && notebookEditable && notebookEditorFocused && !inputFocus || config.notebook.experimental.generate && notebookChatAgentRegistered && notebookEditable && notebookEditorFocused && !inputFocus" },
    { "key": "alt+delete",            "command": "notebook.cell.clearOutputs",
                                         "when": "notebookCellEditable && notebookCellHasOutputs && notebookEditable && notebookEditorFocused && !inputFocus" },
    { "key": "ctrl+m ctrl+c",         "command": "notebook.cell.collapseCellInput",
                                         "when": "notebookCellListFocused && !inputFocus && !notebookCellInputIsCollapsed" },
    { "key": "ctrl+m t",              "command": "notebook.cell.collapseCellOutput",
                                         "when": "notebookCellHasOutputs && notebookCellListFocused && !inputFocus && !notebookCellOutputIsCollapsed" },
    { "key": "shift+alt+down",        "command": "notebook.cell.copyDown",
                                         "when": "notebookEditorFocused && !inputFocus" },
    { "key": "shift+alt+up",          "command": "notebook.cell.copyUp",
                                         "when": "notebookEditorFocused && !inputFocus" },
    { "key": "delete",                "command": "notebook.cell.delete",
                                         "when": "notebookEditorFocused && !inputFocus && !notebookOutputInputFocused" },
    { "key": "shift+alt+d",           "command": "notebook.cell.detectLanguage",
                                         "when": "notebookCellEditable && notebookEditable" },
    { "key": "enter",                 "command": "notebook.cell.edit",
                                         "when": "notebookCellListFocused && notebookEditable && !editorHoverFocused && !inputFocus && !notebookOutputInputFocused" },
    { "key": "ctrl+m ctrl+c",         "command": "notebook.cell.expandCellInput",
                                         "when": "notebookCellInputIsCollapsed && notebookCellListFocused" },
    { "key": "ctrl+m t",              "command": "notebook.cell.expandCellOutput",
                                         "when": "notebookCellListFocused && notebookCellOutputIsCollapsed" },
    { "key": "ctrl+down",             "command": "notebook.cell.focusInOutput",
                                         "when": "notebookCellHasOutputs && notebookEditorFocused" },
    { "key": "ctrl+up",               "command": "notebook.cell.focusOutOutput",
                                         "when": "notebookEditorFocused && notebookOutputFocused" },
    { "key": "ctrl+shift+enter",      "command": "notebook.cell.insertCodeCellAbove",
                                         "when": "notebookCellListFocused && !inputFocus" },
    { "key": "ctrl+enter",            "command": "notebook.cell.insertCodeCellBelow",
                                         "when": "notebookCellListFocused && !inputFocus && notebookChatOuterFocusPosition == ''" },
    { "key": "shift+alt+win+j",       "command": "notebook.cell.joinAbove",
                                         "when": "notebookEditorFocused" },
    { "key": "alt+win+j",             "command": "notebook.cell.joinBelow",
                                         "when": "notebookEditorFocused" },
    { "key": "alt+down",              "command": "notebook.cell.moveDown",
                                         "when": "notebookEditorFocused && !inputFocus" },
    { "key": "alt+up",                "command": "notebook.cell.moveUp",
                                         "when": "notebookEditorFocused && !inputFocus" },
    { "key": "ctrl+.",                "command": "notebook.cell.openFailureActions",
                                         "when": "notebookCellFocused && notebookCellHasErrorDiagnostics && !notebookCellEditorFocused" },
    { "key": "ctrl+m ctrl+shift+\\",  "command": "notebook.cell.split",
                                         "when": "editorTextFocus && notebookCellEditable && notebookEditable && notebookEditorFocused" },
    { "key": "ctrl+m y",              "command": "notebook.cell.toggleOutputScrolling",
                                         "when": "notebookCellHasOutputs && notebookCellListFocused && !inputFocus" },
    { "key": "ctrl+p",                "command": "notebook.centerActiveCell",
                                         "when": "notebookEditorFocused" },
    { "key": "alt+f3",                "command": "notebook.diff.action.next",
                                         "when": "activeEditor == 'workbench.editor.notebookTextDiffEditor'" },
    { "key": "shift+alt+f3",          "command": "notebook.diff.action.previous",
                                         "when": "activeEditor == 'workbench.editor.notebookTextDiffEditor'" },
    { "key": "ctrl+f",                "command": "notebook.find",
                                         "when": "notebookEditorFocused && !editorFocus && activeEditor == 'workbench.editor.interactive' || notebookEditorFocused && !editorFocus && activeEditor == 'workbench.editor.notebook'" },
    { "key": "ctrl+end",              "command": "notebook.focusBottom",
                                         "when": "notebookEditorFocused && !inputFocus" },
    { "key": "down",                  "command": "notebook.focusNextEditor",
                                         "when": "config.notebook.navigation.allowNavigateToSurroundingCells && notebookCursorNavigationMode && notebookEditorFocused && !accessibilityModeEnabled && !isEmbeddedDiffEditor && !notebookCellMarkdownEditMode && notebookCellType == 'markup'" },
    { "key": "ctrl+down",             "command": "notebook.focusNextEditor",
                                         "when": "notebookEditorFocused && notebookOutputFocused" },
    { "key": "up",                    "command": "notebook.focusPreviousEditor",
                                         "when": "config.notebook.navigation.allowNavigateToSurroundingCells && notebookCursorNavigationMode && notebookEditorFocused && !accessibilityModeEnabled && !isEmbeddedDiffEditor && !notebookCellMarkdownEditMode && notebookCellType == 'markup'" },
    { "key": "ctrl+home",             "command": "notebook.focusTop",
                                         "when": "notebookEditorFocused && !inputFocus" },
    { "key": "left",                  "command": "notebook.fold",
                                         "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook'" },
    { "key": "ctrl+shift+[",          "command": "notebook.fold",
                                         "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook'" },
    { "key": "shift+alt+f",           "command": "notebook.format",
                                         "when": "notebookEditable && !editorTextFocus && activeEditor == 'workbench.editor.notebook'" },
    { "key": "escape",                "command": "notebook.hideFind",
                                         "when": "notebookEditorFocused && notebookFindWidgetFocused" },
    { "key": "right",                 "command": "notebook.unfold",
                                         "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook'" },
    { "key": "ctrl+shift+]",          "command": "notebook.unfold",
                                         "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook'" },
    { "key": "ctrl+shift+a",          "command": "notification.acceptPrimaryAction",
                                         "when": "notificationFocus || notificationToastsVisible" },
    { "key": "delete",                "command": "notification.clear",
                                         "when": "notificationFocus" },
    { "key": "left",                  "command": "notification.collapse",
                                         "when": "notificationFocus" },
    { "key": "right",                 "command": "notification.expand",
                                         "when": "notificationFocus" },
    { "key": "enter",                 "command": "notification.toggle",
                                         "when": "notificationFocus" },
    { "key": "space",                 "command": "notification.toggle",
                                         "when": "notificationFocus" },
    { "key": "home",                  "command": "notifications.focusFirstToast",
                                         "when": "notificationFocus && notificationToastsVisible" },
    { "key": "pageup",                "command": "notifications.focusFirstToast",
                                         "when": "notificationFocus && notificationToastsVisible" },
    { "key": "end",                   "command": "notifications.focusLastToast",
                                         "when": "notificationFocus && notificationToastsVisible" },
    { "key": "pagedown",              "command": "notifications.focusLastToast",
                                         "when": "notificationFocus && notificationToastsVisible" },
    { "key": "down",                  "command": "notifications.focusNextToast",
                                         "when": "notificationFocus && notificationToastsVisible" },
    { "key": "up",                    "command": "notifications.focusPreviousToast",
                                         "when": "notificationFocus && notificationToastsVisible" },
    { "key": "ctrl+m ctrl+shift+n",   "command": "notifications.showList" },
    { "key": "escape",                "command": "problems.action.clearFilterText",
                                         "when": "problemsFilterFocus" },
    { "key": "ctrl+c",                "command": "problems.action.copy",
                                         "when": "problemsVisibility && !relatedInformationFocus && focusedView == 'workbench.panel.markers.view'" },
    { "key": "ctrl+f",                "command": "problems.action.focusFilter",
                                         "when": "focusedView == 'workbench.panel.markers.view'" },
    { "key": "ctrl+down",             "command": "problems.action.focusProblemsFromFilter",
                                         "when": "problemsFilterFocus" },
    { "key": "enter",                 "command": "problems.action.open",
                                         "when": "problemFocus" },
    { "key": "ctrl+enter",            "command": "problems.action.openToSide",
                                         "when": "problemFocus" },
    { "key": "ctrl+.",                "command": "problems.action.showQuickFixes",
                                         "when": "problemFocus" },
    { "key": "ctrl+alt+home",         "command": "quickInput.first",
                                         "when": "inQuickInput && quickInputType == 'quickPick'" },
    { "key": "ctrl+home",             "command": "quickInput.first",
                                         "when": "inQuickInput && quickInputType == 'quickPick'" },
    { "key": "ctrl+alt+end",          "command": "quickInput.last",
                                         "when": "inQuickInput && quickInputType == 'quickPick'" },
    { "key": "ctrl+end",              "command": "quickInput.last",
                                         "when": "inQuickInput && quickInputType == 'quickPick'" },
    { "key": "ctrl+down",             "command": "quickInput.next",
                                         "when": "inQuickInput && quickInputType == 'quickPick'" },
    { "key": "down",                  "command": "quickInput.next",
                                         "when": "inQuickInput && quickInputType == 'quickPick'" },
    { "key": "ctrl+alt+down",         "command": "quickInput.nextSeparator",
                                         "when": "inQuickInput && quickInputType == 'quickPick'" },
    { "key": "alt+down",              "command": "quickInput.nextSeparatorWithQuickAccessFallback",
                                         "when": "inQuickInput && quickInputType == 'quickPick'" },
    { "key": "ctrl+alt+pagedown",     "command": "quickInput.pageNext",
                                         "when": "inQuickInput && quickInputType == 'quickPick'" },
    { "key": "ctrl+pagedown",         "command": "quickInput.pageNext",
                                         "when": "inQuickInput && quickInputType == 'quickPick'" },
    { "key": "alt+pagedown",          "command": "quickInput.pageNext",
                                         "when": "inQuickInput && quickInputType == 'quickPick'" },
    { "key": "pagedown",              "command": "quickInput.pageNext",
                                         "when": "inQuickInput && quickInputType == 'quickPick'" },
    { "key": "ctrl+alt+pageup",       "command": "quickInput.pagePrevious",
                                         "when": "inQuickInput && quickInputType == 'quickPick'" },
    { "key": "ctrl+pageup",           "command": "quickInput.pagePrevious",
                                         "when": "inQuickInput && quickInputType == 'quickPick'" },
    { "key": "alt+pageup",            "command": "quickInput.pagePrevious",
                                         "when": "inQuickInput && quickInputType == 'quickPick'" },
    { "key": "pageup",                "command": "quickInput.pagePrevious",
                                         "when": "inQuickInput && quickInputType == 'quickPick'" },
    { "key": "ctrl+up",               "command": "quickInput.previous",
                                         "when": "inQuickInput && quickInputType == 'quickPick'" },
    { "key": "up",                    "command": "quickInput.previous",
                                         "when": "inQuickInput && quickInputType == 'quickPick'" },
    { "key": "ctrl+alt+up",           "command": "quickInput.previousSeparator",
                                         "when": "inQuickInput && quickInputType == 'quickPick'" },
    { "key": "alt+up",                "command": "quickInput.previousSeparatorWithQuickAccessFallback",
                                         "when": "inQuickInput && quickInputType == 'quickPick'" },
    { "key": "space",                 "command": "refactorPreview.toggleCheckedState",
                                         "when": "listFocus && refactorPreview.enabled && !inputFocus && !treestickyScrollFocused" },
    { "key": "shift+alt+r",           "command": "revealFileInOS",
                                         "when": "!editorFocus" },
    { "key": "enter",                 "command": "revealReference",
                                         "when": "listFocus && referenceSearchVisible && !inputFocus && !treeElementCanCollapse && !treeElementCanExpand && !treestickyScrollFocused" },
    { "key": "ctrl+m s",              "command": "saveAll" },
    { "key": "ctrl+enter",            "command": "scm.acceptInput",
                                         "when": "scmRepository" },
    { "key": "escape",                "command": "scm.clearInput",
                                         "when": "scmRepository && !suggestWidgetVisible" },
    { "key": "alt+down",              "command": "scm.forceViewNextCommit",
                                         "when": "scmRepository" },
    { "key": "alt+up",                "command": "scm.forceViewPreviousCommit",
                                         "when": "scmRepository" },
    { "key": "down",                  "command": "scm.viewNextCommit",
                                         "when": "scmInputIsInLastPosition && scmRepository && !suggestWidgetVisible" },
    { "key": "up",                    "command": "scm.viewPreviousCommit",
                                         "when": "scmInputIsInFirstPosition && scmRepository && !suggestWidgetVisible" },
    { "key": "escape",                "command": "search.action.cancel",
                                         "when": "listFocus && searchViewletVisible && !inputFocus && !treestickyScrollFocused && searchState != '0'" },
    { "key": "ctrl+c",                "command": "search.action.copyMatch",
                                         "when": "fileMatchOrMatchFocus" },
    { "key": "shift+alt+c",           "command": "search.action.copyPath",
                                         "when": "fileMatchOrFolderMatchWithResourceFocus" },
    { "key": "f4",                    "command": "search.action.focusNextSearchResult",
                                         "when": "hasSearchResult || inSearchEditor" },
    { "key": "shift+f4",              "command": "search.action.focusPreviousSearchResult",
                                         "when": "hasSearchResult || inSearchEditor" },
    { "key": "ctrl+up",               "command": "search.action.focusSearchFromResults",
                                         "when": "accessibilityModeEnabled && searchViewletVisible || firstMatchFocus && searchViewletVisible" },
    { "key": "alt+enter",             "command": "search.action.openInEditor",
                                         "when": "hasSearchResult && searchViewletFocus" },
    { "key": "enter",                 "command": "search.action.openResult",
                                         "when": "fileMatchOrMatchFocus && searchViewletVisible" },
    { "key": "ctrl+enter",            "command": "search.action.openResultToSide",
                                         "when": "fileMatchOrMatchFocus && searchViewletVisible" },
    { "key": "delete",                "command": "search.action.remove",
                                         "when": "fileMatchOrMatchFocus && searchViewletVisible" },
    { "key": "ctrl+shift+1",          "command": "search.action.replace",
                                         "when": "isEditableItem && matchFocus && replaceActive && searchViewletVisible" },
    { "key": "ctrl+alt+enter",        "command": "search.action.replaceAll",
                                         "when": "replaceActive && searchViewletVisible && !findWidgetVisible" },
    { "key": "ctrl+shift+enter",      "command": "search.action.replaceAllInFile",
                                         "when": "fileMatchFocus && isEditableItem && replaceActive && searchViewletVisible" },
    { "key": "ctrl+shift+1",          "command": "search.action.replaceAllInFile",
                                         "when": "fileMatchFocus && isEditableItem && replaceActive && searchViewletVisible" },
    { "key": "ctrl+shift+enter",      "command": "search.action.replaceAllInFolder",
                                         "when": "folderMatchFocus && isEditableItem && replaceActive && searchViewletVisible" },
    { "key": "ctrl+shift+1",          "command": "search.action.replaceAllInFolder",
                                         "when": "folderMatchFocus && isEditableItem && replaceActive && searchViewletVisible" },
    { "key": "shift+alt+f",           "command": "search.action.restrictSearchToFolder",
                                         "when": "folderMatchWithResourceFocus && searchViewletVisible" },
    { "key": "ctrl+down",             "command": "search.focus.nextInputBox",
                                         "when": "inSearchEditor && inputBoxFocus || inputBoxFocus && searchViewletVisible" },
    { "key": "ctrl+up",               "command": "search.focus.previousInputBox",
                                         "when": "inSearchEditor && inputBoxFocus || inputBoxFocus && searchViewletVisible && !searchInputBoxFocus" },
    { "key": "ctrl+shift+l",          "command": "selectAllSearchEditorMatches",
                                         "when": "inSearchEditor" },
    { "key": "escape",                "command": "settings.action.focusLevelUp",
                                         "when": "inSettingsEditor && !inSettingsJSONEditor && !inSettingsSearch" },
    { "key": "enter",                 "command": "settings.action.focusSettingControl",
                                         "when": "inSettingsEditor && settingRowFocus" },
    { "key": "down",                  "command": "settings.action.focusSettingsFromSearch",
                                         "when": "inSettingsSearch && !suggestWidgetVisible" },
    { "key": "enter",                 "command": "settings.action.focusSettingsList",
                                         "when": "inSettingsEditor && settingsTocRowFocus" },
    { "key": "left",                  "command": "settings.action.focusTOC",
                                         "when": "inSettingsEditor && settingRowFocus" },
    { "key": "shift+f9",              "command": "settings.action.showContextMenu",
                                         "when": "inSettingsEditor" },
    { "key": "ctrl+; ctrl+x",         "command": "testing.cancelRun" },
    { "key": "ctrl+; ctrl+shift+a",   "command": "testing.coverageAll" },
    { "key": "ctrl+; ctrl+shift+c",   "command": "testing.coverageAtCursor",
                                         "when": "editorTextFocus" },
    { "key": "ctrl+; ctrl+shift+f",   "command": "testing.coverageCurrentFile",
                                         "when": "editorTextFocus" },
    { "key": "ctrl+; ctrl+shift+l",   "command": "testing.coverageLastRun" },
    { "key": "ctrl+; ctrl+a",         "command": "testing.debugAll" },
    { "key": "ctrl+; ctrl+c",         "command": "testing.debugAtCursor",
                                         "when": "editorTextFocus" },
    { "key": "ctrl+; ctrl+f",         "command": "testing.debugCurrentFile",
                                         "when": "editorTextFocus" },
    { "key": "ctrl+; ctrl+e",         "command": "testing.debugFailTests" },
    { "key": "ctrl+; ctrl+l",         "command": "testing.debugLastRun" },
    { "key": "ctrl+; ctrl+m",         "command": "testing.openOutputPeek" },
    { "key": "ctrl+; e",              "command": "testing.reRunFailTests" },
    { "key": "ctrl+; l",              "command": "testing.reRunLastRun" },
    { "key": "ctrl+; ctrl+r",         "command": "testing.refreshTests",
                                         "when": "testing.canRefresh" },
    { "key": "ctrl+; a",              "command": "testing.runAll" },
    { "key": "ctrl+; c",              "command": "testing.runAtCursor",
                                         "when": "editorTextFocus" },
    { "key": "ctrl+; f",              "command": "testing.runCurrentFile",
                                         "when": "editorTextFocus" },
    { "key": "ctrl+; ctrl+o",         "command": "testing.showMostRecentOutput",
                                         "when": "testing.hasAnyResults" },
    { "key": "ctrl+; ctrl+shift+i",   "command": "testing.toggleInlineCoverage" },
    { "key": "ctrl+; ctrl+i",         "command": "testing.toggleInlineTestOutput" },
    { "key": "alt+h",                 "command": "testing.toggleTestingPeekHistory",
                                         "when": "testing.isPeekVisible" },
    { "key": "alt+c",                 "command": "toggleSearchCaseSensitive",
                                         "when": "searchViewletFocus" },
    { "key": "alt+c",                 "command": "toggleSearchEditorCaseSensitive",
                                         "when": "inSearchEditor && searchInputBoxFocus" },
    { "key": "alt+l",                 "command": "toggleSearchEditorContextLines",
                                         "when": "inSearchEditor" },
    { "key": "alt+r",                 "command": "toggleSearchEditorRegex",
                                         "when": "inSearchEditor && searchInputBoxFocus" },
    { "key": "alt+w",                 "command": "toggleSearchEditorWholeWord",
                                         "when": "inSearchEditor && searchInputBoxFocus" },
    { "key": "alt+p",                 "command": "toggleSearchPreserveCase",
                                         "when": "searchViewletFocus" },
    { "key": "alt+r",                 "command": "toggleSearchRegex",
                                         "when": "searchViewletFocus" },
    { "key": "alt+w",                 "command": "toggleSearchWholeWord",
                                         "when": "searchViewletFocus" },
    { "key": "ctrl+down",             "command": "widgetNavigation.focusNext",
                                         "when": "inputFocus && navigableContainerFocused || navigableContainerFocused && treestickyScrollFocused || navigableContainerFocused && !listFocus || navigableContainerFocused && listScrollAtBoundary == 'both' || navigableContainerFocused && listScrollAtBoundary == 'bottom'" },
    { "key": "ctrl+up",               "command": "widgetNavigation.focusPrevious",
                                         "when": "inputFocus && navigableContainerFocused || navigableContainerFocused && treestickyScrollFocused || navigableContainerFocused && !listFocus || navigableContainerFocused && listScrollAtBoundary == 'both' || navigableContainerFocused && listScrollAtBoundary == 'top'" },
    { "key": "alt+backspace",         "command": "workbench.action.chat.cancel" },
    { "key": "ctrl+down",             "command": "workbench.action.chat.focusInput",
                                         "when": "inChat && !inChatInput" },
    { "key": "ctrl+i",                "command": "workbench.action.chat.holdToVoiceChatInChatView",
                                         "when": "chatIsEnabled && hasSpeechProvider && !chatSessionRequestInProgress && !editorFocus && !inChatInput && !inlineChatFocused && !notebookEditorFocused" },
    { "key": "ctrl+l",                "command": "workbench.action.chat.newChat",
                                         "when": "chatIsEnabled && inChat" },
    { "key": "ctrl+alt+pagedown",     "command": "workbench.action.chat.nextCodeBlock",
                                         "when": "chatIsEnabled && inChat" },
    { "key": "ctrl+f9",               "command": "workbench.action.chat.nextFileTree",
                                         "when": "chatIsEnabled && inChat" },
    { "key": "ctrl+alt+i",            "command": "workbench.action.chat.open" },
    { "key": "ctrl+alt+pageup",       "command": "workbench.action.chat.previousCodeBlock",
                                         "when": "chatIsEnabled && inChat" },
    { "key": "ctrl+shift+f9",         "command": "workbench.action.chat.previousFileTree",
                                         "when": "chatIsEnabled && inChat" },
    { "key": "delete",                "command": "workbench.action.chat.remove",
                                         "when": "inChat && !inChatInput" },
    { "key": "ctrl+shift+enter",      "command": "workbench.action.chat.sendToNewChat",
                                         "when": "chatInputHasText && inChatInput && !chatSessionRequestInProgress" },
    { "key": "ctrl+i",                "command": "workbench.action.chat.startVoiceChat",
                                         "when": "chatIsEnabled && hasSpeechProvider && inChatInput && !chatSessionRequestInProgress && !editorFocus && !notebookEditorFocused && !scopedVoiceChatGettingReady && !speechToTextInProgress && !terminalChatActiveRequest || chatIsEnabled && hasSpeechProvider && inlineChatFocused && !chatSessionRequestInProgress && !editorFocus && !notebookEditorFocused && !scopedVoiceChatGettingReady && !speechToTextInProgress && !terminalChatActiveRequest" },
    { "key": "ctrl+i",                "command": "workbench.action.chat.stopListeningAndSubmit",
                                         "when": "inChatInput && voiceChatInProgress && scopedVoiceChatInProgress == 'editor' || inChatInput && voiceChatInProgress && scopedVoiceChatInProgress == 'inline' || inChatInput && voiceChatInProgress && scopedVoiceChatInProgress == 'quick' || inChatInput && voiceChatInProgress && scopedVoiceChatInProgress == 'terminal' || inChatInput && voiceChatInProgress && scopedVoiceChatInProgress == 'view' || inlineChatFocused && voiceChatInProgress && scopedVoiceChatInProgress == 'editor' || inlineChatFocused && voiceChatInProgress && scopedVoiceChatInProgress == 'inline' || inlineChatFocused && voiceChatInProgress && scopedVoiceChatInProgress == 'quick' || inlineChatFocused && voiceChatInProgress && scopedVoiceChatInProgress == 'terminal' || inlineChatFocused && voiceChatInProgress && scopedVoiceChatInProgress == 'view'" },
    { "key": "ctrl+w",                "command": "workbench.action.closeActiveEditor" },
    { "key": "ctrl+f4",               "command": "workbench.action.closeActiveEditor" },
    { "key": "ctrl+m ctrl+w",         "command": "workbench.action.closeAllEditors" },
    { "key": "ctrl+m ctrl+shift+w",   "command": "workbench.action.closeAllGroups" },
    { "key": "ctrl+m w",              "command": "workbench.action.closeEditorsInGroup" },
    { "key": "ctrl+m f",              "command": "workbench.action.closeFolder",
                                         "when": "emptyWorkspaceSupport && workbenchState != 'empty'" },
    { "key": "ctrl+w",                "command": "workbench.action.closeGroup",
                                         "when": "activeEditorGroupEmpty && multipleEditorGroups" },
    { "key": "ctrl+f4",               "command": "workbench.action.closeGroup",
                                         "when": "activeEditorGroupEmpty && multipleEditorGroups" },
    { "key": "shift+escape",          "command": "workbench.action.closeQuickOpen",
                                         "when": "inQuickOpen" },
    { "key": "escape",                "command": "workbench.action.closeQuickOpen",
                                         "when": "inQuickOpen" },
    { "key": "ctrl+m u",              "command": "workbench.action.closeUnmodifiedEditors" },
    { "key": "ctrl+shift+w",          "command": "workbench.action.closeWindow" },
    { "key": "alt+f4",                "command": "workbench.action.closeWindow" },
    { "key": "alt+f5",                "command": "workbench.action.compareEditor.nextChange",
                                         "when": "textCompareEditorVisible" },
    { "key": "ctrl+m shift+o",        "command": "workbench.action.compareEditor.openSide",
                                         "when": "inDiffEditor" },
    { "key": "shift+alt+f5",          "command": "workbench.action.compareEditor.previousChange",
                                         "when": "textCompareEditorVisible" },
    { "key": "ctrl+m o",              "command": "workbench.action.copyEditorToNewWindow",
                                         "when": "activeEditor" },
    { "key": "shift+f5",              "command": "workbench.action.debug.disconnect",
                                         "when": "focusedSessionIsAttach && inDebugMode" },
    { "key": "ctrl+shift+f5",         "command": "workbench.action.debug.restart",
                                         "when": "inDebugMode" },
    { "key": "ctrl+f5",               "command": "workbench.action.debug.run",
                                         "when": "debuggersAvailable && debugState != 'initializing'" },
    { "key": "f5",                    "command": "workbench.action.debug.start",
                                         "when": "debuggersAvailable && debugState == 'inactive'" },
    { "key": "ctrl+f11",              "command": "workbench.action.debug.stepIntoTarget",
                                         "when": "inDebugMode && stepIntoTargetsSupported && debugState == 'stopped'" },
    { "key": "shift+f11",             "command": "workbench.action.debug.stepOut",
                                         "when": "debugState == 'stopped'" },
    { "key": "f10",                   "command": "workbench.action.debug.stepOver",
                                         "when": "debugState == 'stopped'" },
    { "key": "shift+f5",              "command": "workbench.action.debug.stop",
                                         "when": "inDebugMode && !focusedSessionIsAttach" },
    { "key": "ctrl+m m",              "command": "workbench.action.editor.changeLanguageMode",
                                         "when": "!notebookEditorFocused" },
    { "key": "alt+`",                 "command": "workbench.action.editorDictation.start",
                                         "when": "hasSpeechProvider && !editorReadonly && !speechToTextInProgress" },
    { "key": "ctrl+alt+v",            "command": "workbench.action.editorDictation.start",
                                         "when": "hasSpeechProvider && !editorReadonly && !speechToTextInProgress" },
    { "key": "ctrl+m p",              "command": "workbench.action.files.copyPathOfActiveFile" },
    { "key": "ctrl+n",                "command": "workbench.action.files.newUntitledFile" },
    { "key": "ctrl+o",                "command": "workbench.action.files.openFile",
                                         "when": "true" },
    { "key": "ctrl+o",                "command": "workbench.action.files.openFileFolder",
                                         "when": "isMacNative && openFolderWorkspaceSupport" },
    { "key": "ctrl+m ctrl+o",         "command": "workbench.action.files.openFolder",
                                         "when": "openFolderWorkspaceSupport" },
    { "key": "ctrl+o",                "command": "workbench.action.files.openFolderViaWorkspace",
                                         "when": "!openFolderWorkspaceSupport && workbenchState == 'workspace'" },
    { "key": "ctrl+o",                "command": "workbench.action.files.openLocalFile",
                                         "when": "remoteFileDialogVisible" },
    { "key": "ctrl+m ctrl+o",         "command": "workbench.action.files.openLocalFolder",
                                         "when": "remoteFileDialogVisible" },
    { "key": "ctrl+m r",              "command": "workbench.action.files.revealActiveFileInWindows" },
    { "key": "ctrl+s",                "command": "workbench.action.files.save" },
    { "key": "ctrl+shift+s",          "command": "workbench.action.files.saveAs" },
    { "key": "ctrl+shift+s",          "command": "workbench.action.files.saveLocalFile",
                                         "when": "remoteFileDialogVisible" },
    { "key": "ctrl+m ctrl+shift+s",   "command": "workbench.action.files.saveWithoutFormatting" },
    { "key": "ctrl+shift+f",          "command": "workbench.action.findInFiles" },
    { "key": "ctrl+m ctrl+up",        "command": "workbench.action.focusAboveGroup" },
    { "key": "ctrl+m ctrl+down",      "command": "workbench.action.focusBelowGroup" },
    { "key": "ctrl+8",                "command": "workbench.action.focusEighthEditorGroup" },
    { "key": "ctrl+5",                "command": "workbench.action.focusFifthEditorGroup" },
    { "key": "ctrl+1",                "command": "workbench.action.focusFirstEditorGroup" },
    { "key": "ctrl+4",                "command": "workbench.action.focusFourthEditorGroup" },
    { "key": "ctrl+m ctrl+left",      "command": "workbench.action.focusLeftGroup" },
    { "key": "f6",                    "command": "workbench.action.focusNextPart" },
    { "key": "shift+f6",              "command": "workbench.action.focusPreviousPart" },
    { "key": "ctrl+m ctrl+right",     "command": "workbench.action.focusRightGroup" },
    { "key": "ctrl+2",                "command": "workbench.action.focusSecondEditorGroup" },
    { "key": "ctrl+7",                "command": "workbench.action.focusSeventhEditorGroup" },
    { "key": "ctrl+0",                "command": "workbench.action.focusSideBar" },
    { "key": "ctrl+6",                "command": "workbench.action.focusSixthEditorGroup" },
    { "key": "ctrl+3",                "command": "workbench.action.focusThirdEditorGroup" },
    { "key": "ctrl+g",                "command": "workbench.action.gotoLine" },
    { "key": "ctrl+shift+o",          "command": "workbench.action.gotoSymbol",
                                         "when": "!accessibilityHelpIsShown && !accessibleViewIsShown" },
    { "key": "down",                  "command": "workbench.action.interactivePlayground.arrowDown",
                                         "when": "interactivePlaygroundFocus && !editorTextFocus" },
    { "key": "up",                    "command": "workbench.action.interactivePlayground.arrowUp",
                                         "when": "interactivePlaygroundFocus && !editorTextFocus" },
    { "key": "pagedown",              "command": "workbench.action.interactivePlayground.pageDown",
                                         "when": "interactivePlaygroundFocus && !editorTextFocus" },
    { "key": "pageup",                "command": "workbench.action.interactivePlayground.pageUp",
                                         "when": "interactivePlaygroundFocus && !editorTextFocus" },
    { "key": "ctrl+m ctrl+shift+\\",  "command": "workbench.action.joinEditorInGroup",
                                         "when": "sideBySideEditorActive" },
    { "key": "ctrl+m enter",          "command": "workbench.action.keepEditor" },
    { "key": "ctrl+m",                "command": "workbench.action.keychord.leader",
                                         "when": "false" },
    { "key": "ctrl+9",                "command": "workbench.action.lastEditorInGroup" },
    { "key": "alt+0",                 "command": "workbench.action.lastEditorInGroup" },
    { "key": "ctrl+m down",           "command": "workbench.action.moveActiveEditorGroupDown" },
    { "key": "ctrl+m left",           "command": "workbench.action.moveActiveEditorGroupLeft" },
    { "key": "ctrl+m right",          "command": "workbench.action.moveActiveEditorGroupRight" },
    { "key": "ctrl+m up",             "command": "workbench.action.moveActiveEditorGroupUp" },
    { "key": "ctrl+shift+pageup",     "command": "workbench.action.moveEditorLeftInGroup" },
    { "key": "ctrl+shift+pagedown",   "command": "workbench.action.moveEditorRightInGroup" },
    { "key": "shift+alt+1",           "command": "workbench.action.moveEditorToFirstGroup" },
    { "key": "shift+alt+9",           "command": "workbench.action.moveEditorToLastGroup" },
    { "key": "ctrl+alt+right",        "command": "workbench.action.moveEditorToNextGroup" },
    { "key": "ctrl+alt+left",         "command": "workbench.action.moveEditorToPreviousGroup" },
    { "key": "alt+left",              "command": "workbench.action.navigateBack",
                                         "when": "canNavigateBack" },
    { "key": "alt+right",             "command": "workbench.action.navigateForward",
                                         "when": "canNavigateForward" },
    { "key": "ctrl+m ctrl+q",         "command": "workbench.action.navigateToLastEditLocation" },
    { "key": "ctrl+shift+n",          "command": "workbench.action.newWindow" },
    { "key": "ctrl+pagedown",         "command": "workbench.action.nextEditor" },
    { "key": "ctrl+m ctrl+pagedown",  "command": "workbench.action.nextEditorInGroup" },
    { "key": "alt+1",                 "command": "workbench.action.openEditorAtIndex1" },
    { "key": "alt+2",                 "command": "workbench.action.openEditorAtIndex2" },
    { "key": "alt+3",                 "command": "workbench.action.openEditorAtIndex3" },
    { "key": "alt+4",                 "command": "workbench.action.openEditorAtIndex4" },
    { "key": "alt+5",                 "command": "workbench.action.openEditorAtIndex5" },
    { "key": "alt+6",                 "command": "workbench.action.openEditorAtIndex6" },
    { "key": "alt+7",                 "command": "workbench.action.openEditorAtIndex7" },
    { "key": "alt+8",                 "command": "workbench.action.openEditorAtIndex8" },
    { "key": "alt+9",                 "command": "workbench.action.openEditorAtIndex9" },
    { "key": "ctrl+m ctrl+s",         "command": "workbench.action.openGlobalKeybindings" },
    { "key": "ctrl+r",                "command": "workbench.action.openRecent" },
    { "key": "ctrl+,",                "command": "workbench.action.openSettings" },
    { "key": "ctrl+shift+u",          "command": "workbench.action.output.toggleOutput",
                                         "when": "workbench.panel.output.active" },
    { "key": "ctrl+m shift+enter",    "command": "workbench.action.pinEditor",
                                         "when": "!activeEditorIsPinned" },
    { "key": "ctrl+pageup",           "command": "workbench.action.previousEditor" },
    { "key": "ctrl+m ctrl+pageup",    "command": "workbench.action.previousEditorInGroup" },
    { "key": "ctrl+e",                "command": "workbench.action.quickOpen" },
    { "key": "ctrl+p",                "command": "workbench.action.quickOpen" },
    { "key": "ctrl+shift+tab",        "command": "workbench.action.quickOpenLeastRecentlyUsedEditorInGroup",
                                         "when": "!activeEditorGroupEmpty" },
    { "key": "ctrl+tab",              "command": "workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup",
                                         "when": "!activeEditorGroupEmpty" },
    { "key": "ctrl+q",                "command": "workbench.action.quickOpenView" },
    { "key": "ctrl+shift+i",          "command": "workbench.action.quickchat.toggle",
                                         "when": "chatIsEnabled" },
    { "key": "ctrl+alt+o",            "command": "workbench.action.remote.showMenu" },
    { "key": "ctrl+shift+t",          "command": "workbench.action.reopenClosedEditor" },
    { "key": "ctrl+shift+h",          "command": "workbench.action.replaceInFiles" },
    { "key": "ctrl+shift+j",          "command": "workbench.action.search.toggleQueryDetails",
                                         "when": "inSearchEditor || searchViewletFocus" },
    { "key": "ctrl+m ctrl+t",         "command": "workbench.action.selectTheme" },
    { "key": "ctrl+m ctrl+p",         "command": "workbench.action.showAllEditors" },
    { "key": "ctrl+t",                "command": "workbench.action.showAllSymbols" },
    { "key": "f1",                    "command": "workbench.action.showCommands" },
    { "key": "ctrl+shift+p",          "command": "workbench.action.showCommands" },
    { "key": "ctrl+\\",               "command": "workbench.action.splitEditor" },
    { "key": "ctrl+m ctrl+\\",        "command": "workbench.action.splitEditorDown" },
    { "key": "ctrl+m ctrl+shift+\\",  "command": "workbench.action.splitEditorInGroup",
                                         "when": "activeEditorCanSplitInGroup" },
    { "key": "ctrl+m ctrl+\\",        "command": "workbench.action.splitEditorLeft" },
    { "key": "ctrl+m ctrl+\\",        "command": "workbench.action.splitEditorOrthogonal" },
    { "key": "ctrl+m ctrl+\\",        "command": "workbench.action.splitEditorRight" },
    { "key": "ctrl+m ctrl+\\",        "command": "workbench.action.splitEditorUp" },
    { "key": "ctrl+shift+b",          "command": "workbench.action.tasks.build",
                                         "when": "taskCommandsRegistered" },
    { "key": "shift+escape",          "command": "workbench.action.terminal.chat.close",
                                         "when": "terminalChatFocus && terminalChatVisible" },
    { "key": "escape",                "command": "workbench.action.terminal.chat.close",
                                         "when": "terminalChatFocus && terminalChatVisible" },
    { "key": "ctrl+i",                "command": "workbench.action.terminal.chat.focusInput",
                                         "when": "terminalChatFocus && !inlineChatFocused" },
    { "key": "ctrl+up",               "command": "workbench.action.terminal.chat.focusInput",
                                         "when": "terminalChatFocus && !inlineChatFocused" },
    { "key": "ctrl+down",             "command": "workbench.action.terminal.chat.focusResponse",
                                         "when": "terminalChatFocus" },
    { "key": "ctrl+alt+enter",        "command": "workbench.action.terminal.chat.insertCommand",
                                         "when": "terminalChatResponseContainsCodeBlock && terminalHasBeenCreated && !terminalChatActiveRequest && !terminalChatResponseContainsMultipleCodeBlocks || terminalChatResponseContainsCodeBlock && terminalProcessSupported && !terminalChatActiveRequest && !terminalChatResponseContainsMultipleCodeBlocks" },
    { "key": "alt+enter",             "command": "workbench.action.terminal.chat.insertCommand",
                                         "when": "terminalChatResponseContainsCodeBlock && terminalHasBeenCreated && !terminalChatActiveRequest && !terminalChatResponseContainsMultipleCodeBlocks || terminalChatResponseContainsCodeBlock && terminalProcessSupported && !terminalChatActiveRequest && !terminalChatResponseContainsMultipleCodeBlocks" },
    { "key": "ctrl+alt+enter",        "command": "workbench.action.terminal.chat.insertFirstCommand",
                                         "when": "terminalChatResponseContainsMultipleCodeBlocks && terminalHasBeenCreated && !terminalChatActiveRequest || terminalChatResponseContainsMultipleCodeBlocks && terminalProcessSupported && !terminalChatActiveRequest" },
    { "key": "alt+enter",             "command": "workbench.action.terminal.chat.insertFirstCommand",
                                         "when": "terminalChatResponseContainsMultipleCodeBlocks && terminalHasBeenCreated && !terminalChatActiveRequest || terminalChatResponseContainsMultipleCodeBlocks && terminalProcessSupported && !terminalChatActiveRequest" },
    { "key": "enter",                 "command": "workbench.action.terminal.chat.makeRequest",
                                         "when": "terminalChatFocus && terminalHasBeenCreated && !inlineChatEmpty && !terminalChatActiveRequest || terminalChatFocus && terminalProcessSupported && !inlineChatEmpty && !terminalChatActiveRequest" },
    { "key": "down",                  "command": "workbench.action.terminal.chat.nextFromHistory",
                                         "when": "terminalChatFocus" },
    { "key": "up",                    "command": "workbench.action.terminal.chat.previousFromHistory",
                                         "when": "terminalChatFocus" },
    { "key": "ctrl+enter",            "command": "workbench.action.terminal.chat.runCommand",
                                         "when": "terminalChatResponseContainsCodeBlock && terminalHasBeenCreated && !terminalChatActiveRequest && !terminalChatResponseContainsMultipleCodeBlocks || terminalChatResponseContainsCodeBlock && terminalProcessSupported && !terminalChatActiveRequest && !terminalChatResponseContainsMultipleCodeBlocks" },
    { "key": "ctrl+enter",            "command": "workbench.action.terminal.chat.runFirstCommand",
                                         "when": "terminalChatResponseContainsMultipleCodeBlocks && terminalHasBeenCreated && !terminalChatActiveRequest || terminalChatResponseContainsMultipleCodeBlocks && terminalProcessSupported && !terminalChatActiveRequest" },
    { "key": "escape",                "command": "workbench.action.terminal.clearSelection",
                                         "when": "terminalFocusInAny && terminalHasBeenCreated && terminalTextSelected && !terminalFindVisible || terminalFocusInAny && terminalProcessSupported && terminalTextSelected && !terminalFindVisible" },
    { "key": "ctrl+c",                "command": "workbench.action.terminal.copyAndClearSelection",
                                         "when": "terminalTextSelectedInFocused || terminalFocus && terminalHasBeenCreated && terminalTextSelected || terminalFocus && terminalProcessSupported && terminalTextSelected || terminalFocus && terminalTextSelected && terminalTextSelectedInFocused || terminalHasBeenCreated && terminalTextSelected && terminalTextSelectedInFocused || terminalProcessSupported && terminalTextSelected && terminalTextSelectedInFocused" },
    { "key": "ctrl+shift+c",          "command": "workbench.action.terminal.copySelection",
                                         "when": "terminalTextSelectedInFocused || terminalFocus && terminalHasBeenCreated && terminalTextSelected || terminalFocus && terminalProcessSupported && terminalTextSelected || terminalFocus && terminalTextSelected && terminalTextSelectedInFocused || terminalHasBeenCreated && terminalTextSelected && terminalTextSelectedInFocused || terminalProcessSupported && terminalTextSelected && terminalTextSelectedInFocused" },
    { "key": "f3",                    "command": "workbench.action.terminal.findNext",
                                         "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocusInAny && terminalHasBeenCreated || terminalFocusInAny && terminalProcessSupported" },
    { "key": "shift+enter",           "command": "workbench.action.terminal.findNext",
                                         "when": "terminalFindInputFocused && terminalHasBeenCreated || terminalFindInputFocused && terminalProcessSupported" },
    { "key": "shift+f3",              "command": "workbench.action.terminal.findPrevious",
                                         "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocusInAny && terminalHasBeenCreated || terminalFocusInAny && terminalProcessSupported" },
    { "key": "enter",                 "command": "workbench.action.terminal.findPrevious",
                                         "when": "terminalFindInputFocused && terminalHasBeenCreated || terminalFindInputFocused && terminalProcessSupported" },
    { "key": "ctrl+down",             "command": "workbench.action.terminal.focus",
                                         "when": "accessibilityModeEnabled && accessibleViewOnLastLine && terminalHasBeenCreated && accessibleViewCurrentProviderId == 'terminal' || accessibilityModeEnabled && accessibleViewOnLastLine && terminalProcessSupported && accessibleViewCurrentProviderId == 'terminal'" },
    { "key": "ctrl+up",               "command": "workbench.action.terminal.focusAccessibleBuffer",
                                         "when": "accessibilityModeEnabled && terminalFocus && terminalHasBeenCreated || accessibilityModeEnabled && terminalFocus && terminalProcessSupported" },
    { "key": "alt+f2",                "command": "workbench.action.terminal.focusAccessibleBuffer",
                                         "when": "accessibilityModeEnabled && terminalFocus && terminalHasBeenCreated || accessibilityModeEnabled && terminalFocus && terminalProcessSupported" },
    { "key": "ctrl+f",                "command": "workbench.action.terminal.focusFind",
                                         "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocusInAny && terminalHasBeenCreated || terminalFocusInAny && terminalProcessSupported" },
    { "key": "ctrl+m ctrl+i",         "command": "workbench.action.terminal.focusHover",
                                         "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalIsOpen || terminalFocus && terminalProcessSupported || terminalHasBeenCreated && terminalTabsFocus || terminalIsOpen && terminalTabsFocus || terminalProcessSupported && terminalTabsFocus" },
    { "key": "ctrl+pagedown",         "command": "workbench.action.terminal.focusNext",
                                         "when": "terminalFocus && terminalHasBeenCreated && !terminalEditorFocus || terminalFocus && terminalProcessSupported && !terminalEditorFocus" },
    { "key": "alt+down",              "command": "workbench.action.terminal.focusNextPane",
                                         "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported" },
    { "key": "alt+right",             "command": "workbench.action.terminal.focusNextPane",
                                         "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported" },
    { "key": "ctrl+pageup",           "command": "workbench.action.terminal.focusPrevious",
                                         "when": "terminalFocus && terminalHasBeenCreated && !terminalEditorFocus || terminalFocus && terminalProcessSupported && !terminalEditorFocus" },
    { "key": "alt+up",                "command": "workbench.action.terminal.focusPreviousPane",
                                         "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported" },
    { "key": "alt+left",              "command": "workbench.action.terminal.focusPreviousPane",
                                         "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported" },
    { "key": "ctrl+shift+\\",         "command": "workbench.action.terminal.focusTabs",
                                         "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported || terminalHasBeenCreated && terminalTabsFocus || terminalProcessSupported && terminalTabsFocus" },
    { "key": "ctrl+g",                "command": "workbench.action.terminal.goToRecentDirectory",
                                         "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported" },
    { "key": "shift+escape",          "command": "workbench.action.terminal.hideFind",
                                         "when": "terminalFindVisible && terminalFocusInAny && terminalHasBeenCreated || terminalFindVisible && terminalFocusInAny && terminalProcessSupported" },
    { "key": "escape",                "command": "workbench.action.terminal.hideFind",
                                         "when": "terminalFindVisible && terminalFocusInAny && terminalHasBeenCreated || terminalFindVisible && terminalFocusInAny && terminalProcessSupported" },
    { "key": "delete",                "command": "workbench.action.terminal.killActiveTab",
                                         "when": "terminalHasBeenCreated && terminalTabsFocus || terminalIsOpen && terminalTabsFocus || terminalProcessSupported && terminalTabsFocus" },
    { "key": "ctrl+w",                "command": "workbench.action.terminal.killEditor",
                                         "when": "terminalEditorFocus && terminalFocus && terminalHasBeenCreated || terminalEditorFocus && terminalFocus && terminalProcessSupported" },
    { "key": "ctrl+f4",               "command": "workbench.action.terminal.killEditor",
                                         "when": "terminalEditorFocus && terminalFocus && terminalHasBeenCreated || terminalEditorFocus && terminalFocus && terminalProcessSupported" },
    { "key": "ctrl+shift+`",          "command": "workbench.action.terminal.new",
                                         "when": "terminalProcessSupported || terminalWebExtensionContributedProfile" },
    { "key": "ctrl+shift+c",          "command": "workbench.action.terminal.openNativeConsole",
                                         "when": "!terminalFocus" },
    { "key": "ctrl+shift+v",          "command": "workbench.action.terminal.paste",
                                         "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported" },
    { "key": "ctrl+v",                "command": "workbench.action.terminal.paste",
                                         "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported" },
    { "key": "f2",                    "command": "workbench.action.terminal.renameActiveTab",
                                         "when": "terminalHasBeenCreated && terminalTabsFocus && terminalTabsSingularSelection || terminalProcessSupported && terminalTabsFocus && terminalTabsSingularSelection" },
    { "key": "ctrl+r",                "command": "workbench.action.terminal.runRecentCommand",
                                         "when": "accessibilityModeEnabled && terminalFocus && terminalHasBeenCreated || accessibilityModeEnabled && terminalFocus && terminalProcessSupported || accessibilityModeEnabled && accessibleViewIsShown && terminalHasBeenCreated && accessibleViewCurrentProviderId == 'terminal' || accessibilityModeEnabled && accessibleViewIsShown && terminalProcessSupported && accessibleViewCurrentProviderId == 'terminal'" },
    { "key": "ctrl+alt+r",            "command": "workbench.action.terminal.runRecentCommand",
                                         "when": "terminalFocus && terminalHasBeenCreated && !accessibilityModeEnabled || terminalFocus && terminalProcessSupported && !accessibilityModeEnabled" },
    { "key": "ctrl+alt+pagedown",     "command": "workbench.action.terminal.scrollDown",
                                         "when": "terminalFocusInAny && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocusInAny && terminalProcessSupported && !terminalAltBufferActive" },
    { "key": "shift+pagedown",        "command": "workbench.action.terminal.scrollDownPage",
                                         "when": "terminalFocusInAny && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocusInAny && terminalProcessSupported && !terminalAltBufferActive" },
    { "key": "ctrl+end",              "command": "workbench.action.terminal.scrollToBottom",
                                         "when": "terminalFocusInAny && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocusInAny && terminalProcessSupported && !terminalAltBufferActive" },
    { "key": "ctrl+end",              "command": "workbench.action.terminal.scrollToBottomAccessibleView",
                                         "when": "accessibleViewIsShown && terminalHasBeenCreated && accessibleViewCurrentProviderId == 'terminal' || accessibleViewIsShown && terminalProcessSupported && accessibleViewCurrentProviderId == 'terminal'" },
    { "key": "ctrl+down",             "command": "workbench.action.terminal.scrollToNextCommand",
                                         "when": "terminalFocus && terminalHasBeenCreated && !accessibilityModeEnabled || terminalFocus && terminalProcessSupported && !accessibilityModeEnabled" },
    { "key": "ctrl+up",               "command": "workbench.action.terminal.scrollToPreviousCommand",
                                         "when": "terminalFocus && terminalHasBeenCreated && !accessibilityModeEnabled || terminalFocus && terminalProcessSupported && !accessibilityModeEnabled" },
    { "key": "ctrl+home",             "command": "workbench.action.terminal.scrollToTop",
                                         "when": "terminalFocusInAny && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocusInAny && terminalProcessSupported && !terminalAltBufferActive" },
    { "key": "ctrl+home",             "command": "workbench.action.terminal.scrollToTopAccessibleView",
                                         "when": "accessibleViewIsShown && terminalHasBeenCreated && accessibleViewCurrentProviderId == 'terminal' || accessibleViewIsShown && terminalProcessSupported && accessibleViewCurrentProviderId == 'terminal'" },
    { "key": "ctrl+alt+pageup",       "command": "workbench.action.terminal.scrollUp",
                                         "when": "terminalFocusInAny && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocusInAny && terminalProcessSupported && !terminalAltBufferActive" },
    { "key": "shift+pageup",          "command": "workbench.action.terminal.scrollUpPage",
                                         "when": "terminalFocusInAny && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocusInAny && terminalProcessSupported && !terminalAltBufferActive" },
    { "key": "ctrl+shift+down",       "command": "workbench.action.terminal.selectToNextCommand",
                                         "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported" },
    { "key": "ctrl+shift+up",         "command": "workbench.action.terminal.selectToPreviousCommand",
                                         "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported" },
    { "key": "ctrl+v",                "command": "workbench.action.terminal.sendSequence",
                                         "when": "terminalFocus && !accessibilityModeEnabled && terminalShellType == 'pwsh'",
                                         "args": {"text":"\u0016"} },
    { "key": "ctrl+space",            "command": "workbench.action.terminal.sendSequence",
                                         "when": "terminalFocus && terminalShellIntegrationEnabled && !accessibilityModeEnabled && terminalShellType == 'pwsh'",
                                         "args": {"text":"\u001b[24~a"} },
    { "key": "alt+space",             "command": "workbench.action.terminal.sendSequence",
                                         "when": "terminalFocus && terminalShellIntegrationEnabled && !accessibilityModeEnabled && terminalShellType == 'pwsh'",
                                         "args": {"text":"\u001b[24~b"} },
    { "key": "shift+enter",           "command": "workbench.action.terminal.sendSequence",
                                         "when": "terminalFocus && terminalShellIntegrationEnabled && !accessibilityModeEnabled && terminalShellType == 'pwsh'",
                                         "args": {"text":"\u001b[24~c"} },
    { "key": "ctrl+space",            "command": "workbench.action.terminal.sendSequence",
                                         "when": "config.terminal.integrated.suggest.enabled && terminalFocus && terminalShellIntegrationEnabled && !accessibilityModeEnabled && terminalShellType == 'pwsh'",
                                         "args": {"text":"\u001b[24~e"} },
    { "key": "ctrl+alt+r",            "command": "workbench.action.terminal.sendSequence",
                                         "when": "accessibilityModeEnabled && terminalFocus",
                                         "args": {"text":"\u0012"} },
    { "key": "ctrl+alt+g",            "command": "workbench.action.terminal.sendSequence",
                                         "when": "terminalFocus",
                                         "args": {"text":"\u0007"} },
    { "key": "ctrl+backspace",        "command": "workbench.action.terminal.sendSequence",
                                         "when": "terminalFocus",
                                         "args": {"text":"\u0017"} },
    { "key": "ctrl+backspace",        "command": "workbench.action.terminal.sendSequence",
                                         "when": "terminalFocus && terminalShellType == 'cmd'",
                                         "args": {"text":"\b"} },
    { "key": "ctrl+delete",           "command": "workbench.action.terminal.sendSequence",
                                         "when": "terminalFocus",
                                         "args": {"text":"\u001bd"} },
    { "key": "ctrl+shift+2",          "command": "workbench.action.terminal.sendSequence",
                                         "when": "terminalFocus",
                                         "args": {"text":"\u0000"} },
    { "key": "ctrl+shift+6",          "command": "workbench.action.terminal.sendSequence",
                                         "when": "terminalFocus",
                                         "args": {"text":"\u001e"} },
    { "key": "ctrl+/",                "command": "workbench.action.terminal.sendSequence",
                                         "when": "terminalFocus",
                                         "args": {"text":"\u001f"} },
    { "key": "ctrl+.",                "command": "workbench.action.terminal.showQuickFixes",
                                         "when": "terminalFocus" },
    { "key": "alt+z",                 "command": "workbench.action.terminal.sizeToContentWidth",
                                         "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen || terminalFocus && terminalIsOpen && terminalProcessSupported" },
    { "key": "ctrl+shift+5",          "command": "workbench.action.terminal.split",
                                         "when": "terminalFocus && terminalProcessSupported || terminalFocus && terminalWebExtensionContributedProfile" },
    { "key": "ctrl+shift+5",          "command": "workbench.action.terminal.splitActiveTab",
                                         "when": "terminalProcessSupported && terminalTabsFocus" },
    { "key": "alt+c",                 "command": "workbench.action.terminal.toggleFindCaseSensitive",
                                         "when": "terminalFindVisible && terminalHasBeenCreated || terminalFindVisible && terminalProcessSupported" },
    { "key": "alt+r",                 "command": "workbench.action.terminal.toggleFindRegex",
                                         "when": "terminalFindVisible && terminalHasBeenCreated || terminalFindVisible && terminalProcessSupported" },
    { "key": "alt+w",                 "command": "workbench.action.terminal.toggleFindWholeWord",
                                         "when": "terminalFindVisible && terminalHasBeenCreated || terminalFindVisible && terminalProcessSupported" },
    { "key": "ctrl+`",                "command": "workbench.action.terminal.toggleTerminal",
                                         "when": "terminal.active" },
    { "key": "ctrl+alt+b",            "command": "workbench.action.toggleAuxiliaryBar" },
    { "key": "shift+alt+0",           "command": "workbench.action.toggleEditorGroupLayout" },
    { "key": "f11",                   "command": "workbench.action.toggleFullScreen",
                                         "when": "!isIOS" },
    { "key": "ctrl+m ctrl+m",         "command": "workbench.action.toggleMaximizeEditorGroup",
                                         "when": "editorPartMaximizedEditorGroup || editorPartMultipleEditorGroups" },
    { "key": "ctrl+j",                "command": "workbench.action.togglePanel" },
    { "key": "ctrl+b",                "command": "workbench.action.toggleSidebarVisibility" },
    { "key": "ctrl+m z",              "command": "workbench.action.toggleZenMode",
                                         "when": "!isAuxiliaryWindowFocusedContext" },
    { "key": "ctrl+m shift+enter",    "command": "workbench.action.unpinEditor",
                                         "when": "activeEditorIsPinned" },
    { "key": "ctrl+numpad_add",       "command": "workbench.action.zoomIn" },
    { "key": "ctrl+shift+=",          "command": "workbench.action.zoomIn" },
    { "key": "ctrl+=",                "command": "workbench.action.zoomIn" },
    { "key": "ctrl+numpad_subtract",  "command": "workbench.action.zoomOut" },
    { "key": "ctrl+shift+-",          "command": "workbench.action.zoomOut" },
    { "key": "ctrl+-",                "command": "workbench.action.zoomOut" },
    { "key": "ctrl+numpad0",          "command": "workbench.action.zoomReset" },
    { "key": "ctrl+shift+m",          "command": "workbench.actions.view.problems",
                                         "when": "workbench.panel.markers.view.active" },
    { "key": "escape",                "command": "workbench.banner.focusBanner",
                                         "when": "bannerFocused" },
    { "key": "down",                  "command": "workbench.banner.focusNextAction",
                                         "when": "bannerFocused" },
    { "key": "right",                 "command": "workbench.banner.focusNextAction",
                                         "when": "bannerFocused" },
    { "key": "up",                    "command": "workbench.banner.focusPreviousAction",
                                         "when": "bannerFocused" },
    { "key": "left",                  "command": "workbench.banner.focusPreviousAction",
                                         "when": "bannerFocused" },
    { "key": "ctrl+shift+alt+y",      "command": "workbench.debug.action.toggleRepl",
                                         "when": "workbench.panel.repl.view.active" },
    { "key": "ctrl+m c",              "command": "workbench.files.action.compareWithClipboard" },
    { "key": "ctrl+m d",              "command": "workbench.files.action.compareWithSaved" },
    { "key": "ctrl+m e",              "command": "workbench.files.action.focusOpenEditorsView",
                                         "when": "workbench.explorer.openEditorsView.active" },
    { "key": "escape",                "command": "workbench.statusBar.clearFocus",
                                         "when": "statusBarFocused" },
    { "key": "home",                  "command": "workbench.statusBar.focusFirst",
                                         "when": "statusBarFocused" },
    { "key": "end",                   "command": "workbench.statusBar.focusLast",
                                         "when": "statusBarFocused" },
    { "key": "down",                  "command": "workbench.statusBar.focusNext",
                                         "when": "statusBarFocused" },
    { "key": "right",                 "command": "workbench.statusBar.focusNext",
                                         "when": "statusBarFocused" },
    { "key": "up",                    "command": "workbench.statusBar.focusPrevious",
                                         "when": "statusBarFocused" },
    { "key": "left",                  "command": "workbench.statusBar.focusPrevious",
                                         "when": "statusBarFocused" },
    { "key": "ctrl+shift+d",          "command": "workbench.view.debug",
                                         "when": "viewContainer.workbench.view.debug.enabled" },
    { "key": "ctrl+shift+e",          "command": "workbench.view.explorer",
                                         "when": "viewContainer.workbench.view.explorer.enabled" },
    { "key": "ctrl+shift+x",          "command": "workbench.view.extensions",
                                         "when": "viewContainer.workbench.view.extensions.enabled" },
    { "key": "ctrl+shift+g",          "command": "workbench.view.scm",
                                         "when": "workbench.scm.active" },
    { "key": "ctrl+shift+f",          "command": "workbench.view.search",
                                         "when": "workbench.view.search.active && neverMatch =~ /doesNotMatch/" },
    { "key": "ctrl+right",            "command": "breadcrumbs.focusNextWithPicker",
                                         "when": "breadcrumbsActive && breadcrumbsVisible && listFocus && !inputFocus && !treestickyScrollFocused" },
    { "key": "ctrl+left",             "command": "breadcrumbs.focusPreviousWithPicker",
                                         "when": "breadcrumbsActive && breadcrumbsVisible && listFocus && !inputFocus && !treestickyScrollFocused" },
    { "key": "escape",                "command": "breadcrumbs.selectEditor",
                                         "when": "breadcrumbsActive && breadcrumbsVisible" },
    { "key": "down",                  "command": "notebook.cell.nullAction",
                                         "when": "notebookOutputInputFocused" },
    { "key": "up",                    "command": "notebook.cell.nullAction",
                                         "when": "notebookOutputInputFocused" },
    { "key": "ctrl+a",                "command": "notebook.cell.output.selectAll",
                                         "when": "notebookEditorFocused && notebookOutputFocused" },
    { "key": "ctrl+pagedown",         "command": "notebook.focusNextEditor",
                                         "when": "accessibilityModeEnabled && notebookCellEditorFocused" },
    { "key": "ctrl+pageup",           "command": "notebook.focusPreviousEditor",
                                         "when": "accessibilityModeEnabled && notebookCellEditorFocused" },
    { "key": "ctrl+m down",           "command": "views.moveViewDown",
                                         "when": "focusedView != ''" },
    { "key": "ctrl+m left",           "command": "views.moveViewLeft",
                                         "when": "focusedView != ''" },
    { "key": "ctrl+m right",          "command": "views.moveViewRight",
                                         "when": "focusedView != ''" },
    { "key": "ctrl+m up",             "command": "views.moveViewUp",
                                         "when": "focusedView != ''" },
    { "key": "ctrl+pagedown",         "command": "workbench.action.debug.nextConsole",
                                         "when": "inDebugRepl" },
    { "key": "ctrl+pageup",           "command": "workbench.action.debug.prevConsole",
                                         "when": "inDebugRepl" },
    { "key": "tab",                   "command": "workbench.action.terminal.acceptSelectedSuggestion",
                                         "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible" },
    { "key": "enter",                 "command": "workbench.action.terminal.acceptSelectedSuggestion",
                                         "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible" },
    { "key": "escape",                "command": "workbench.action.terminal.hideSuggestWidget",
                                         "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible" },
    { "key": "ctrl+shift+o",          "command": "workbench.action.terminal.openDetectedLink",
                                         "when": "terminalFocus && terminalHasBeenCreated" },
    { "key": "ctrl+shift+g",          "command": "workbench.action.terminal.openDetectedLink",
                                         "when": "accessibleViewIsShown && terminalHasBeenCreated && accessibleViewCurrentProviderId == 'terminal'" },
    { "key": "pagedown",              "command": "workbench.action.terminal.selectNextPageSuggestion",
                                         "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible" },
    { "key": "down",                  "command": "workbench.action.terminal.selectNextSuggestion",
                                         "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible" },
    { "key": "pageup",                "command": "workbench.action.terminal.selectPrevPageSuggestion",
                                         "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible" },
    { "key": "up",                    "command": "workbench.action.terminal.selectPrevSuggestion",
                                         "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible" },
    { "key": "f6",                    "command": "workbench.action.debug.pause",
                                         "when": "debugState == 'running'" },
    { "key": "alt+down",              "command": "workbench.action.terminal.accessibleBufferGoToNextCommand",
                                         "when": "accessibleViewIsShown && accessibleViewCurrentProviderId == 'terminal' || accessibleViewIsShown && terminalHasBeenCreated && accessibleViewCurrentProviderId == 'terminal' || accessibleViewIsShown && terminalProcessSupported && accessibleViewCurrentProviderId == 'terminal'" },
    { "key": "alt+up",                "command": "workbench.action.terminal.accessibleBufferGoToPreviousCommand",
                                         "when": "accessibleViewIsShown && terminalHasBeenCreated && accessibleViewCurrentProviderId == 'terminal' || accessibleViewIsShown && terminalProcessSupported && accessibleViewCurrentProviderId == 'terminal'" },
    { "key": "f2",                    "command": "debug.renameWatchExpression",
                                         "when": "watchExpressionsFocused" },
    { "key": "f2",                    "command": "debug.setVariable",
                                         "when": "variablesFocused" },
    { "key": "space",                 "command": "debug.toggleBreakpoint",
                                         "when": "breakpointsFocused && !inputFocus" },
    { "key": "escape",                "command": "notebook.cell.quitEdit",
                                         "when": "notebookEditorFocused && notebookOutputFocused" },
    { "key": "ctrl+v",                "command": "filesExplorer.paste",
                                         "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceReadonly && !inputFocus" },
    { "key": "shift+delete",          "command": "deleteFile",
                                         "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceReadonly && !inputFocus" },
    { "key": "delete",                "command": "deleteFile",
                                         "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceMoveableToTrash && !explorerResourceReadonly && !inputFocus" },
    { "key": "ctrl+shift+.",          "command": "editor.action.accessibleViewGoToSymbol",
                                         "when": "accessibilityHelpIsShown && accessibleViewGoToSymbolSupported || accessibleViewGoToSymbolSupported && accessibleViewIsShown" },
    { "key": "ctrl+shift+o",          "command": "editor.action.accessibleViewGoToSymbol",
                                         "when": "accessibilityHelpIsShown && accessibleViewGoToSymbolSupported || accessibleViewGoToSymbolSupported && accessibleViewIsShown" },
    { "key": "ctrl+e",                "command": "editor.action.toggleScreenReaderAccessibilityMode",
                                         "when": "accessibilityHelpIsShown" },
    { "key": "shift+alt+f1",          "command": "editor.action.toggleScreenReaderAccessibilityMode" },
    { "key": "escape",                "command": "editor.closeCallHierarchy",
                                         "when": "callHierarchyVisible && !config.editor.stablePeek" },
    { "key": "escape",                "command": "editor.closeTypeHierarchy",
                                         "when": "typeHierarchyVisible && !config.editor.stablePeek" },
    { "key": "enter",                 "command": "explorer.openAndPassFocus",
                                         "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsFolder && !inputFocus" },
    { "key": "escape",                "command": "filesExplorer.cancelCut",
                                         "when": "explorerResourceCut && filesExplorerFocus && foldersViewVisible && !inputFocus" },
    { "key": "ctrl+c",                "command": "filesExplorer.copy",
                                         "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !inputFocus" },
    { "key": "ctrl+x",                "command": "filesExplorer.cut",
                                         "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus" },
    { "key": "space",                 "command": "filesExplorer.openFilePreserveFocus",
                                         "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsFolder && !inputFocus" },
    { "key": "home",                  "command": "firstCompressedFolder",
                                         "when": "explorerViewletCompressedFocus && filesExplorerFocus && foldersViewVisible && !explorerViewletCompressedFirstFocus && !inputFocus" },
    { "key": "ctrl+enter",            "command": "inlineChat.acceptChanges",
                                         "when": "inlineChatHasProvider && inlineChatVisible && !inlineChatDocumentChanged || inlineChatHasProvider && inlineChatVisible && config.inlineChat.mode != 'preview'" },
    { "key": "end",                   "command": "lastCompressedFolder",
                                         "when": "explorerViewletCompressedFocus && filesExplorerFocus && foldersViewVisible && !explorerViewletCompressedLastFocus && !inputFocus" },
    { "key": "delete",                "command": "moveFileToTrash",
                                         "when": "explorerResourceMoveableToTrash && filesExplorerFocus && foldersViewVisible && !explorerResourceReadonly && !inputFocus" },
    { "key": "right",                 "command": "nextCompressedFolder",
                                         "when": "explorerViewletCompressedFocus && filesExplorerFocus && foldersViewVisible && !explorerViewletCompressedLastFocus && !inputFocus" },
    { "key": "left",                  "command": "previousCompressedFolder",
                                         "when": "explorerViewletCompressedFocus && filesExplorerFocus && foldersViewVisible && !explorerViewletCompressedFirstFocus && !inputFocus" },
    { "key": "delete",                "command": "remote.tunnel.closeInline",
                                         "when": "tunnelCloseable && tunnelViewFocus" },
    { "key": "ctrl+c",                "command": "remote.tunnel.copyAddressInline",
                                         "when": "tunnelViewFocus && tunnelType == 'Detected' && tunnelViewMultiSelection == 'undefined' || tunnelViewFocus && tunnelType == 'Forwarded' && tunnelViewMultiSelection == 'undefined'" },
    { "key": "f2",                    "command": "remote.tunnel.label",
                                         "when": "tunnelViewFocus && tunnelType == 'Forwarded' && tunnelViewMultiSelection == 'undefined'" },
    { "key": "f2",                    "command": "renameFile",
                                         "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus" },
    { "key": "f5",                    "command": "workbench.action.debug.continue",
                                         "when": "debugState == 'stopped'" },
    { "key": "f11",                   "command": "workbench.action.debug.stepInto",
                                         "when": "debugState != 'inactive'" },
    { "key": "shift+escape",          "command": "closeReferenceSearch",
                                         "when": "editorTextFocus && referenceSearchVisible && !config.editor.stablePeek || referenceSearchVisible && !config.editor.stablePeek && !inputFocus" },
    { "key": "escape",                "command": "closeReferenceSearch",
                                         "when": "editorTextFocus && referenceSearchVisible && !config.editor.stablePeek || referenceSearchVisible && !config.editor.stablePeek && !inputFocus" },
    { "key": "left",                  "command": "list.stickyScroll.collapse",
                                         "when": "treestickyScrollFocused" },
    { "key": "enter",                 "command": "list.stickyScrollselect",
                                         "when": "treestickyScrollFocused" },
    { "key": "space",                 "command": "list.stickyScrolltoggleExpand",
                                         "when": "treestickyScrollFocused" },
    { "key": "escape",                "command": "notifications.hideList",
                                         "when": "notificationCenterVisible" },
    { "key": "ctrl+alt+right",        "command": "quickInput.acceptInBackground",
                                         "when": "cursorAtEndOfQuickInputBox && inQuickInput && quickInputType == 'quickPick' || inQuickInput && !inputFocus && quickInputType == 'quickPick'" },
    { "key": "ctrl+right",            "command": "quickInput.acceptInBackground",
                                         "when": "cursorAtEndOfQuickInputBox && inQuickInput && quickInputType == 'quickPick' || inQuickInput && !inputFocus && quickInputType == 'quickPick'" },
    { "key": "alt+right",             "command": "quickInput.acceptInBackground",
                                         "when": "cursorAtEndOfQuickInputBox && inQuickInput && quickInputType == 'quickPick' || inQuickInput && !inputFocus && quickInputType == 'quickPick'" },
    { "key": "right",                 "command": "quickInput.acceptInBackground",
                                         "when": "cursorAtEndOfQuickInputBox && inQuickInput && quickInputType == 'quickPick' || inQuickInput && !inputFocus && quickInputType == 'quickPick'" },
    { "key": "alt+left",              "command": "workbench.action.quickInputBack",
                                         "when": "inQuickOpen" },
    { "key": "ctrl+tab",              "command": "workbench.action.quickOpenNavigateNextInEditorPicker",
                                         "when": "inEditorsPicker && inQuickOpen" },
    { "key": "ctrl+e",                "command": "workbench.action.quickOpenNavigateNextInFilePicker",
                                         "when": "inFilesPicker && inQuickOpen" },
    { "key": "ctrl+p",                "command": "workbench.action.quickOpenNavigateNextInFilePicker",
                                         "when": "inFilesPicker && inQuickOpen" },
    { "key": "ctrl+r",                "command": "workbench.action.quickOpenNavigateNextInRecentFilesPicker",
                                         "when": "inQuickOpen && inRecentFilesPicker" },
    { "key": "ctrl+q",                "command": "workbench.action.quickOpenNavigateNextInViewPicker",
                                         "when": "inQuickOpen && inViewsPicker" },
    { "key": "ctrl+shift+tab",        "command": "workbench.action.quickOpenNavigatePreviousInEditorPicker",
                                         "when": "inEditorsPicker && inQuickOpen" },
    { "key": "ctrl+shift+e",          "command": "workbench.action.quickOpenNavigatePreviousInFilePicker",
                                         "when": "inFilesPicker && inQuickOpen" },
    { "key": "ctrl+shift+p",          "command": "workbench.action.quickOpenNavigatePreviousInFilePicker",
                                         "when": "inFilesPicker && inQuickOpen" },
    { "key": "ctrl+shift+r",          "command": "workbench.action.quickOpenNavigatePreviousInRecentFilesPicker",
                                         "when": "inQuickOpen && inRecentFilesPicker" },
    { "key": "ctrl+shift+q",          "command": "workbench.action.quickOpenNavigatePreviousInViewPicker",
                                         "when": "inQuickOpen && inViewsPicker" },
    { "key": "ctrl+shift+r",          "command": "workbench.action.reloadWindow",
                                         "when": "isDevelopment" },
    { "key": "ctrl+shift+f",          "command": "workbench.action.terminal.searchWorkspace",
                                         "when": "terminalFocus && terminalProcessSupported && terminalTextSelected" },
    { "key": "ctrl+shift+i",          "command": "workbench.action.toggleDevTools",
                                         "when": "isDevelopment" },
    { "key": "escape",                "command": "notifications.hideToasts",
                                         "when": "notificationFocus && notificationToastsVisible" },
    { "key": "escape",                "command": "workbench.action.chat.stopListening",
                                         "when": "voiceChatInProgress && scopedVoiceChatInProgress == 'editor' || voiceChatInProgress && scopedVoiceChatInProgress == 'inline' || voiceChatInProgress && scopedVoiceChatInProgress == 'quick' || voiceChatInProgress && scopedVoiceChatInProgress == 'terminal' || voiceChatInProgress && scopedVoiceChatInProgress == 'view'" },
    { "key": "escape",                "command": "workbench.action.chat.stopReadChatItemAloud",
                                         "when": "scopedChatSynthesisInProgress" },
    { "key": "escape",                "command": "workbench.action.editorDictation.stop",
                                         "when": "editorDictation.inProgress" },
    { "key": "escape",                "command": "workbench.action.speech.stopReadAloud",
                                         "when": "scopedChatSynthesisInProgress && textToSpeechInProgress" },
    { "key": "f10",                   "command": "extension.node-debug.startWithStopOnEntry",
                                         "when": "!inDebugMode && debugConfigurationType == 'node' || !inDebugMode && debugConfigurationType == 'pwa-extensionHost' || !inDebugMode && debugConfigurationType == 'pwa-node'" },
    { "key": "ctrl+k ctrl+alt+s",     "command": "git.stageSelectedRanges",
                                         "when": "isInDiffEditor && !operationInProgress" },
    { "key": "ctrl+shift+v",          "command": "markdown.showPreview",
                                         "when": "!notebookEditorFocused && editorLangId == 'markdown'" },
    { "key": "f",                     "command": "notebook.find",
                                         "when": "notebookEditorFocused && !inputFocus && !notebookOutputInputFocused" },
    { "key": "shift+alt+f12",         "command": "references-view.findReferences",
                                         "when": "editorHasReferenceProvider" },
    { "key": "f11",                   "command": "extension.node-debug.startWithStopOnEntry",
                                         "when": "!inDebugMode && activeViewlet == 'workbench.view.debug' && debugConfigurationType == 'node' || !inDebugMode && activeViewlet == 'workbench.view.debug' && debugConfigurationType == 'pwa-extensionHost' || !inDebugMode && activeViewlet == 'workbench.view.debug' && debugConfigurationType == 'pwa-node'" },
    { "key": "ctrl+k ctrl+n",         "command": "git.unstageSelectedRanges",
                                         "when": "isInDiffEditor && !operationInProgress" },
    { "key": "k",                     "command": "list.focusUp",
                                         "when": "notebookEditorFocused && !inputFocus && !notebookOutputInputFocused" },
    { "key": "ctrl+k v",              "command": "markdown.showPreviewToSide",
                                         "when": "!notebookEditorFocused && editorLangId == 'markdown'" },
    { "key": "f4",                    "command": "references-view.next",
                                         "when": "reference-list.hasResult && references-view.canNavigate" },
    { "key": "ctrl+k ctrl+r",         "command": "git.revertSelectedRanges",
                                         "when": "isInDiffEditor && !operationInProgress" },
    { "key": "j",                     "command": "list.focusDown",
                                         "when": "notebookEditorFocused && !inputFocus && !notebookOutputInputFocused" },
    { "key": "shift+f4",              "command": "references-view.prev",
                                         "when": "reference-list.hasResult && references-view.canNavigate" },
    { "key": "a",                     "command": "notebook.cell.insertCodeCellAboveAndFocusContainer",
                                         "when": "notebookEditorFocused && !inputFocus && !notebookOutputInputFocused" },
    { "key": "shift+alt+h",           "command": "references-view.showCallHierarchy",
                                         "when": "editorHasCallHierarchyProvider" },
    { "key": "b",                     "command": "notebook.cell.insertCodeCellBelowAndFocusContainer",
                                         "when": "notebookEditorFocused && !inputFocus && !notebookOutputInputFocused" },
    { "key": "d d",                   "command": "notebook.cell.delete",
                                         "when": "notebookEditorFocused && !inputFocus && !notebookOutputInputFocused" },
    { "key": "z",                     "command": "undo",
                                         "when": "notebookEditorFocused && !inputFocus && !notebookOutputInputFocused" },
    { "key": "s",                     "command": "workbench.action.files.save",
                                         "when": "notebookEditorFocused && !inputFocus && !notebookOutputInputFocused" },
    { "key": "c",                     "command": "notebook.cell.copy",
                                         "when": "notebookEditorFocused && !inputFocus && !notebookOutputInputFocused" },
    { "key": "x",                     "command": "notebook.cell.cut",
                                         "when": "notebookEditorFocused && !inputFocus && !notebookOutputInputFocused" },
    { "key": "v",                     "command": "notebook.cell.paste",
                                         "when": "notebookEditorFocused && !inputFocus && !notebookOutputInputFocused" },
    { "key": "shift+l",               "command": "notebook.toggleLineNumbers",
                                         "when": "notebookEditorFocused && !inputFocus && !notebookOutputInputFocused" },
    { "key": "o",                     "command": "notebook.cell.toggleOutputs",
                                         "when": "notebookEditorFocused && !inputFocus && !notebookOutputInputFocused" },
    { "key": "l",                     "command": "notebook.cell.toggleLineNumbers",
                                         "when": "notebookEditorFocused && !inputFocus && !notebookOutputInputFocused" },
    { "key": "ctrl+shift+-",          "command": "notebook.cell.split",
                                         "when": "editorTextFocus && inputFocus && notebookEditorFocused && !notebookOutputInputFocused" },
    { "key": "ctrl+enter",            "command": "notebook.cell.executeAndFocusContainer",
                                         "when": "notebookCellListFocused || editorTextFocus && inputFocus && notebookEditorFocused" },
    { "key": "shift+enter",           "command": "notebook.cell.executeAndSelectBelow",
                                         "when": "notebookCellListFocused && !interactiveEditorFocused && notebookCellType == 'code' || editorTextFocus && inputFocus && notebookEditorFocused && !interactiveEditorFocused" },
    { "key": "ctrl+alt+enter",        "command": "interactive.acceptChanges",
                                         "when": "interactiveEditorHasProvider && interactiveEditorVisible && !interactiveEditorDocumentChanged || interactiveEditorHasProvider && interactiveEditorVisible && config.interactiveEditor.editMode != 'preview'" },
    { "key": "alt+o",                 "command": "C_Cpp.SwitchHeaderSource",
                                         "when": "editorTextFocus && editorLangId =~ /^(c|(cuda-)?cpp)$/ && !(config.C_Cpp.intelliSenseEngine =~ /^[dD]isabled$/)" },
    { "key": "ctrl+shift+j",          "command": "aiSettings.action.open",
                                         "when": "!isSettingsPaneOpen" },
    { "key": "ctrl+shift+0",          "command": "aiSettings.usingOpenAIKey.toggle" },
    { "key": "alt+.",                 "command": "auto-close-tag.closeTag" },
    { "key": "f7",                    "command": "cmake.build",
                                         "when": "cmake:enableFullFeatureSet && !cmake:hideBuildCommand" },
    { "key": "f4",                    "command": "dart.showTypeHierarchy",
                                         "when": "!dart-code:isLsp && editorLangId == 'dart'" },
    { "key": "ctrl+e ctrl+e",         "command": "extension.base64Encode",
                                         "when": "editorTextFocus" },
    { "key": "alt+c p",               "command": "extension.colorHelper.pick",
                                         "when": "editorTextFocus" },
    { "key": "alt+l alt+c",           "command": "extension.liveServer.goOffline",
                                         "when": "editorTextFocus" },
    { "key": "ctrl+shift+space",      "command": "issue.suggestRefresh",
                                         "when": "suggestWidgetVisible" },
    { "key": "shift+alt+u",           "command": "java.projectConfiguration.update",
                                         "when": "editorFocus" },
    { "key": "shift+alt+r",           "command": "java.view.package.revealFileInOS",
                                         "when": "focusedView == 'javaProjectExplorer' && java:serverMode == 'Standard'" },
    { "key": "shift+f1",              "command": "java.welcome" },
    { "key": "shift+enter",           "command": "jupyter.execSelectionInteractive",
                                         "when": "editorTextFocus && isWorkspaceTrusted && jupyter.ownsSelection && !findInputFocussed && !notebookEditorFocused && !replaceInputFocussed && editorLangId == 'python' && activeEditor != 'workbench.editor.interactive'" },
    { "key": "f10",                   "command": "phptools.debug.startWithStopOnEntry",
                                         "when": "debuggersAvailable && !inDebugMode && debugConfigurationType == 'php'" },
    { "key": "alt+d",                 "command": "plantuml.preview" },
    { "key": "shift+enter",           "command": "python.execSelectionInTerminal",
                                         "when": "editorTextFocus && !findInputFocussed && !jupyter.ownsSelection && !notebookEditorFocused && !replaceInputFocussed && editorLangId == 'python' && activeEditor != 'workbench.editor.interactive'" },
    { "key": "ctrl+alt+r",            "command": "reactSnippets.search",
                                         "when": "editorTextFocus" },
    { "key": "ctrl+alt+r",            "command": "rest-client.request",
                                         "when": "editorTextFocus && editorLangId == 'http'" },
    { "key": "f5",                    "command": "solidity.compile.active",
                                         "when": "editorTextFocus && editorLangId == 'solidity'" },
    { "key": "ctrl+c",                "command": "sqltools.copyTextFromTreeItem",
                                         "when": "sideBarFocus && focusedView == 'sqltools-view-connectionExplorer'" },
    { "key": "ctrl+enter",            "command": "workbench.action.chat.insertCodeBlock",
                                         "when": "accessibleViewInCodeBlock && chatIsEnabled || chatIsEnabled && inChat && !inChatInput" },
    { "key": "ctrl+alt+l",            "command": "workbench.action.decreaseViewSize",
                                         "when": "!isAuxiliaryWindowFocusedContext" },
    { "key": "ctrl+i",                "command": "workbench.action.terminal.chat.start",
                                         "when": "terminalChatAgentRegistered && terminalFocusInAny && terminalHasBeenCreated || terminalChatAgentRegistered && terminalFocusInAny && terminalProcessSupported" },
    { "key": "ctrl+shift+r",          "command": "workbench.view.extension.thunder-client",
                                         "when": "viewContainer.workbench.view.extension.thunder-client.enabled" },
    { "key": "shift+f7",              "command": "cmake.buildWithTarget",
                                         "when": "cmake:enableFullFeatureSet && !cmake:hideBuildCommand" },
    { "key": "ctrl+f5",               "command": "dart.hotReload",
                                         "when": "dart-code:isInDartDebugSession && inDebugMode && debugType == 'dart' || dart-code:service.reloadSources && inDebugMode && debugType == 'dart'" },
    { "key": "ctrl+shift+r ctrl+i",   "command": "editor.action.codeAction",
                                         "when": "editorTextFocus && editorLangId =~ /^(c|(cuda-)?cpp)$/ && !(config.C_Cpp.intelliSenseEngine =~ /^[dD]isabled$/)",
                                         "args": {"kind":"refactor.inline.macro","apply":"first"} },
    { "key": "ctrl+e ctrl+d",         "command": "extension.base64Decode",
                                         "when": "editorTextFocus" },
    { "key": "alt+c c",               "command": "extension.colorHelper.convert",
                                         "when": "editorTextFocus" },
    { "key": "alt+l alt+o",           "command": "extension.liveServer.goOnline",
                                         "when": "editorTextFocus" },
    { "key": "ctrl+s",                "command": "issue.createIssueFromFile",
                                         "when": "!issues.creatingFromFile && resourceScheme == 'newIssue' && config.files.autoSave != 'off'" },
    { "key": "shift+alt+c",           "command": "java.view.package.copyFilePath",
                                         "when": "focusedView == 'javaProjectExplorer' && java:serverMode == 'Standard'" },
    { "key": "shift+alt+b",           "command": "java.workspace.compile" },
    { "key": "shift+enter",           "command": "jupyter.runcurrentcelladvance",
                                         "when": "editorTextFocus && isWorkspaceTrusted && jupyter.hascodecells && !editorHasSelection && !notebookEditorFocused" },
    { "key": "f11",                   "command": "phptools.debug.startWithStopOnEntry",
                                         "when": "debuggersAvailable && !inDebugMode && debugConfigurationType == 'php'" },
    { "key": "shift+enter",           "command": "python.execInREPL",
                                         "when": "config.python.REPL.sendToNativeREPL && editorTextFocus && !accessibilityModeEnabled && !jupyter.ownsSelection && !notebookEditorFocused && editorLangId == 'python' && activeEditor != 'workbench.editor.interactive'" },
    { "key": "ctrl+alt+r",            "command": "rest-client.request",
                                         "when": "editorTextFocus && editorLangId == 'plaintext'" },
    { "key": "ctrl+f5",               "command": "solidity.compile",
                                         "when": "editorTextFocus && editorLangId == 'solidity'" },
    { "key": "ctrl+u",                "command": "thunder-client.import-curl",
                                         "when": "activeWebviewPanelId == 'tc.env-view' || activeWebviewPanelId == 'tc.request-view'" },
    { "key": "ctrl+alt+f",            "command": "workbench.action.increaseViewSize",
                                         "when": "!isAuxiliaryWindowFocusedContext" },
    { "key": "ctrl+e ctrl+e",         "command": "workbench.action.quickOpen",
                                         "when": "!config.sqltools.disableChordKeybindings && !editorHasSelection && !editorTextFocus" },
    { "key": "shift+f5",              "command": "cmake.debugTarget",
                                         "when": "cmake:enableFullFeatureSet && inCMakeProject && !cmake:hideDebugCommand && !inDebugMode" },
    { "key": "ctrl+shift+f5",         "command": "dart.rerunLastDebugSession",
                                         "when": "dart-code:anyProjectLoaded && dart-code:hasLastDebugConfig && !inDebugMode" },
    { "key": "ctrl+shift+r ctrl+e",   "command": "editor.action.codeAction",
                                         "when": "editorTextFocus && editorLangId =~ /^(c|(cuda-)?cpp)$/ && !(config.C_Cpp.intelliSenseEngine =~ /^[dD]isabled$/)",
                                         "args": {"kind":"refactor.extract.function","apply":"first"} },
    { "key": "ctrl+=",                "command": "editor.action.fontZoomIn" },
    { "key": "ctrl+enter",            "command": "issue.createIssueFromFile",
                                         "when": "!issues.creatingFromFile && resourceScheme == 'newIssue'" },
    { "key": "ctrl+shift+v",          "command": "java.action.clipboardPasteAction",
                                         "when": "javaLSReady && editorLangId == 'java'" },
    { "key": "ctrl+k ctrl+shift+c",   "command": "java.view.package.copyRelativeFilePath",
                                         "when": "focusedView == 'javaProjectExplorer' && java:serverMode == 'Standard'" },
    { "key": "ctrl+enter",            "command": "jupyter.runcurrentcell",
                                         "when": "editorTextFocus && isWorkspaceTrusted && jupyter.hascodecells && !editorHasSelection && !jupyter.havenativecells && !notebookEditorFocused" },
    { "key": "enter",                 "command": "python.execInREPLEnter",
                                         "when": "!config.interactiveWindow.executeWithShiftEnter && activeEditor == 'workbench.editor.interactive'" },
    { "key": "ctrl+alt+l",            "command": "rest-client.rerun-last-request",
                                         "when": "editorTextFocus && editorLangId == 'http'" },
    { "key": "ctrl+e ctrl+b",         "command": "sqltools.formatSql",
                                         "when": "editorHasSelection && editorTextFocus && !config.sqltools.disableChordKeybindings && !editorReadonly" },
    { "key": "ctrl+e",                "command": "thunder-client.change-env",
                                         "when": "activeWebviewPanelId == 'tc.env-view' || activeWebviewPanelId == 'tc.request-view' || activeWebviewPanelId == 'tc.runcol-view'" },
    { "key": "ctrl+f5",               "command": "cmake.launchTarget",
                                         "when": "cmake:enableFullFeatureSet && !cmake:hideDebugCommand && !inDebugMode" },
    { "key": "ctrl+alt+d",            "command": "dart.openDevTools",
                                         "when": "dart-code:anyProjectLoaded" },
    { "key": "ctrl+shift+v",          "command": "java.action.filesExplorerPasteAction",
                                         "when": "config.editor.pasteAs.enabled && explorerViewletFocus" },
    { "key": "f2",                    "command": "java.view.package.renameFile",
                                         "when": "focusedView == 'javaProjectExplorer' && java:serverMode == 'Standard'" },
    { "key": "alt+enter",             "command": "jupyter.runcurrentcellandaddbelow",
                                         "when": "editorTextFocus && jupyter.hascodecells && !editorHasSelection && !notebookEditorFocused" },
    { "key": "ctrl+k m",              "command": "pr.makeSuggestion",
                                         "when": "commentEditorFocused" },
    { "key": "ctrl+r",                "command": "python.refreshTensorBoard",
                                         "when": "python.hasActiveTensorBoardSession" },
    { "key": "ctrl+alt+l",            "command": "rest-client.rerun-last-request",
                                         "when": "editorTextFocus && editorLangId == 'plaintext'" },
    { "key": "ctrl+e ctrl+e",         "command": "sqltools.executeQuery",
                                         "when": "editorHasSelection && editorTextFocus && !config.sqltools.disableChordKeybindings" },
    { "key": "ctrl+alt+=",            "command": "workbench.action.zoomIn" },
    { "key": "ctrl+-",                "command": "editor.action.fontZoomOut" },
    { "key": "escape",                "command": "interactive.input.clear",
                                         "when": "!LinkedEditingInputVisible && !accessibilityHelpWidgetVisible && !breakpointWidgetVisible && !editorHasMultipleSelections && !editorHasSelection && !editorHoverVisible && !exceptionWidgetVisible && !findWidgetVisible && !inSnippetMode && !isComposing && !markersNavigationVisible && !notificationToastsVisible && !parameterHintsVisible && !renameInputVisible && !selectionAnchorSet && !suggestWidgetVisible && activeEditor == 'workbench.editor.interactive'" },
    { "key": "ctrl+shift+alt+s",      "command": "java.action.doCleanup",
                                         "when": "javaLSReady && editorLangId == 'java'" },
    { "key": "delete",                "command": "java.view.package.moveFileToTrash",
                                         "when": "explorerResourceMoveableToTrash && focusedView == 'javaProjectExplorer' && java:serverMode == 'Standard'" },
    { "key": "ctrl+alt+l",            "command": "rest-client.rerun-last-request",
                                         "when": "httpResponsePreviewFocus" },
    { "key": "ctrl+e ctrl+d",         "command": "sqltools.describeTable",
                                         "when": "!config.sqltools.disableChordKeybindings" },
    { "key": "delete",                "command": "java.view.package.deleteFilePermanently",
                                         "when": "!explorerResourceMoveableToTrash && focusedView == 'javaProjectExplorer' && java:serverMode == 'Standard'" },
    { "key": "ctrl+; s",              "command": "jupyter.insertCellBelowPosition",
                                         "when": "editorTextFocus && isWorkspaceTrusted && jupyter.hascodecells && !jupyter.webExtension && !notebookEditorFocused" },
    { "key": "ctrl+alt+k",            "command": "rest-client.cancel-request",
                                         "when": "editorTextFocus && editorLangId == 'http'" },
    { "key": "ctrl+e ctrl+h",         "command": "sqltools.runFromHistory",
                                         "when": "!config.sqltools.disableChordKeybindings" },
    { "key": "ctrl+alt+-",            "command": "workbench.action.zoomOut" },
    { "key": "ctrl+0",                "command": "editor.action.fontZoomReset" },
    { "key": "ctrl+; b",              "command": "jupyter.insertCellBelow",
                                         "when": "editorTextFocus && jupyter.hascodecells && !jupyter.webExtension && !notebookEditorFocused" },
    { "key": "ctrl+alt+k",            "command": "rest-client.cancel-request",
                                         "when": "editorTextFocus && editorLangId == 'plaintext'" },
    { "key": "ctrl+e ctrl+a",         "command": "sqltools.runFromBookmarks",
                                         "when": "!config.sqltools.disableChordKeybindings" },
    { "key": "ctrl+; a",              "command": "jupyter.insertCellAbove",
                                         "when": "editorTextFocus && jupyter.hascodecells && !jupyter.webExtension && !notebookEditorFocused" },
    { "key": "ctrl+alt+h",            "command": "rest-client.history" },
    { "key": "ctrl+e ctrl+s",         "command": "sqltools.showRecords",
                                         "when": "!config.sqltools.disableChordKeybindings" },
    { "key": "ctrl+alt+0",            "command": "workbench.action.zoomReset" },
    { "key": "ctrl+; x",              "command": "jupyter.deleteCells",
                                         "when": "editorTextFocus && jupyter.hascodecells && !jupyter.webExtension && !notebookEditorFocused" },
    { "key": "ctrl+alt+e",            "command": "rest-client.switch-environment" },
    { "key": "ctrl+e ctrl+r",         "command": "sqltools.deleteBookmark",
                                         "when": "!config.sqltools.disableChordKeybindings" },
    { "key": "ctrl+backspace",        "command": "aichat.cancelchat",
                                         "when": "activeAIChatEditor || view == 'workbench.panel.aichat.view' && (arbitrary function)" },
    { "key": "ctrl+shift+l",          "command": "aichat.insertselectionintochat" },
    { "key": "ctrl+shift+y",          "command": "aichat.insertselectionintofollowup" },
    { "key": "ctrl+shift+y",          "command": "aichat.newfollowupaction" },
    { "key": "shift+win+tab",         "command": "aichat.selectNextTab",
                                         "when": "view == 'workbench.panel.aichat.view'" },
    { "key": "win+tab",               "command": "aichat.selectPreviousTab",
                                         "when": "view == 'workbench.panel.aichat.view'" },
    { "key": "alt+d",                 "command": "aidebug.autodebugterminal" },
    { "key": "ctrl+.",                "command": "cursor.aichat.toggleChatMode",
                                         "when": "(arbitrary function) && (arbitrary function)" },
    { "key": "ctrl+enter",            "command": "cursorai.action.executeInterpreterAction",
                                         "when": "(arbitrary function)" },
    { "key": "ctrl+u",                "command": "cursorai.action.retryInterpreterAction",
                                         "when": "activeAIChatEditor || view == 'workbench.panel.aichat.view' || (arbitrary function) && (arbitrary function)" },
    { "key": "ctrl+shift+alt+[",      "command": "jupyter.extendSelectionByCellAbove",
                                         "when": "editorTextFocus && jupyter.hascodecells && !jupyter.webExtension && !notebookEditorFocused" },
    { "key": "ctrl+alt+c",            "command": "rest-client.generate-codesnippet",
                                         "when": "editorTextFocus && editorLangId == 'http'" },
    { "key": "ctrl+e ctrl+q",         "command": "sqltools.bookmarkSelection",
                                         "when": "editorHasSelection && editorTextFocus && !config.sqltools.disableChordKeybindings" },
    { "key": "ctrl+shift+alt+]",      "command": "jupyter.extendSelectionByCellBelow",
                                         "when": "editorTextFocus && jupyter.hascodecells && !jupyter.webExtension && !notebookEditorFocused" },
    { "key": "ctrl+alt+c",            "command": "rest-client.generate-codesnippet",
                                         "when": "editorTextFocus && editorLangId == 'plaintext'" },
    { "key": "ctrl+; u",              "command": "jupyter.moveCellsUp",
                                         "when": "editorTextFocus && jupyter.hascodecells && !jupyter.webExtension && !notebookEditorFocused" },
    { "key": "ctrl+; d",              "command": "jupyter.moveCellsDown",
                                         "when": "editorTextFocus && jupyter.hascodecells && !jupyter.webExtension && !notebookEditorFocused" },
    { "key": "ctrl+; m",              "command": "jupyter.changeCellToMarkdown",
                                         "when": "editorTextFocus && jupyter.hascodecells && !jupyter.webExtension && !notebookEditorFocused" },
    { "key": "ctrl+; c",              "command": "jupyter.changeCellToCode",
                                         "when": "editorTextFocus && jupyter.hascodecells && !jupyter.webExtension && !notebookEditorFocused" },
    { "key": "ctrl+alt+]",            "command": "jupyter.gotoNextCellInFile",
                                         "when": "editorTextFocus && jupyter.hascodecells && !jupyter.webExtension && !notebookEditorFocused" },
    { "key": "ctrl+alt+[",            "command": "jupyter.gotoPrevCellInFile",
                                         "when": "editorTextFocus && jupyter.hascodecells && !jupyter.webExtension && !notebookEditorFocused" },
    { "key": "ctrl+alt+\\",           "command": "jupyter.selectCellContents",
                                         "when": "editorTextFocus && jupyter.hascodecells && !jupyter.webExtension && !notebookEditorFocused" },
    { "key": "ctrl+shift+alt+\\",     "command": "jupyter.selectCell",
                                         "when": "editorTextFocus && jupyter.hascodecells && !jupyter.webExtension && !notebookEditorFocused" },
    { "key": "ctrl+r",                "command": "jupyter.refreshDataViewer",
                                         "when": "isWorkspaceTrusted && jupyter.dataViewerActive" },
    { "key": "ctrl+shift+alt+enter",  "command": "jupyter.runAndDebugCell",
                                         "when": "isWorkspaceTrusted && jupyter.ispythonnotebook && !notebookKernel && notebookCellType == 'code' || isWorkspaceTrusted && jupyter.ispythonnotebook && notebookCellType == 'code' && notebookKernel =~ /^ms-toolsai.jupyter\\// && resource not in 'jupyter.notebookeditor.debugDocuments'" },
    { "key": "f10",                   "command": "jupyter.runByLine",
                                         "when": "isWorkspaceTrusted && jupyter.ispythonnotebook && !notebookKernel && notebookCellType == 'code' || isWorkspaceTrusted && jupyter.ispythonnotebook && notebookCellType == 'code' && notebookKernel =~ /^ms-toolsai.jupyter\\// && resource not in 'jupyter.notebookeditor.debugDocuments'" },
    { "key": "f10",                   "command": "jupyter.runByLineNext",
                                         "when": "notebookCellResource in 'jupyter.notebookeditor.runByLineCells'" },
    { "key": "ctrl+enter",            "command": "jupyter.runByLineStop",
                                         "when": "notebookCellResource in 'jupyter.notebookeditor.runByLineCells'" },
    { "key": "ctrl+l",                "command": "aichat.newchataction" },
    { "key": "ctrl+alt+l",            "command": "aichat.showchatdropdown" },
    { "key": "ctrl+enter",            "command": "editor.action.inlineDiffs.acceptAll",
                                         "when": "editorTextFocus && (arbitrary function)" },
    { "key": "ctrl+pausebreak",       "command": "editor.action.inlineDiffs.acceptAllAcrossAllEditors",
                                         "when": "editorHasPromptBar && editorTextFocus || editorTextFocus && hasDisplayedDiff" },
    { "key": "ctrl+shift+y",          "command": "editor.action.inlineDiffs.acceptPartialEdit",
                                         "when": "editorTextFocus && (arbitrary function)" },
    { "key": "ctrl+backspace",        "command": "editor.action.inlineDiffs.rejectAll",
                                         "when": "editorTextFocus && (arbitrary function)" },
    { "key": "ctrl",                  "command": "editor.action.inlineDiffs.rejectAllAcrossAllEditors",
                                         "when": "editorHasPromptBar && editorTextFocus || editorTextFocus && hasDisplayedDiff" },
    { "key": "ctrl+n",                "command": "editor.action.inlineDiffs.rejectPartialEdit",
                                         "when": "editorTextFocus && (arbitrary function)" },
    { "key": "ctrl+k",                "command": "composer.startComposerPrompt",
                                         "when": "composerIsEnabled" },
    { "key": "ctrl+i",                "command": "composer.startComposerPrompt",
                                         "when": "composerIsEnabled" },
    { "key": "ctrl+backspace",        "command": "editor.action.inlineDiffs.cancelEdits",
                                         "when": "editorTextFocus && hasActivelyGeneratingDiff" },
    { "key": "ctrl+.",                "command": "acceptSelectedCodeAction",
                                         "when": "codeActionMenuVisible" },
    { "key": "enter",                 "command": "acceptSelectedCodeAction",
                                         "when": "codeActionMenuVisible" },
    { "key": "escape",                "command": "editor.action.cancelGPT4WithCmdDelete",
                                         "when": "hadGPT4InlineCompletionRunning" },
    { "key": "ctrl+backspace",        "command": "editor.action.cancelGPT4WithCmdDelete",
                                         "when": "hadGPT4InlineCompletionRunning" },
    { "key": "ctrl+n",                "command": "editor.action.rejectGPT4",
                                         "when": "editorTextFocus && hasGPT4Diff" },
    { "key": "ctrl+g",                "command": "editor.action.simpleInlineDiffs.acceptAll",
                                         "when": "editorTextFocus && hasDisplayedSimpleDiff" },
    { "key": "ctrl+h",                "command": "editor.action.simpleInlineDiffs.rejectAll",
                                         "when": "editorTextFocus && hasDisplayedSimpleDiff" },
    { "key": "shift+escape",          "command": "hideCodeActionWidget",
                                         "when": "codeActionMenuVisible" },
    { "key": "escape",                "command": "hideCodeActionWidget",
                                         "when": "codeActionMenuVisible" },
    { "key": "ctrl+enter",            "command": "previewSelectedCodeAction",
                                         "when": "codeActionMenuVisible" },
    { "key": "ctrl+down",             "command": "selectNextCodeAction",
                                         "when": "codeActionMenuVisible" },
    { "key": "down",                  "command": "selectNextCodeAction",
                                         "when": "codeActionMenuVisible" },
    { "key": "ctrl+up",               "command": "selectPrevCodeAction",
                                         "when": "codeActionMenuVisible" },
    { "key": "up",                    "command": "selectPrevCodeAction",
                                         "when": "codeActionMenuVisible" },
    { "key": "ctrl+shift+k",          "command": "aipopup.action.modal.generate",
                                         "when": "editorFocus && !composerBarIsVisible && !composerControlPanelIsVisible",
                                         "args": {"invocationType":"toggle"} },
    { "key": "ctrl+k",                "command": "aipopup.action.modal.generate",
                                         "when": "editorFocus && !composerBarIsVisible && !composerControlPanelIsVisible",
                                         "args": {"invocationType":"new"} },
    { "key": "ctrl+shift+i",          "command": "composer.startComposerControlPanel",
                                         "when": "composerIsEnabled && isComposerControlPanelEnabled" },
    { "key": "ctrl+backspace",        "command": "editor.action.inlineDiffs.cancelPromptBar",
                                         "when": "editorTextFocus && hasActivelyGeneratingPromptBarDiff" },
    { "key": "escape",                "command": "aipopup.action.closePromptBar",
                                         "when": "editorHasPromptBar && editorPromptBarFocused && editorTextFocus" },
    { "key": "escape",                "command": "diffEditor.exitCompareMove",
                                         "when": "comparingMovedCode" },
    { "key": "ctrl+enter",            "command": "cursorai.action.acceptGenerateInTerminal",
                                         "when": "terminalFocus && terminalHasBeenCreated || terminalProcessSupported && (arbitrary function)" },
    { "key": "ctrl+backspace",        "command": "cursorai.action.cancelGenerateInTerminal",
                                         "when": "terminalFocus && terminalHasBeenCreated || terminalProcessSupported && (arbitrary function)" },
    { "key": "ctrl+k",                "command": "cursorai.action.generateInTerminal",
                                         "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported" },
    { "key": "escape",                "command": "cursorai.action.hideGenerateInTerminal",
                                         "when": "terminalFocus && terminalHasBeenCreated || terminalProcessSupported && (arbitrary function)" },
    { "key": "ctrl+enter",            "command": "cursorai.action.acceptAndRunGenerateInTerminal",
                                         "when": "terminalFocus && terminalHasBeenCreated || terminalProcessSupported && (arbitrary function)" },
    { "key": "ctrl+backspace",        "command": "cursorai.action.rejectGenerateInTerminal",
                                         "when": "terminalFocus && terminalHasBeenCreated || terminalProcessSupported && (arbitrary function)" },
    { "key": "ctrl+shift+e",          "command": "aichat.fixerrormessage",
                                         "when": "(arbitrary function)" },
    { "key": "ctrl+space",            "command": "editor.action.inlineEdits.accept",
                                         "when": "inlineEditsVisible" }
    ]
    
    
    // Here are other available commands: 
    // - C_Cpp.AddDebugConfiguration
    // - C_Cpp.BuildAndDebugFile
    // - C_Cpp.BuildAndRunFile
    // - C_Cpp.ConfigurationEditJSON
    // - C_Cpp.ConfigurationEditUI
    // - C_Cpp.ConfigurationProviderSelect
    // - C_Cpp.ConfigurationSelect
    // - C_Cpp.CreateDeclarationOrDefinition
    // - C_Cpp.DisableErrorSquiggles
    // - C_Cpp.EnableErrorSquiggles
    // - C_Cpp.GenerateDoxygenComment
    // - C_Cpp.GenerateEditorConfig
    // - C_Cpp.GoToNextDirectiveInGroup
    // - C_Cpp.GoToPrevDirectiveInGroup
    // - C_Cpp.InstallCompiler
    // - C_Cpp.LogDiagnostics
    // - C_Cpp.RemoveAllCodeAnalysisProblems
    // - C_Cpp.RescanCompilers
    // - C_Cpp.RescanWorkspace
    // - C_Cpp.ResetDatabase
    // - C_Cpp.RestartIntelliSenseForFile
    // - C_Cpp.RunCodeAnalysisOnActiveFile
    // - C_Cpp.RunCodeAnalysisOnAllFiles
    // - C_Cpp.RunCodeAnalysisOnOpenFiles
    // - C_Cpp.SelectIntelliSenseConfiguration
    // - C_Cpp.TakeSurvey
    // - C_Cpp.ToggleDimInactiveRegions
    // - C_Cpp.ToggleIncludeFallback
    // - C_Cpp.VcpkgClipboardInstallSuggested
    // - C_Cpp.VcpkgOnlineHelpSuggested
    // - C_Cpp.activeSshTarget
    // - C_Cpp.addSshTarget
    // - C_Cpp.referencesViewGroupByType
    // - C_Cpp.referencesViewUngroupByType
    // - C_Cpp.refreshCppSshTargetsView
    // - C_Cpp.removeSshTarget
    // - C_Cpp.selectActiveSshTarget
    // - C_Cpp.selectSshTarget
    // - C_Cpp.setActiveSshTarget
    // - C_Cpp.sshTerminal
    // - CppReferencesView.focus
    // - CppReferencesView.resetViewLocation
    // - CppSshTargetsView.focus
    // - CppSshTargetsView.resetViewLocation
    // - IntelliPHP.postCompletionCommand
    // - acceptSelectedSuggestionOnEnter
    // - acceptSnippet
    // - accessibility.announcement.help
    // - actions.findWithSelection
    // - addRootFolder
    // - aiFeedback.action.reportBugs
    // - aiFeedback.action.reportFeedback
    // - aiSettings.action.toggleModel
    // - aichat.addEverythingAboutSymbolToCurrentChatAction
    // - aichat.addfilestochataction
    // - aichat.addfilestonewchataction
    // - aichat.addsymbolstochataction
    // - aichat.addsymbolstonewchataction
    // - aichat.close-sidebar
    // - aichat.debugwithai
    // - aichat.fixspecificerrormessage
    // - aichat.focus
    // - aichat.focuschatpaneaction
    // - aichat.hidechatdropdown
    // - aichat.internal.submitUnifiedChatAction
    // - aichat.newchatbuttonaction
    // - aichat.open-ai-chat-editor
    // - aichat.open-ai-chat-side-pane
    // - aichat.opensidebar
    // - aichat.setcodeblockaction
    // - aichat.show-ai-chat
    // - aichat.sladsheditsubmitfrombutton
    // - aipopup.action.acceptPromptBar
    // - aipopup.action.addContextToBackgroundForCmdK
    // - aipopup.action.cancelPromptBar
    // - aipopup.action.cmdKRemoveFollowup
    // - aipopup.action.createInBackground
    // - aipopup.action.focusEdit
    // - aipopup.action.insertEditSelection
    // - aipopup.action.nextPromptBar
    // - aipopup.action.rejectPromptBar
    // - aiproject.action.hideModal
    // - aiproject.action.retryProjectPane
    // - aiproject.action.showModal
    // - aiproject.action.startProjectPane
    // - android-xml-editor.open
    // - app.doRefactor
    // - authentication.command.anysphere.signOut
    // - bracket-pair-color-dlw.run
    // - breadcrumbs.toggle
    // - breadcrumbs.toggleFromEditorTitle
    // - cSpell.addIgnoreWord
    // - cSpell.addIgnoreWordsToFolder
    // - cSpell.addIgnoreWordsToUser
    // - cSpell.addIgnoreWordsToWorkspace
    // - cSpell.addIssuesToDictionary
    // - cSpell.addWordToCSpellConfig
    // - cSpell.addWordToDictionary
    // - cSpell.addWordToFolderDictionary
    // - cSpell.addWordToFolderSettings
    // - cSpell.addWordToUserDictionary
    // - cSpell.addWordToUserSettings
    // - cSpell.addWordToWorkspaceDictionary
    // - cSpell.addWordToWorkspaceSettings
    // - cSpell.addWordsToConfigFileFromServer
    // - cSpell.addWordsToDictionaryFileFromServer
    // - cSpell.addWordsToVSCodeSettingsFromServer
    // - cSpell.coding.doRefactor
    // - cSpell.coding.start
    // - cSpell.createCSpellConfig
    // - cSpell.createCustomDictionary
    // - cSpell.disableCurrentLanguage
    // - cSpell.disableForGlobal
    // - cSpell.disableForWorkspace
    // - cSpell.disableLanguage
    // - cSpell.displayCSpellInfo
    // - cSpell.editText
    // - cSpell.enableCurrentLanguage
    // - cSpell.enableForGlobal
    // - cSpell.enableForWorkspace
    // - cSpell.enableLanguage
    // - cSpell.goToNextSpellingIssue
    // - cSpell.goToNextSpellingIssueAndSuggest
    // - cSpell.goToPreviousSpellingIssue
    // - cSpell.goToPreviousSpellingIssueAndSuggest
    // - cSpell.logPerfTimeline
    // - cSpell.openFileAtLine
    // - cSpell.removeWordFromFolderDictionary
    // - cSpell.removeWordFromUserDictionary
    // - cSpell.removeWordFromWorkspaceDictionary
    // - cSpell.suggestSpellingCorrections
    // - cSpell.toggleEnableForGlobal
    // - cSpell.toggleEnableForWorkspace
    // - cSpell.toggleEnableSpellChecker
    // - cSpellRegExpTester.editRegExp
    // - cSpellRegExpTester.selectRegExp
    // - cSpellRegExpTester.testRegExp
    // - cSpellRegExpView.focus
    // - cSpellRegExpView.resetViewLocation
    // - callStack.collapse
    // - changeEditorIndentation2
    // - cleanSearchEditorState
    // - closeReferenceSearchEditor
    // - cmake.addBuildPreset
    // - cmake.addConfigurePreset
    // - cmake.addPackagePreset
    // - cmake.addTestPreset
    // - cmake.addWorkflowPreset
    // - cmake.appendBuildDirectoryToWorkspace
    // - cmake.buildAll
    // - cmake.clean
    // - cmake.cleanAll
    // - cmake.cleanConfigure
    // - cmake.cleanConfigureAll
    // - cmake.cleanConfigureAllWithDebugger
    // - cmake.cleanConfigureWithDebugger
    // - cmake.cleanRebuild
    // - cmake.cleanRebuildAll
    // - cmake.compileFile
    // - cmake.configure
    // - cmake.configureAll
    // - cmake.configureAllWithDebugger
    // - cmake.configureWithDebugger
    // - cmake.cpack
    // - cmake.cpackAll
    // - cmake.ctest
    // - cmake.ctestAll
    // - cmake.debugTargetAll
    // - cmake.editCache
    // - cmake.editCacheUI
    // - cmake.editKits
    // - cmake.install
    // - cmake.installAll
    // - cmake.launchTargetAll
    // - cmake.logDiagnostics
    // - cmake.onlineHelp
    // - cmake.openCMakePresets
    // - cmake.openSettings
    // - cmake.outline.build
    // - cmake.outline.buildAll
    // - cmake.outline.buildTarget
    // - cmake.outline.clean
    // - cmake.outline.cleanAll
    // - cmake.outline.cleanConfigure
    // - cmake.outline.cleanConfigureAll
    // - cmake.outline.cleanConfigureAllWithDebugger
    // - cmake.outline.cleanConfigureWithDebugger
    // - cmake.outline.cleanRebuild
    // - cmake.outline.cleanRebuildAll
    // - cmake.outline.compileFile
    // - cmake.outline.configure
    // - cmake.outline.configureAll
    // - cmake.outline.configureAllWithDebugger
    // - cmake.outline.configureWithDebugger
    // - cmake.outline.debugTarget
    // - cmake.outline.editCacheUI
    // - cmake.outline.focus
    // - cmake.outline.launchTarget
    // - cmake.outline.resetViewLocation
    // - cmake.outline.revealInCMakeLists
    // - cmake.outline.runUtilityTarget
    // - cmake.outline.selectWorkspace
    // - cmake.outline.setDefaultTarget
    // - cmake.outline.setLaunchTarget
    // - cmake.outline.stop
    // - cmake.outline.stopAll
    // - cmake.pinnedCommands.add
    // - cmake.pinnedCommands.focus
    // - cmake.pinnedCommands.remove
    // - cmake.pinnedCommands.resetViewLocation
    // - cmake.pinnedCommands.run
    // - cmake.projectStatus.build
    // - cmake.projectStatus.cleanConfigure
    // - cmake.projectStatus.configure
    // - cmake.projectStatus.cpack
    // - cmake.projectStatus.ctest
    // - cmake.projectStatus.debugTarget
    // - cmake.projectStatus.focus
    // - cmake.projectStatus.launchTarget
    // - cmake.projectStatus.openSettings
    // - cmake.projectStatus.openVisibilitySettings
    // - cmake.projectStatus.resetViewLocation
    // - cmake.projectStatus.selectActiveProject
    // - cmake.projectStatus.selectBuildPreset
    // - cmake.projectStatus.selectConfigurePreset
    // - cmake.projectStatus.selectKit
    // - cmake.projectStatus.selectPackagePreset
    // - cmake.projectStatus.selectTestPreset
    // - cmake.projectStatus.selectWorkflowPreset
    // - cmake.projectStatus.setDebugTarget
    // - cmake.projectStatus.setDefaultTarget
    // - cmake.projectStatus.setLaunchTarget
    // - cmake.projectStatus.setTestTarget
    // - cmake.projectStatus.setVariant
    // - cmake.projectStatus.stop
    // - cmake.projectStatus.update
    // - cmake.projectStatus.viewBuildSettings
    // - cmake.projectStatus.viewConfigureSettings
    // - cmake.projectStatus.viewPackageSettings
    // - cmake.projectStatus.viewTestSettings
    // - cmake.projectStatus.workflow
    // - cmake.quickStart
    // - cmake.refreshTests
    // - cmake.refreshTestsAll
    // - cmake.resetState
    // - cmake.revealTestExplorer
    // - cmake.scanForCompilers
    // - cmake.scanForKits
    // - cmake.selectActiveFolder
    // - cmake.selectBuildPreset
    // - cmake.selectConfigurePreset
    // - cmake.selectKit
    // - cmake.selectLaunchTarget
    // - cmake.selectPackagePreset
    // - cmake.selectTestPreset
    // - cmake.selectWorkflowPreset
    // - cmake.setDefaultTarget
    // - cmake.setVariant
    // - cmake.setVariantAll
    // - cmake.showBuildCommand
    // - cmake.showConfigureCommand
    // - cmake.stop
    // - cmake.stopAll
    // - cmake.viewLog
    // - cmake.workflow
    // - cmake.workflowAll
    // - cmdK.clearPromptBar
    // - codelens.showLensesInCurrentLine
    // - codesnap.start
    // - columnSelect
    // - comments.collapse
    // - comments.expand
    // - comments.reply
    // - compareFiles
    // - compareSelected
    // - composer.about
    // - composer.addfilestocomposer
    // - composer.addfilestonnewcomposer
    // - composer.archive
    // - composer.check-platform-reqs
    // - composer.clear-cache
    // - composer.create-project
    // - composer.disable
    // - composer.download
    // - composer.enable
    // - composer.fund
    // - composer.install
    // - composer.licenses
    // - composer.newcomposeraction
    // - composer.openComposerFromCurrentChat
    // - composer.outdated
    // - composer.reinstall
    // - composer.remove
    // - composer.require
    // - composer.require-dev
    // - composer.run-script
    // - composer.search
    // - composer.show-tree
    // - composer.update
    // - compositionEnd
    // - compositionStart
    // - compositionType
    // - configureExtensionsAutoUpdate.all
    // - configureExtensionsAutoUpdate.enabled
    // - configureExtensionsAutoUpdate.none
    // - configureExtensionsAutoUpdate.selected
    // - createCursor
    // - cursor.ai.reportBadChat
    // - cursor.checkOkToIndexLink
    // - cursor.checkonupdate
    // - cursor.doupdate
    // - cursor.execterminalaction
    // - cursor.giveFeedback
    // - cursor.mentionLinkToolbar
    // - cursor.newdocs
    // - cursor.publicLogCapture
    // - cursor.removevim
    // - cursor.showTooltipActionId
    // - cursor.submitdocs
    // - cursorAuth.triggerTokenRefresh
    // - cursorLineEnd
    // - cursorLineEndSelect
    // - cursorLineStart
    // - cursorLineStartSelect
    // - cursorRedo
    // - cursorWordAccessibilityLeft
    // - cursorWordAccessibilityLeftSelect
    // - cursorWordAccessibilityRight
    // - cursorWordAccessibilityRightSelect
    // - cursorWordEndLeft
    // - cursorWordEndLeftSelect
    // - cursorWordPartLeft
    // - cursorWordPartLeftSelect
    // - cursorWordPartRight
    // - cursorWordPartRightSelect
    // - cursorWordPartStartLeft
    // - cursorWordPartStartLeftSelect
    // - cursorWordRight
    // - cursorWordRightSelect
    // - cursorWordStartLeft
    // - cursorWordStartLeftSelect
    // - cursorWordStartRight
    // - cursorWordStartRightSelect
    // - cursorai.action.askToEnableShadowWorkspace
    // - cursorai.action.cppAfterOnboarding
    // - cursorai.action.hideNotificationsForMs
    // - cursorai.action.importvscode
    // - cursorai.action.interpreterChangeKernelAction
    // - cursorai.action.reportBadAIAction
    // - cursorai.action.reportBadCmdK
    // - cursorai.action.reportGoodAIAction
    // - cursorai.action.reportGoodCmdK
    // - cursorai.action.startIndexingListener
    // - cursorai.action.switchToModel
    // - cursorai.action.switchToModel.gpt3
    // - cursorai.action.switchToModel.gpt4
    // - cursorai.action.takeInterpreterAction
    // - cut
    // - cython.compileCurrentFile
    // - cython.createCythonTypeStub
    // - cython.restartserver
    // - dart.addDependency
    // - dart.addDevDependency
    // - dart.addSdkToPath
    // - dart.attach
    // - dart.changeFlutterSdk
    // - dart.changeSdk
    // - dart.completeStatement
    // - dart.copyDtdUri
    // - dart.copyVmServiceUri
    // - dart.createLaunchConfiguration
    // - dart.createProject
    // - dart.edit.fixAllInWorkspace
    // - dart.edit.fixAllInWorkspace.preview
    // - dart.findTestOrImplementationFile
    // - dart.forceReanalyze
    // - dart.generateDiagnosticReport
    // - dart.goToAugmentation
    // - dart.goToAugmented
    // - dart.goToSuper
    // - dart.goToTestOrImplementationFile
    // - dart.goToTests
    // - dart.openAnalyzerDiagnostics
    // - dart.openDevTools.external
    // - dart.openDevToolsCpuProfiler
    // - dart.openDevToolsDeepLinks
    // - dart.openDevToolsInspector
    // - dart.openDevToolsLogging
    // - dart.openDevToolsMemory
    // - dart.openDevToolsNetwork
    // - dart.openDevToolsPerformance
    // - dart.openExtensionLog
    // - dart.openObservatory
    // - dart.printSelectionToTerminal
    // - dart.rerunLastTestDebugSession
    // - dart.restartAnalysisServer
    // - dart.sortMembers
    // - dart.startDebugging
    // - dart.startLogging
    // - dart.startLoggingAnalysisServer
    // - dart.startLoggingAnalysisServerTimings
    // - dart.startLoggingDebugging
    // - dart.startLoggingExtensionOnly
    // - dart.startWithoutDebugging
    // - dart.stopLogging
    // - dart.task.dartdoc
    // - dart.toggleDartdocComment
    // - dart.toggleLineComment
    // - dart.writeRecommendedSettings
    // - dartDependencyTree.focus
    // - dartDependencyTree.resetViewLocation
    // - dartFlutterOutline.focus
    // - dartFlutterOutline.resetViewLocation
    // - dartFlutterSidebar.focus
    // - dartFlutterSidebar.resetViewLocation
    // - dataScience.ClearCache
    // - dataScience.ClearUserProviderJupyterServerCache
    // - debug.action.openDisassemblyView
    // - debug.action.toggleDisassemblyViewSourceCode
    // - debug.addConfiguration
    // - debug.addToWatchExpressions
    // - debug.breakWhenValueChanges
    // - debug.breakWhenValueIsAccessed
    // - debug.breakWhenValueIsRead
    // - debug.collapseRepl
    // - debug.copyEvaluatePath
    // - debug.copyStackTrace
    // - debug.editBreakpoint
    // - debug.editBreakpointMode
    // - debug.editFunctionBreakpoint
    // - debug.editFunctionBreakpointHitCount
    // - debug.enableOrDisableBreakpoint
    // - debug.installAdditionalDebuggers
    // - debug.jumpToCursor
    // - debug.replCopy
    // - debug.replPaste
    // - debug.setWatchExpression
    // - debug.startFromConfig
    // - debug.toggleReplIgnoreFocus
    // - debugpy.clearCacheAndReload
    // - debugpy.debugInTerminal
    // - debugpy.debugUsingLaunchConfig
    // - debugpy.reportIssue
    // - debugpy.viewOutput
    // - default:compositionEnd
    // - default:compositionStart
    // - default:compositionType
    // - default:cut
    // - default:paste
    // - default:redo
    // - default:replacePreviousChar
    // - default:type
    // - default:undo
    // - deleteAllLeft
    // - deleteAllRight
    // - deleteInsideWord
    // - deleteWordEndLeft
    // - deleteWordEndRight
    // - deleteWordPartLeft
    // - deleteWordPartRight
    // - deleteWordStartLeft
    // - deleteWordStartRight
    // - detailsContainers.focus
    // - detailsContainers.resetViewLocation
    // - devVolumes.focus
    // - devVolumes.resetViewLocation
    // - developer.showCurrentFileAsReleaseNotes
    // - devsense:adddocblock
    // - devsense:formatCode
    // - devsense:implementabstracts
    // - devsense:implementctor
    // - devsense:implementgettersetter
    // - devsense:organizeUses
    // - devsense:peekBaseImplementation
    // - devsense:peekImplementations
    // - devsense:peekReferences
    // - devsense:peekTraitUses
    // - diffEditor.collapseAllUnchangedRegions
    // - diffEditor.revert
    // - diffEditor.showAllUnchangedRegions
    // - diffEditor.switchSide
    // - diffEditor.toggleCollapseUnchangedRegions
    // - diffEditor.toggleShowMovedCodeBlocks
    // - diffEditor.toggleUseInlineViewWhenSpaceIsLimited
    // - dockerContainers.focus
    // - dockerContainers.removeView
    // - dockerContainers.resetViewLocation
    // - dockerContainers.toggleVisibility
    // - dockerImages.focus
    // - dockerImages.removeView
    // - dockerImages.resetViewLocation
    // - dockerImages.toggleVisibility
    // - dockerNetworks.focus
    // - dockerNetworks.removeView
    // - dockerNetworks.resetViewLocation
    // - dockerNetworks.toggleVisibility
    // - dockerRegistries.focus
    // - dockerRegistries.removeView
    // - dockerRegistries.resetViewLocation
    // - dockerRegistries.toggleVisibility
    // - dockerVolumes.focus
    // - dockerVolumes.removeView
    // - dockerVolumes.resetViewLocation
    // - dockerVolumes.toggleVisibility
    // - dosbox.openDosbox
    // - dosbox.openDosboxX
    // - dosbox.openJsdos
    // - dosbox.openMsdosPlayer
    // - dosbox.startJsdos
    // - editor.action.acceptCppSuggestion
    // - editor.action.acceptPartialGPT4
    // - editor.action.addCursorsToBottom
    // - editor.action.addCursorsToTop
    // - editor.action.addSelectionToPreviousFindMatch
    // - editor.action.addSymbolToChat
    // - editor.action.addSymbolToNewChat
    // - editor.action.changeTabDisplaySize
    // - editor.action.clipboardCopyWithSyntaxHighlightingAction
    // - editor.action.configureCppDiffPeekView
    // - editor.action.decreaseHoverVerbosityLevel
    // - editor.action.detectIndentation
    // - editor.action.diffReview.next
    // - editor.action.diffReview.prev
    // - editor.action.duplicateSelection
    // - editor.action.enableCppGlobally
    // - editor.action.enterReaderModeFromSymbol
    // - editor.action.findReferences
    // - editor.action.fixAll
    // - editor.action.focusNextCursor
    // - editor.action.focusPreviousCursor
    // - editor.action.focusStickyScroll
    // - editor.action.forceRetokenize
    // - editor.action.format
    // - editor.action.formatChanges
    // - editor.action.formatDocument.multiple
    // - editor.action.formatSelection.multiple
    // - editor.action.getDiffHistory
    // - editor.action.goToDeclaration
    // - editor.action.goToMatchFindAction
    // - editor.action.goToSelectionAnchor
    // - editor.action.goToTypeDefinition
    // - editor.action.increaseHoverVerbosityLevel
    // - editor.action.indentUsingSpaces
    // - editor.action.indentUsingTabs
    // - editor.action.indentationToSpaces
    // - editor.action.indentationToTabs
    // - editor.action.inlineDiffs.submitFix
    // - editor.action.inlineDiffs.viewAllChanges
    // - editor.action.inlineEdits.trigger
    // - editor.action.inlineSuggest.acceptNextLine
    // - editor.action.inlineSuggest.toggleAlwaysShowToolbar
    // - editor.action.inlineSuggest.trigger
    // - editor.action.insertSnippet
    // - editor.action.inspectTMScopes
    // - editor.action.joinLines
    // - editor.action.measureExtHostLatency
    // - editor.action.moveCarretLeftAction
    // - editor.action.moveCarretRightAction
    // - editor.action.moveSelectionToPreviousFindMatch
    // - editor.action.openDeclarationToTheSide
    // - editor.action.openLink
    // - editor.action.pasteAs
    // - editor.action.pasteAsText
    // - editor.action.peekDeclaration
    // - editor.action.peekTypeDefinition
    // - editor.action.previewDeclaration
    // - editor.action.redoLexical
    // - editor.action.referenceSearch.trigger
    // - editor.action.reindentlines
    // - editor.action.reindentselectedlines
    // - editor.action.rejectPartialGPT4
    // - editor.action.removeDuplicateLines
    // - editor.action.renderViewZone
    // - editor.action.resetSuggestSize
    // - editor.action.resizePromptBar
    // - editor.action.revealDeclaration
    // - editor.action.selectToBracket
    // - editor.action.setCppDiffPeekView
    // - editor.action.showDefinitionPreviewHover
    // - editor.action.showDiffHistory
    // - editor.action.showOrFocusStandaloneColorPicker
    // - editor.action.showReferences
    // - editor.action.showSnippets
    // - editor.action.smartSelect.grow
    // - editor.action.sortLinesAscending
    // - editor.action.sortLinesDescending
    // - editor.action.sourceAction
    // - editor.action.startDebugTextMate
    // - editor.action.surroundWithSnippet
    // - editor.action.toggleColumnSelection
    // - editor.action.toggleMinimap
    // - editor.action.toggleRenderControlCharacter
    // - editor.action.toggleRenderWhitespace
    // - editor.action.toggleStickyScroll
    // - editor.action.transformToCamelcase
    // - editor.action.transformToKebabcase
    // - editor.action.transformToLowercase
    // - editor.action.transformToPascalcase
    // - editor.action.transformToSnakecase
    // - editor.action.transformToTitlecase
    // - editor.action.transformToUppercase
    // - editor.action.transpose
    // - editor.action.transposeLetters
    // - editor.action.triggerGPT4
    // - editor.action.undoLexical
    // - editor.action.unicodeHighlight.disableHighlightingOfAmbiguousCharacters
    // - editor.action.unicodeHighlight.disableHighlightingOfInvisibleCharacters
    // - editor.action.unicodeHighlight.disableHighlightingOfNonBasicAsciiCharacters
    // - editor.action.unicodeHighlight.showExcludeOptions
    // - editor.action.updateGhostText
    // - editor.action.updateHintLine
    // - editor.action.wordHighlight.trigger
    // - editor.actions.findWithArgs
    // - editor.cpp.disableenabled
    // - editor.cpp.login
    // - editor.cpp.openPro
    // - editor.debug.action.addLogPoint
    // - editor.debug.action.conditionalBreakpoint
    // - editor.debug.action.editBreakpoint
    // - editor.debug.action.goToNextBreakpoint
    // - editor.debug.action.goToPreviousBreakpoint
    // - editor.debug.action.runToCursor
    // - editor.debug.action.selectionToRepl
    // - editor.debug.action.selectionToWatch
    // - editor.debug.action.stepIntoTargets
    // - editor.debug.action.triggerByBreakpoint
    // - editor.emmet.action.balanceIn
    // - editor.emmet.action.balanceOut
    // - editor.emmet.action.decrementNumberByOne
    // - editor.emmet.action.decrementNumberByOneTenth
    // - editor.emmet.action.decrementNumberByTen
    // - editor.emmet.action.evaluateMathExpression
    // - editor.emmet.action.incrementNumberByOne
    // - editor.emmet.action.incrementNumberByOneTenth
    // - editor.emmet.action.incrementNumberByTen
    // - editor.emmet.action.matchTag
    // - editor.emmet.action.mergeLines
    // - editor.emmet.action.nextEditPoint
    // - editor.emmet.action.prevEditPoint
    // - editor.emmet.action.reflectCSSValue
    // - editor.emmet.action.removeTag
    // - editor.emmet.action.selectNextItem
    // - editor.emmet.action.selectPrevItem
    // - editor.emmet.action.splitJoinTag
    // - editor.emmet.action.toggleComment
    // - editor.emmet.action.updateImageSize
    // - editor.emmet.action.updateTag
    // - editor.emmet.action.wrapWithAbbreviation
    // - editor.gotoNextFold
    // - editor.gotoParentFold
    // - editor.gotoPreviousFold
    // - editor.inlayHints.Reset
    // - editor.showTypeHierarchy
    // - emmet.expandAbbreviation
    // - eqMaterialThemeIcons.fixIcons
    // - eslint.applyAllFixes
    // - eslint.applyDisableFile
    // - eslint.applyDisableLine
    // - eslint.applySameFixes
    // - eslint.applySingleFix
    // - eslint.applySuggestion
    // - eslint.createConfig
    // - eslint.executeAutofix
    // - eslint.migrateSettings
    // - eslint.openRuleDoc
    // - eslint.restart
    // - eslint.revalidate
    // - eslint.showOutputChannel
    // - explorer.download
    // - explorer.newFile
    // - explorer.newFolder
    // - explorer.openWith
    // - explorer.upload
    // - extension.bisect.next
    // - extension.bisect.start
    // - extension.bisect.stop
    // - extension.colorHighlight
    // - extension.installVibrancy
    // - extension.js-debug.addCustomBreakpoints
    // - extension.js-debug.addXHRBreakpoints
    // - extension.js-debug.callers.add
    // - extension.js-debug.callers.goToCaller
    // - extension.js-debug.callers.gotToTarget
    // - extension.js-debug.callers.remove
    // - extension.js-debug.callers.removeAll
    // - extension.js-debug.createDebuggerTerminal
    // - extension.js-debug.createDiagnostics
    // - extension.js-debug.debugLink
    // - extension.js-debug.disableSourceMapStepping
    // - extension.js-debug.editXHRBreakpoints
    // - extension.js-debug.enableSourceMapStepping
    // - extension.js-debug.getDiagnosticLogs
    // - extension.js-debug.npmScript
    // - extension.js-debug.openEdgeDevTools
    // - extension.js-debug.prettyPrint
    // - extension.js-debug.removeAllCustomBreakpoints
    // - extension.js-debug.removeXHRBreakpoint
    // - extension.js-debug.revealPage
    // - extension.js-debug.startProfile
    // - extension.js-debug.stopProfile
    // - extension.js-debug.toggleSkippingFile
    // - extension.jsProfileVisualizer.table.clearCodeLenses
    // - extension.liveServer.changeWorkspace
    // - extension.node-debug.toggleAutoAttach
    // - extension.open
    // - extension.pwa-node-debug.attachNodeProcess
    // - extension.refreshModel
    // - extension.stayClassy
    // - extension.uninstallVibrancy
    // - extension.updateVibrancy
    // - extensions.actions.searchByCategory.AI
    // - extensions.actions.searchByCategory.Azure
    // - extensions.actions.searchByCategory.Chat
    // - extensions.actions.searchByCategory.Data Science
    // - extensions.actions.searchByCategory.Debuggers
    // - extensions.actions.searchByCategory.Education
    // - extensions.actions.searchByCategory.Extension Packs
    // - extensions.actions.searchByCategory.Formatters
    // - extensions.actions.searchByCategory.Keymaps
    // - extensions.actions.searchByCategory.Language Packs
    // - extensions.actions.searchByCategory.Linters
    // - extensions.actions.searchByCategory.Machine Learning
    // - extensions.actions.searchByCategory.Notebooks
    // - extensions.actions.searchByCategory.Other
    // - extensions.actions.searchByCategory.Programming Languages
    // - extensions.actions.searchByCategory.SCM Providers
    // - extensions.actions.searchByCategory.Snippets
    // - extensions.actions.searchByCategory.Testing
    // - extensions.actions.searchByCategory.Themes
    // - extensions.actions.searchByCategory.Visualization
    // - extensions.filter.featured
    // - extensions.recommendedList.focus
    // - extensions.recommendedList.resetViewLocation
    // - extensions.sort.installs
    // - extensions.sort.name
    // - extensions.sort.publishedDate
    // - extensions.sort.rating
    // - extensions.sort.updateDate
    // - files.openTimeline
    // - files.participants.resetChoice
    // - filesExplorer.findInWorkspace
    // - flutter.addSdkToPath
    // - flutter.attach
    // - flutter.attachProcess
    // - flutter.cancelInspectWidget
    // - flutter.clean
    // - flutter.createProject
    // - flutter.createProject.sidebar
    // - flutter.doctor
    // - flutter.doctor.sidebar
    // - flutter.getSelectedDeviceId
    // - flutter.hotReload
    // - flutter.hotRestart
    // - flutter.inspectWidget
    // - flutter.inspectWidget.autoCancel
    // - flutter.launchEmulator
    // - flutter.openDevTools
    // - flutter.openDevTools.sidebar
    // - flutter.openInAndroidStudio
    // - flutter.openInXcode
    // - flutter.overridePlatform
    // - flutter.packages.get
    // - flutter.packages.get.all
    // - flutter.packages.outdated
    // - flutter.packages.upgrade
    // - flutter.packages.upgrade.majorVersions
    // - flutter.runProfileMode
    // - flutter.runReleaseMode
    // - flutter.screenshot
    // - flutter.selectDevice
    // - flutter.task.genl10n
    // - flutter.toggleBrightness
    // - flutter.toggleDebugModeBanner
    // - flutter.toggleDebugPainting
    // - flutter.togglePaintBaselines
    // - flutter.togglePerformanceOverlay
    // - flutter.toggleRepaintRainbow
    // - flutter.toggleSlowAnimations
    // - flutter.upgrade
    // - focusAndAcceptSuggestion
    // - getContextKeyInfo
    // - git-base.api.getRemoteSources
    // - git._syncAll
    // - git.acceptMerge
    // - git.addRemote
    // - git.api.checkIgnore
    // - git.api.getRemoteSources
    // - git.api.getRepositories
    // - git.api.getRepositoryState
    // - git.branch
    // - git.branchFrom
    // - git.checkout
    // - git.checkoutDetached
    // - git.cherryPick
    // - git.clean
    // - git.cleanAll
    // - git.cleanAllTracked
    // - git.cleanAllUntracked
    // - git.clone
    // - git.cloneRecursive
    // - git.close
    // - git.closeAllDiffEditors
    // - git.closeAllUnmodifiedEditors
    // - git.closeOtherRepositories
    // - git.commit
    // - git.commitAll
    // - git.commitAllAmend
    // - git.commitAllAmendNoVerify
    // - git.commitAllNoVerify
    // - git.commitAllSigned
    // - git.commitAllSignedNoVerify
    // - git.commitAmend
    // - git.commitAmendNoVerify
    // - git.commitEmpty
    // - git.commitEmptyNoVerify
    // - git.commitMessageAccept
    // - git.commitMessageDiscard
    // - git.commitNoVerify
    // - git.commitSigned
    // - git.commitSignedNoVerify
    // - git.commitStaged
    // - git.commitStagedAmend
    // - git.commitStagedAmendNoVerify
    // - git.commitStagedNoVerify
    // - git.commitStagedSigned
    // - git.commitStagedSignedNoVerify
    // - git.continueInLocalClone
    // - git.createTag
    // - git.deleteBranch
    // - git.deleteRemoteTag
    // - git.deleteTag
    // - git.diff.stageHunk
    // - git.diff.stageSelection
    // - git.fetch
    // - git.fetchAll
    // - git.fetchPrune
    // - git.fetchRef
    // - git.ignore
    // - git.init
    // - git.manageUnsafeRepositories
    // - git.merge
    // - git.mergeAbort
    // - git.openAllChanges
    // - git.openChange
    // - git.openFile
    // - git.openFile2
    // - git.openHEADFile
    // - git.openMergeEditor
    // - git.openRepositoriesInParentFolders
    // - git.openRepository
    // - git.openResource
    // - git.publish
    // - git.pull
    // - git.pullFrom
    // - git.pullRebase
    // - git.pullRef
    // - git.push
    // - git.pushForce
    // - git.pushRef
    // - git.pushTags
    // - git.pushTo
    // - git.pushToForce
    // - git.pushWithTags
    // - git.pushWithTagsForce
    // - git.rebase
    // - git.rebaseAbort
    // - git.refresh
    // - git.removeRemote
    // - git.rename
    // - git.renameBranch
    // - git.reopenClosedRepositories
    // - git.restoreCommitTemplate
    // - git.revealFileInOS.linux
    // - git.revealFileInOS.mac
    // - git.revealFileInOS.windows
    // - git.revealInExplorer
    // - git.revertChange
    // - git.runGitMerge
    // - git.runGitMergeDiff3
    // - git.showOutput
    // - git.stage
    // - git.stageAll
    // - git.stageAllMerge
    // - git.stageAllTracked
    // - git.stageAllUntracked
    // - git.stageChange
    // - git.stageFile
    // - git.stash
    // - git.stashApply
    // - git.stashApplyEditor
    // - git.stashApplyLatest
    // - git.stashDrop
    // - git.stashDropAll
    // - git.stashDropEditor
    // - git.stashIncludeUntracked
    // - git.stashPop
    // - git.stashPopEditor
    // - git.stashPopLatest
    // - git.stashStaged
    // - git.stashView
    // - git.sync
    // - git.syncRebase
    // - git.timeline.compareWithSelected
    // - git.timeline.copyCommitId
    // - git.timeline.copyCommitMessage
    // - git.timeline.openDiff
    // - git.timeline.selectForCompare
    // - git.timeline.viewCommit
    // - git.undoCommit
    // - git.unstage
    // - git.unstageAll
    // - git.unstageFile
    // - git.viewAllChanges
    // - git.viewChanges
    // - git.viewCommit
    // - git.viewStagedChanges
    // - git.viewUntrackedChanges
    // - github.api.preloadPullRequest
    // - github.copyVscodeDevLink
    // - github.copyVscodeDevLinkFile
    // - github.copyVscodeDevLinkWithoutRange
    // - github.openOnVscodeDev
    // - github.publish
    // - github:activePullRequest.focus
    // - github:activePullRequest.resetViewLocation
    // - github:activePullRequest:welcome.focus
    // - github:activePullRequest:welcome.resetViewLocation
    // - github:compareChangesCommits.focus
    // - github:compareChangesCommits.resetViewLocation
    // - github:compareChangesFiles.focus
    // - github:compareChangesFiles.resetViewLocation
    // - github:conflictResolution.focus
    // - github:conflictResolution.resetViewLocation
    // - github:createPullRequestWebview.focus
    // - github:createPullRequestWebview.resetViewLocation
    // - github:github.vscode-pull-request-github:signIn0
    // - github:login.focus
    // - github:login.removeView
    // - github:login.resetViewLocation
    // - github:login.toggleVisibility
    // - go.add.package.workspace
    // - go.add.tags
    // - go.apply.coverprofile
    // - go.benchmark.cursor
    // - go.benchmark.file
    // - go.benchmark.package
    // - go.browse.packages
    // - go.build.package
    // - go.build.workspace
    // - go.debug.cursor
    // - go.debug.previous
    // - go.debug.subtest.cursor
    // - go.debug.toggleHideSystemGoroutines
    // - go.environment.choose
    // - go.explorer.focus
    // - go.explorer.open
    // - go.explorer.refresh
    // - go.explorer.resetViewLocation
    // - go.extractServerChannel
    // - go.get.package
    // - go.global.resetState
    // - go.gopath
    // - go.goroot
    // - go.impl.cursor
    // - go.import.add
    // - go.install.package
    // - go.languageserver.maintain
    // - go.languageserver.restart
    // - go.lint.package
    // - go.lint.workspace
    // - go.locate.tools
    // - go.playground
    // - go.remove.tags
    // - go.run.modinit
    // - go.show.commands
    // - go.subtest.cursor
    // - go.survey.resetConfig
    // - go.survey.showConfig
    // - go.test.cancel
    // - go.test.captureProfile
    // - go.test.coverage
    // - go.test.cursor
    // - go.test.cursorOrPrevious
    // - go.test.deleteProfile
    // - go.test.file
    // - go.test.generate.file
    // - go.test.generate.function
    // - go.test.generate.package
    // - go.test.package
    // - go.test.previous
    // - go.test.profile.focus
    // - go.test.profile.resetViewLocation
    // - go.test.refresh
    // - go.test.showProfileFile
    // - go.test.showProfiles
    // - go.test.workspace
    // - go.toggle.gc_details
    // - go.toggle.test.file
    // - go.tools.install
    // - go.vet.package
    // - go.vet.workspace
    // - go.vulncheck.toggle
    // - go.welcome
    // - go.workspace.editEnv
    // - go.workspace.resetEnv
    // - go.workspace.resetState
    // - goToNextReferenceFromEmbeddedEditor
    // - goToPreviousReferenceFromEmbeddedEditor
    // - graphviz-interactive-preview.preview.beside
    // - helium-icon-theme.activateIcons
    // - helium-icon-theme.changeFolderColor
    // - helium-icon-theme.changeFolderTheme
    // - helium-icon-theme.changeOpacity
    // - helium-icon-theme.changeSaturation
    // - helium-icon-theme.restoreDefaultConfig
    // - helium-icon-theme.toggleExplorerArrows
    // - helium-icon-theme.toggleGrayscale
    // - helium-icon-theme.toggleIconPacks
    // - hideCustomTitleBar
    // - hideCustomTitleBarInFullScreen
    // - imagePreview.copyImage
    // - imagePreview.zoomIn
    // - imagePreview.zoomOut
    // - inlayHints.startReadingLineWithHint
    // - inlineBookmarks.debug.state.reset
    // - inlineBookmarks.jumpToNext
    // - inlineBookmarks.jumpToPrevious
    // - inlineBookmarks.jumpToRange
    // - inlineBookmarks.listBookmarks
    // - inlineBookmarks.listVisibleBookmarks
    // - inlineBookmarks.refresh
    // - inlineBookmarks.scanWorkspace
    // - inlineBookmarks.setTreeViewFilterWords
    // - inlineBookmarks.showSelectBookmark
    // - inlineBookmarks.showSelectVisibleBookmark
    // - inlineBookmarks.toggleShowVisibleFilesOnly
    // - inlineBookmarks.toggleViewKeepFilesExpanded
    // - inlineBookmarksExplorer.focus
    // - inlineBookmarksExplorer.removeView
    // - inlineBookmarksExplorer.resetViewLocation
    // - inlineBookmarksExplorer.toggleVisibility
    // - inlineChat.configure
    // - inlineChat.copyRecordings
    // - inlineChat.toggleDiff
    // - intelliphp.releasenotes
    // - interactive.configure
    // - interactive.history.focus
    // - interactive.input.focus
    // - interactiveEditor.start
    // - ipynb.cleanInvalidImageAttachment
    // - ipynb.newUntitledIpynb
    // - ipynb.openIpynbInNotebookEditor
    // - issue.continueWorking
    // - issue.copyGithubDevLink
    // - issue.copyGithubDevLinkFile
    // - issue.copyGithubDevLinkWithoutRange
    // - issue.copyGithubHeadLink
    // - issue.copyGithubHeadLinkWithoutRange
    // - issue.copyGithubPermalink
    // - issue.copyGithubPermalinkWithoutRange
    // - issue.copyIssueNumber
    // - issue.copyIssueUrl
    // - issue.copyMarkdownGithubPermalink
    // - issue.copyMarkdownGithubPermalinkWithoutRange
    // - issue.createIssue
    // - issue.createIssueFromClipboard
    // - issue.createIssueFromSelection
    // - issue.editQuery
    // - issue.getCurrent
    // - issue.goToLinkedCode
    // - issue.issueCompletion
    // - issue.openGithubPermalink
    // - issue.openIssue
    // - issue.refresh
    // - issue.signinAndRefreshList
    // - issue.startWorking
    // - issue.startWorkingBranchDescriptiveTitle
    // - issue.startWorkingBranchPrompt
    // - issue.statusBar
    // - issue.stopWorking
    // - issue.stopWorkingBranchDescriptiveTitle
    // - issue.userCompletion
    // - issues.openIssuesWebsite
    // - issues:github.focus
    // - issues:github.resetViewLocation
    // - java.action.changeBaseType
    // - java.action.navigateToSuperImplementation
    // - java.action.showClassHierarchy
    // - java.action.showSubtypeHierarchy
    // - java.action.showSupertypeHierarchy
    // - java.action.showTypeHierarchy
    // - java.classpathConfiguration
    // - java.clean.sharedIndexes
    // - java.clean.workspace
    // - java.debug.continueAll
    // - java.debug.continueOthers
    // - java.debug.debugFromProjectView
    // - java.debug.debugJavaFile
    // - java.debug.hotCodeReplace
    // - java.debug.pauseAll
    // - java.debug.pauseOthers
    // - java.debug.runFromProjectView
    // - java.debug.runJavaFile
    // - java.debug.variables.autoExpandLazyVariables
    // - java.debug.variables.manualExpandLazyVariables
    // - java.debug.variables.notShowHex
    // - java.debug.variables.notShowLogicalStructure
    // - java.debug.variables.notShowQualifiedNames
    // - java.debug.variables.notShowStaticVariables
    // - java.debug.variables.notShowToString
    // - java.debug.variables.showHex
    // - java.debug.variables.showLogicalStructure
    // - java.debug.variables.showQualifiedNames
    // - java.debug.variables.showStaticVariables
    // - java.debug.variables.showToString
    // - java.extGuide
    // - java.formatterSettings
    // - java.formatterSettings.showTextEditor
    // - java.gettingStarted
    // - java.installJdk
    // - java.installJdk.fromWalkthrough
    // - java.open.clientLog
    // - java.open.formatter.settings
    // - java.open.logs
    // - java.open.serverLog
    // - java.open.serverStderrLog
    // - java.open.serverStdoutLog
    // - java.overview
    // - java.project.addLibraries
    // - java.project.addLibraryFolders
    // - java.project.addToSourcePath.command
    // - java.project.build
    // - java.project.build.workspace
    // - java.project.clean.workspace
    // - java.project.create
    // - java.project.createModuleInfo.command
    // - java.project.explorer.hideNonJavaResources
    // - java.project.explorer.showNonJavaResources
    // - java.project.import.command
    // - java.project.listSourcePaths.command
    // - java.project.rebuild
    // - java.project.refreshLibraries
    // - java.project.reloadProjectFromActiveFile
    // - java.project.removeFromSourcePath.command
    // - java.project.removeLibrary
    // - java.project.update
    // - java.project.updateSourceAttachment.command
    // - java.projectSettings
    // - java.runtime
    // - java.server.mode.switch
    // - java.server.restart
    // - java.show.server.task.status
    // - java.showReleaseNotes
    // - java.test.debugFromJavaProjectExplorer
    // - java.test.editor.debug
    // - java.test.editor.run
    // - java.test.goToTest
    // - java.test.goToTestSubject
    // - java.test.runFromJavaProjectExplorer
    // - java.view.fileExplorer.newPackage
    // - java.view.menus.file.newJavaClass
    // - java.view.package.changeToFlatPackageView
    // - java.view.package.changeToHierarchicalPackageView
    // - java.view.package.exportJar
    // - java.view.package.linkWithFolderExplorer
    // - java.view.package.new
    // - java.view.package.newFile
    // - java.view.package.newFolder
    // - java.view.package.newJavaAbstractClass
    // - java.view.package.newJavaAnnotation
    // - java.view.package.newJavaClass
    // - java.view.package.newJavaEnum
    // - java.view.package.newJavaInterface
    // - java.view.package.newJavaRecord
    // - java.view.package.newPackage
    // - java.view.package.refresh
    // - java.view.package.revealInProjectExplorer
    // - java.view.package.unlinkWithFolderExplorer
    // - java.welcome.fromWalkthrough
    // - javaProjectExplorer.focus
    // - javaProjectExplorer.resetViewLocation
    // - javascript.goToProjectConfig
    // - javascript.reloadProjects
    // - javascript.removeUnusedImports
    // - javascript.sortImports
    // - jsBrowserBreakpoints.focus
    // - jsBrowserBreakpoints.resetViewLocation
    // - jsExcludedCallers.focus
    // - jsExcludedCallers.resetViewLocation
    // - json.clearCache
    // - json.sort
    // - jupyter.addcellbelow
    // - jupyter.clearSavedJupyterUris
    // - jupyter.collapseallcells
    // - jupyter.continueEditSessionInCodespace
    // - jupyter.createnewinteractive
    // - jupyter.createnewnotebook
    // - jupyter.debugCellSymbols
    // - jupyter.debugFileInteractive
    // - jupyter.debugcell
    // - jupyter.debugcontinue
    // - jupyter.debugcurrentcell.palette
    // - jupyter.debugstepover
    // - jupyter.debugstop
    // - jupyter.expandallcells
    // - jupyter.export
    // - jupyter.exportAsPythonScript
    // - jupyter.exportToHTML
    // - jupyter.exportToPDF
    // - jupyter.exportfileandoutputasnotebook
    // - jupyter.exportfileasnotebook
    // - jupyter.exportoutputasnotebook
    // - jupyter.filterKernels
    // - jupyter.importnotebook
    // - jupyter.importnotebookfile
    // - jupyter.interactive.clearAllCells
    // - jupyter.interactive.copyCell
    // - jupyter.interactive.exportas
    // - jupyter.interactive.exportasnotebook
    // - jupyter.interactive.goToCode
    // - jupyter.interruptkernel
    // - jupyter.latestExtension
    // - jupyter.listPipPackages
    // - jupyter.listVariables
    // - jupyter.manageAccessToKernels
    // - jupyter.notebookeditor.addcellbelow
    // - jupyter.notebookeditor.export
    // - jupyter.notebookeditor.removeallcells
    // - jupyter.openOutlineView
    // - jupyter.openVariableView
    // - jupyter.replayPylanceLog
    // - jupyter.replayPylanceLogStep
    // - jupyter.restartkernel
    // - jupyter.restartkernelandrunallcells
    // - jupyter.restartkernelandrunuptoselectedcell
    // - jupyter.runDependentCells
    // - jupyter.runFileInteractive
    // - jupyter.runInDedicatedExtensionHost
    // - jupyter.runPrecedentCells
    // - jupyter.runallcells
    // - jupyter.runallcellsabove
    // - jupyter.runallcellsabove.palette
    // - jupyter.runcell
    // - jupyter.runcellandallbelow
    // - jupyter.runcurrentcellandallbelow.palette
    // - jupyter.runfromline
    // - jupyter.runtoline
    // - jupyter.scrolltocell
    // - jupyter.selectDependentCells
    // - jupyter.selectJupyterInterpreter
    // - jupyter.selectPrecedentCells
    // - jupyter.showDataViewer
    // - jupyter.viewOutput
    // - jupyterViewVariables.focus
    // - jupyterViewVariables.resetViewLocation
    // - keybindings.editor.clearSearchHistory
    // - keybindings.editor.copyCommandKeybindingEntry
    // - keybindings.editor.copyCommandTitle
    // - keybindings.editor.resetKeybinding
    // - keybindings.editor.showConflicts
    // - keybindings.editor.showDefaultKeybindings
    // - keybindings.editor.showExtensionKeybindings
    // - keybindings.editor.showUserKeybindings
    // - keywordActivation.status.command
    // - lastCursorLineSelect
    // - lastCursorLineSelectDrag
    // - lastCursorWordSelect
    // - layoutEditorGroups
    // - lineBreakInsert
    // - list.collapseAllToFocus
    // - list.focusParent
    // - list.scrollLeft
    // - list.scrollRight
    // - list.selectAndPreserveFocus
    // - list.toggleFilterOnType
    // - list.toggleFindMatchType
    // - list.toggleFindMode
    // - list.toggleKeyboardNavigation
    // - list.triggerTypeNavigation
    // - livePreview.end
    // - livePreview.runServerLoggingTask
    // - livePreview.setDefaultOpenFile
    // - livePreview.start
    // - livePreview.start.debugPreview.atFile
    // - livePreview.start.externalDebugPreview.atFile
    // - livePreview.start.externalPreview.atFile
    // - livePreview.start.internalPreview.atFile
    // - livePreview.start.preview.atFile
    // - livePreview.start.preview.atFileString
    // - lldb.alternateBackend
    // - lldb.attach
    // - lldb.changeDisplaySettings
    // - lldb.commandPrompt
    // - lldb.diagnose
    // - lldb.displayFormat
    // - lldb.excludedCallers.add
    // - lldb.excludedCallers.focus
    // - lldb.excludedCallers.remove
    // - lldb.excludedCallers.removeAll
    // - lldb.excludedCallers.resetViewLocation
    // - lldb.getCargoLaunchConfigs
    // - lldb.loadedModules.focus
    // - lldb.loadedModules.resetViewLocation
    // - lldb.modules.copyValue
    // - lldb.pickMyProcess
    // - lldb.pickProcess
    // - lldb.showDisassembly
    // - lldb.symbols
    // - lldb.toggleConsoleMode
    // - lldb.toggleDerefPointers
    // - lldb.toggleDisassembly
    // - lldb.viewMemory
    // - loadedScripts.collapse
    // - markdown.editor.insertImageFromWorkspace
    // - markdown.editor.insertLinkFromWorkspace
    // - markdown.findAllFileReferences
    // - markdown.preview.refresh
    // - markdown.preview.toggleLock
    // - markdown.showLockedPreviewToSide
    // - markdown.showPreviewSecuritySelector
    // - markdown.showSource
    // - material-icon-theme.activateIcons
    // - material-icon-theme.changeFileColor
    // - material-icon-theme.changeFolderColor
    // - material-icon-theme.changeFolderTheme
    // - material-icon-theme.changeOpacity
    // - material-icon-theme.changeSaturation
    // - material-icon-theme.restoreDefaultConfig
    // - material-icon-theme.toggleExplorerArrows
    // - material-icon-theme.toggleGrayscale
    // - material-icon-theme.toggleIconPacks
    // - maven.archetype.generate
    // - maven.archetype.update
    // - maven.dependency.goToEffective
    // - maven.explorer.refresh
    // - maven.favorites
    // - maven.goal.clean
    // - maven.goal.compile
    // - maven.goal.custom
    // - maven.goal.deploy
    // - maven.goal.execute
    // - maven.goal.execute.fromFavoritesMenu
    // - maven.goal.execute.fromLifecycleMenu
    // - maven.goal.execute.fromProjectManager
    // - maven.goal.install
    // - maven.goal.package
    // - maven.goal.site
    // - maven.goal.test
    // - maven.goal.test-compile
    // - maven.goal.validate
    // - maven.goal.verify
    // - maven.history
    // - maven.java.projectConfiguration.update
    // - maven.new.module
    // - maven.plugin.debug
    // - maven.plugin.execute
    // - maven.profile.deselect
    // - maven.profile.select
    // - maven.project.addDependency
    // - maven.project.addFavorite
    // - maven.project.effectivePom
    // - maven.project.excludeDependency
    // - maven.project.goToDefinition
    // - maven.project.openPom
    // - maven.project.setDependencyVersion
    // - maven.project.showDependencies
    // - maven.view.flat
    // - maven.view.hierarchical
    // - mavenProjects.focus
    // - mavenProjects.resetViewLocation
    // - menu.resetHiddenStates
    // - merge-conflict.accept.all-both
    // - merge-conflict.accept.all-current
    // - merge-conflict.accept.all-incoming
    // - merge-conflict.accept.both
    // - merge-conflict.accept.current
    // - merge-conflict.accept.incoming
    // - merge-conflict.accept.selection
    // - merge-conflict.compare
    // - merge-conflict.next
    // - merge-conflict.previous
    // - merge.acceptAllInput1
    // - merge.acceptAllInput2
    // - merge.columnLayout
    // - merge.dev.copyContentsJson
    // - merge.dev.loadContentsFromFolder
    // - merge.dev.openContentsJson
    // - merge.dev.openSelectionInTemporaryMergeEditor
    // - merge.dev.saveContentsToFolder
    // - merge.goToNextUnhandledConflict
    // - merge.goToPreviousUnhandledConflict
    // - merge.mixedLayout
    // - merge.openBaseEditor
    // - merge.openResult
    // - merge.showBase
    // - merge.showBaseCenter
    // - merge.showBaseTop
    // - merge.showNonConflictingChanges
    // - merge.toggleActiveConflictInput1
    // - merge.toggleActiveConflictInput2
    // - mergeEditor.acceptMerge
    // - mergeEditor.compareInput1WithBase
    // - mergeEditor.compareInput2WithBase
    // - mergeEditor.resetCloseWithConflictsChoice
    // - mergeEditor.resetResultToBaseAndAutoMerge
    // - monokai_pro.activate_icons
    // - monokai_pro.enter_license
    // - monokai_pro.select_theme
    // - multiDiffEditor.collapseAll
    // - multiDiffEditor.expandAll
    // - multiDiffEditor.goToFile
    // - noop
    // - notebook.action.changeTabDisplaySize
    // - notebook.action.convertIndentationToSpaces
    // - notebook.action.convertIndentationToTabs
    // - notebook.action.indentUsingSpaces
    // - notebook.action.indentUsingTabs
    // - notebook.action.toggleNotebookStickyScroll
    // - notebook.cancelExecution
    // - notebook.cell.cancelExecution
    // - notebook.cell.changeLanguage
    // - notebook.cell.chat.close
    // - notebook.cell.chat.restore
    // - notebook.cell.chat.startAtTop
    // - notebook.cell.chat.stop
    // - notebook.cell.collapseAllCellInputs
    // - notebook.cell.collapseAllCellOutputs
    // - notebook.cell.executeCellAndBelow
    // - notebook.cell.executeCellsAbove
    // - notebook.cell.expandAllCellInputs
    // - notebook.cell.expandAllCellOutputs
    // - notebook.cell.insertCodeCellAtTop
    // - notebook.cell.insertMarkdownCellAbove
    // - notebook.cell.insertMarkdownCellAtTop
    // - notebook.cell.insertMarkdownCellBelow
    // - notebook.cell.joinSelected
    // - notebook.cellOutput.copy
    // - notebook.cellOutput.openInTextEditor
    // - notebook.clearAllCellsOutputs
    // - notebook.clearNotebookEdtitorTypeCache
    // - notebook.clearNotebookKernelsMRUCache
    // - notebook.diff.cell.revertInput
    // - notebook.diff.cell.revertMetadata
    // - notebook.diff.cell.revertOutputs
    // - notebook.diff.cell.switchOutputRenderingStyleToText
    // - notebook.diff.showMetadata
    // - notebook.diff.showOutputs
    // - notebook.diff.switchToText
    // - notebook.execute
    // - notebook.inspectLayout
    // - notebook.interruptExecution
    // - notebook.outline.toggleCodeCellSymbols
    // - notebook.outline.toggleCodeCells
    // - notebook.outline.toggleShowMarkdownHeadersOnly
    // - notebook.renderAllMarkdownCells
    // - notebook.revealLastFailedCell
    // - notebook.revealRunningCell
    // - notebook.saveMimeTypeOrder
    // - notebook.section.expandSection
    // - notebook.section.foldSection
    // - notebook.section.runCells
    // - notebook.section.runSingleCell
    // - notebook.selectIndentation
    // - notebook.setProfile
    // - notebook.toggleCellToolbarPosition
    // - notebook.toggleCellToolbarPositionFromEditorTitle
    // - notebook.toggleLayoutTroubleshoot
    // - notebook.toggleLineNumbersFromEditorTitle
    // - notifications.clearAll
    // - notifications.focusToasts
    // - notifications.toggleDoNotDisturbMode
    // - notifications.toggleDoNotDisturbModeBySource
    // - notifications.toggleList
    // - npm-intellisense.import
    // - npm.debugScript
    // - npm.focus
    // - npm.openScript
    // - npm.packageManager
    // - npm.refresh
    // - npm.resetViewLocation
    // - npm.runInstall
    // - npm.runScript
    // - npm.runScriptFromFolder
    // - npm.runSelectedScript
    // - oneDarkPro.cancelBold
    // - oneDarkPro.cancelItalic
    // - oneDarkPro.cancelVivid
    // - oneDarkPro.setBold
    // - oneDarkPro.setItalic
    // - oneDarkPro.setVivid
    // - oneDarkPro.showChangelog
    // - openEditors.closeAll
    // - openEditors.newUntitledFile
    // - openInIntegratedTerminal
    // - openInTerminal
    // - openReference
    // - outline.collapse
    // - outline.expand
    // - outline.filterOnType
    // - outline.focus
    // - outline.followCursor
    // - outline.removeView
    // - outline.resetViewLocation
    // - outline.sortByKind
    // - outline.sortByName
    // - outline.sortByPosition
    // - outline.toggleVisibility
    // - paste
    // - perf.event.profiling
    // - perf.insta.printAsyncCycles
    // - perf.insta.printTraces
    // - perfview.show
    // - phpprofiler.loadprofile
    // - phpprofiler.openfile
    // - phptools.activate
    // - phptools.activatewindow
    // - phptools.clearVendorCache
    // - phptools.completeparen
    // - phptools.debug.debugScript
    // - phptools.debug.runScript
    // - phptools.debug.startListen
    // - phptools.fqnClass
    // - phptools.importClass
    // - phptools.problems.scope
    // - phptools.releasenotes
    // - phptools.requesttrial
    // - phptools.selectLanguage
    // - phptools.selectPhpVersion
    // - phptools.stubs
    // - phptools.stubs.add
    // - phptools.todo.search
    // - phpunit.filter
    // - phpunit.testsuite
    // - plantuml.URLCurrent
    // - plantuml.URLDocument
    // - plantuml.exportCurrent
    // - plantuml.exportDocument
    // - plantuml.exportWorkspace
    // - plantuml.extractSource
    // - pr.acceptMerge
    // - pr.addAssigneesToNewPr
    // - pr.addFileComment
    // - pr.addLabelsToNewPr
    // - pr.addMilestoneToNewPr
    // - pr.addProjectsToNewPr
    // - pr.addReviewersToNewPr
    // - pr.applySuggestion
    // - pr.cancelEditComment
    // - pr.checkoutByNumber
    // - pr.checkoutFromReadonlyFile
    // - pr.close
    // - pr.collapseAllComments
    // - pr.configurePRViewlet
    // - pr.configureRemotes
    // - pr.copyCommentLink
    // - pr.copyCommitHash
    // - pr.copyVscodeDevPrLink
    // - pr.create
    // - pr.createComment
    // - pr.createPrMenuCreate
    // - pr.createPrMenuDraft
    // - pr.createPrMenuMerge
    // - pr.createPrMenuMergeWhenReady
    // - pr.createPrMenuRebase
    // - pr.createPrMenuSquash
    // - pr.createSingleComment
    // - pr.deleteComment
    // - pr.deleteLocalBranch
    // - pr.deleteLocalBranchesNRemotes
    // - pr.diffOutdatedCommentWithHead
    // - pr.dismissNotification
    // - pr.editComment
    // - pr.editQuery
    // - pr.exit
    // - pr.focusDescriptionInput
    // - pr.goToNextDiffInPr
    // - pr.goToPreviousDiffInPr
    // - pr.loadMore
    // - pr.markFileAsViewed
    // - pr.merge
    // - pr.openAllDiffs
    // - pr.openChanges
    // - pr.openDescription
    // - pr.openDescriptionToTheSide
    // - pr.openDiffView
    // - pr.openDiffViewFromEditor
    // - pr.openFileOnGitHub
    // - pr.openModifiedFile
    // - pr.openOriginalFile
    // - pr.openPullRequestOnGitHub
    // - pr.openPullsWebsite
    // - pr.openReview
    // - pr.pick
    // - pr.pickOnVscodeDev
    // - pr.preReview
    // - pr.pushAndCreate
    // - pr.readyForReview
    // - pr.refreshActivePullRequest
    // - pr.refreshChanges
    // - pr.refreshComments
    // - pr.refreshDescription
    // - pr.refreshList
    // - pr.refreshPullRequest
    // - pr.resetViewedFiles
    // - pr.resolveConflict
    // - pr.resolveReviewThread
    // - pr.saveComment
    // - pr.setFileListLayoutAsFlat
    // - pr.setFileListLayoutAsTree
    // - pr.showDiffAll
    // - pr.showDiffSinceLastReview
    // - pr.signin
    // - pr.signinAndRefreshList
    // - pr.signinNoEnterprise
    // - pr.signinenterprise
    // - pr.startReview
    // - pr.unmarkFileAsViewed
    // - pr.unresolveReviewThread
    // - pr.unresolveReviewThreadFromView
    // - pr:github.focus
    // - pr:github.resetViewLocation
    // - prStatus:github.focus
    // - prStatus:github.resetViewLocation
    // - prettier.createConfigFile
    // - prettier.forceFormatDocument
    // - prettier.openOutput
    // - problems.action.copyMessage
    // - problems.action.copyRelatedInformationMessage
    // - problems.action.showMultilineMessage
    // - problems.action.showSinglelineMessage
    // - pub.get
    // - pub.get.all
    // - pub.outdated
    // - pub.upgrade
    // - pub.upgrade.majorVersions
    // - pugbeautify.execute
    // - pylance.dumpCachedTypes
    // - pylance.dumpCodeFlowGraph
    // - pylance.dumpNodes
    // - pylance.dumpTokens
    // - pylance.dumpTypes
    // - pylance.gotoOutputChannel
    // - pylance.indexing.clearPersistedIndices
    // - pylance.learnMoreAboutImportResolution
    // - pylance.logging.start
    // - pylance.logging.stop
    // - pylance.profiling.start
    // - pylance.profiling.stop
    // - pylance.reportIssue
    // - python.analysis.restartLanguageServer
    // - python.clearCacheAndReload
    // - python.clearWorkspaceInterpreter
    // - python.configureTests
    // - python.createEnvironment
    // - python.createEnvironment-button
    // - python.createNewFile
    // - python.createTerminal
    // - python.enableSourceMapSupport
    // - python.execInDedicatedTerminal
    // - python.execInTerminal
    // - python.execInTerminal-icon
    // - python.execSelectionInDjangoShell
    // - python.installJupyter
    // - python.launchTensorBoard
    // - python.reportIssue
    // - python.setInterpreter
    // - python.startREPL
    // - python.viewLanguageServerOutput
    // - python.viewOutput
    // - rainbow-csv.Align
    // - rainbow-csv.CSVLint
    // - rainbow-csv.ColumnEditAfter
    // - rainbow-csv.ColumnEditBefore
    // - rainbow-csv.ColumnEditSelect
    // - rainbow-csv.CopyBack
    // - rainbow-csv.InternalTest
    // - rainbow-csv.RBQL
    // - rainbow-csv.RainbowSeparator
    // - rainbow-csv.RainbowSeparatorOff
    // - rainbow-csv.RainbowSeparatorOn
    // - rainbow-csv.SampleHead
    // - rainbow-csv.SampleTail
    // - rainbow-csv.SetCommentPrefix
    // - rainbow-csv.SetHeaderLine
    // - rainbow-csv.SetJoinTableName
    // - rainbow-csv.SetVirtualHeader
    // - rainbow-csv.Shrink
    // - reactNative.ExpoDoctor
    // - reactNative.createExpoEASBuildConfigFile
    // - reactNative.debugScenario.attachDirectIosExperimental
    // - reactNative.debugScenario.attachHermesApplicationExperimental
    // - reactNative.debugScenario.attachToPackager
    // - reactNative.debugScenario.debugAndroid
    // - reactNative.debugScenario.debugAndroidHermesExperimental
    // - reactNative.debugScenario.debugDirectIosExperimental
    // - reactNative.debugScenario.debugInExponent
    // - reactNative.debugScenario.debugInExponentWebExperimental
    // - reactNative.debugScenario.debugInHermesExponentExperimental
    // - reactNative.debugScenario.debugIos
    // - reactNative.debugScenario.debugIosHermesExperimental
    // - reactNative.debugScenario.debugMacos
    // - reactNative.debugScenario.debugMacosHermesExperimental
    // - reactNative.debugScenario.debugWindows
    // - reactNative.debugScenario.debugWindowsHermesExperimental
    // - reactNative.debugScenario.runAndroid
    // - reactNative.debugScenario.runAndroidHermesExperimental
    // - reactNative.debugScenario.runDirectIosExperimental
    // - reactNative.debugScenario.runIos
    // - reactNative.debugScenario.runIosHermesExperimental
    // - reactNative.doctor
    // - reactNative.installExpoGoApplication
    // - reactNative.launchAndroidSimulator
    // - reactNative.launchExpoWeb
    // - reactNative.launchIOSSimulator
    // - reactNative.openEASProjectInWebPage
    // - reactNative.openRNUpgradeHelper
    // - reactNative.publishToExpHost
    // - reactNative.reloadApp
    // - reactNative.restartPackager
    // - reactNative.revertOpenModule
    // - reactNative.runAndroidDevice
    // - reactNative.runAndroidSimulator
    // - reactNative.runExponent
    // - reactNative.runInspector
    // - reactNative.runIosDevice
    // - reactNative.runIosSimulator
    // - reactNative.runMacOS
    // - reactNative.runWindows
    // - reactNative.selectAndInsertDebugConfiguration
    // - reactNative.showDevMenu
    // - reactNative.startLogCatMonitor
    // - reactNative.startNetworkInspector
    // - reactNative.startPackager
    // - reactNative.stopInspector
    // - reactNative.stopLogCatMonitor
    // - reactNative.stopNetworkInspector
    // - reactNative.stopPackager
    // - reactNative.testDevEnvironment
    // - refactorPreview
    // - refactorPreview.discard
    // - refactorPreview.focus
    // - refactorPreview.groupByFile
    // - refactorPreview.groupByType
    // - refactorPreview.resetViewContainerLocation
    // - refactorPreview.resetViewLocation
    // - refactorPreview.toggleGrouping
    // - references-view.clear
    // - references-view.clearHistory
    // - references-view.copy
    // - references-view.copyAll
    // - references-view.copyPath
    // - references-view.findImplementations
    // - references-view.pickFromHistory
    // - references-view.refind
    // - references-view.refresh
    // - references-view.removeCallItem
    // - references-view.removeReferenceItem
    // - references-view.removeTypeItem
    // - references-view.showIncomingCalls
    // - references-view.showOutgoingCalls
    // - references-view.showSubtypes
    // - references-view.showSupertypes
    // - references-view.showTypeHierarchy
    // - references-view.tree.focus
    // - references-view.tree.resetViewLocation
    // - remote-containers.addExtensionToConfig
    // - remote-containers.attachToContainerInCurrentWindow
    // - remote-containers.attachToContainerInNewWindow
    // - remote-containers.attachToK8sContainerFromViewlet
    // - remote-containers.attachToRunningContainer
    // - remote-containers.attachToRunningContainerFromViewlet
    // - remote-containers.checkoutPRInVolume
    // - remote-containers.cleanUpDevContainers
    // - remote-containers.cloneInVolume
    // - remote-containers.cloneInVolumeFromViewlet
    // - remote-containers.cloneRepositoryInVolumeFromViewlet
    // - remote-containers.configureContainerFeatures
    // - remote-containers.createDevContainer
    // - remote-containers.createDevContainerFile
    // - remote-containers.editDevContainerJSON
    // - remote-containers.explorerDetailsRefresh
    // - remote-containers.explorerTargetsRefresh
    // - remote-containers.explorerVolumesRefresh
    // - remote-containers.getHelp
    // - remote-containers.getStarted
    // - remote-containers.inspectDockerResource
    // - remote-containers.inspectInBasicDevContainer
    // - remote-containers.inspectVolume
    // - remote-containers.inspectVolumeFromViewlet
    // - remote-containers.installDocker
    // - remote-containers.installDockerInWSL
    // - remote-containers.installUserCLI
    // - remote-containers.labelPortAndUpdateConfig
    // - remote-containers.newContainer
    // - remote-containers.openAttachConfigByNameFile
    // - remote-containers.openAttachDevContainerFile
    // - remote-containers.openDevContainerFile
    // - remote-containers.openFolder
    // - remote-containers.openFolderInContainerInCurrentWindow
    // - remote-containers.openFolderInContainerInNewWindow
    // - remote-containers.openInformationAboutMountPerformance
    // - remote-containers.openLastLogFile
    // - remote-containers.openLogFile
    // - remote-containers.openPullRequestInVolume
    // - remote-containers.openRepositoryFromGitWithEditSession
    // - remote-containers.openRepositoryFromRemoteHubWithEditSession
    // - remote-containers.openRepositoryInUniqueVolume
    // - remote-containers.openRepositoryInVolume
    // - remote-containers.openWorkspace
    // - remote-containers.provideFeedback
    // - remote-containers.pruneVolumes
    // - remote-containers.rebuildAndReopenInContainer
    // - remote-containers.rebuildContainer
    // - remote-containers.rebuildContainerNoCache
    // - remote-containers.rebuildNoCacheAndReopenInContainer
    // - remote-containers.removeContainer
    // - remote-containers.removeRecentFolder
    // - remote-containers.removeVolume
    // - remote-containers.reopenInContainer
    // - remote-containers.reopenInSSH
    // - remote-containers.reopenInTunnel
    // - remote-containers.reopenInWSL
    // - remote-containers.reopenLocally
    // - remote-containers.reportIssue
    // - remote-containers.revealLogTerminal
    // - remote-containers.revealPostCreateTerminal
    // - remote-containers.settings
    // - remote-containers.showContainerLog
    // - remote-containers.showDetails
    // - remote-containers.showRecoveryContainerNotificationReset
    // - remote-containers.showReopenInContainerNotificationReset
    // - remote-containers.startContainer
    // - remote-containers.stopContainer
    // - remote-containers.switchContainer
    // - remote-containers.trySample
    // - remote.tunnel.changeLocalPort
    // - remote.tunnel.closeCommandPalette
    // - remote.tunnel.copyAddressCommandPalette
    // - remote.tunnel.forwardCommandPalette
    // - remote.tunnel.forwardInline
    // - remote.tunnel.open
    // - remote.tunnel.openCommandPalette
    // - remote.tunnel.openPreview
    // - remote.tunnel.setProtocolHttp
    // - remote.tunnel.setProtocolHttps
    // - removeRootFolder
    // - repl.action.copyAll
    // - repl.newRepl
    // - replacePreviousChar
    // - resetGettingStartedProgress
    // - rest-client.clear-aad-token-cache
    // - rest-client.clear-history
    // - rest-client.copy-codesnippet
    // - rest-client.copy-request-as-curl
    // - rest-client.copy-response-body
    // - rest-client.fold-response
    // - rest-client.save-response
    // - rest-client.save-response-body
    // - rest-client.unfold-response
    // - revealInExplorer
    // - review.approve
    // - review.approveDescription
    // - review.approveOnDotCom
    // - review.approveOnDotComDescription
    // - review.comment
    // - review.commentDescription
    // - review.diffLocalWithPrHead
    // - review.diffWithPrHead
    // - review.openFile
    // - review.openLocalFile
    // - review.requestChanges
    // - review.requestChangesDescription
    // - review.requestChangesOnDotCom
    // - review.requestChangesOnDotComDescription
    // - review.suggestDiff
    // - scm.openInIntegratedTerminal
    // - scm.openInTerminal
    // - scrollEditorBottom
    // - scrollEditorTop
    // - scrollLeft
    // - scrollRight
    // - search.action.clearHistory
    // - search.action.clearSearchResults
    // - search.action.collapseSearchResults
    // - search.action.copyAll
    // - search.action.excludeFromSearch
    // - search.action.expandRecursively
    // - search.action.expandSearchResults
    // - search.action.focusFilesToExclude
    // - search.action.focusFilesToInclude
    // - search.action.focusSearchList
    // - search.action.openEditor
    // - search.action.openNewEditor
    // - search.action.openNewEditorFromView
    // - search.action.openNewEditorToSide
    // - search.action.refreshSearchResults
    // - search.action.revealInSideBar
    // - search.action.viewAsList
    // - search.action.viewAsTree
    // - selectFirstSuggestion
    // - selectForCompare
    // - selectLastSuggestion
    // - setRootFolder
    // - setSelection
    // - settings.filterByOnline
    // - settings.filterByTelemetry
    // - settings.filterUntrusted
    // - settings.switchToJSON
    // - showCustomTitleBar
    // - showEditorScreenReaderNotification
    // - signals.sounds.help
    // - simpleBrowser.show
    // - solidity-va-cockpit-explorer.focus
    // - solidity-va-cockpit-explorer.removeView
    // - solidity-va-cockpit-explorer.resetViewLocation
    // - solidity-va-cockpit-explorer.toggleVisibility
    // - solidity-va-cockpit-externalCalls.focus
    // - solidity-va-cockpit-externalCalls.removeView
    // - solidity-va-cockpit-externalCalls.resetViewLocation
    // - solidity-va-cockpit-externalCalls.toggleVisibility
    // - solidity-va-cockpit-flatFiles.focus
    // - solidity-va-cockpit-flatFiles.removeView
    // - solidity-va-cockpit-flatFiles.resetViewLocation
    // - solidity-va-cockpit-flatFiles.toggleVisibility
    // - solidity-va-cockpit-ftrace.focus
    // - solidity-va-cockpit-ftrace.removeView
    // - solidity-va-cockpit-ftrace.resetViewLocation
    // - solidity-va-cockpit-ftrace.toggleVisibility
    // - solidity-va-cockpit-publicMethods.focus
    // - solidity-va-cockpit-publicMethods.removeView
    // - solidity-va-cockpit-publicMethods.resetViewLocation
    // - solidity-va-cockpit-publicMethods.toggleVisibility
    // - solidity-va-cockpit-settings.focus
    // - solidity-va-cockpit-settings.removeView
    // - solidity-va-cockpit-settings.resetViewLocation
    // - solidity-va-cockpit-settings.toggleVisibility
    // - solidity-va-cockpit-topLevelContracts.focus
    // - solidity-va-cockpit-topLevelContracts.removeView
    // - solidity-va-cockpit-topLevelContracts.resetViewLocation
    // - solidity-va-cockpit-topLevelContracts.toggleVisibility
    // - solidity-va.cockpit.explorer.context.flatten
    // - solidity-va.cockpit.explorer.refresh
    // - solidity-va.cockpit.flatFiles.refresh
    // - solidity-va.cockpit.settings.toggle
    // - solidity-va.cockpit.topLevelContracts.flatten
    // - solidity-va.cockpit.topLevelContracts.refresh
    // - solidity-va.etherscan.getSource
    // - solidity-va.insights.topLevelContracts
    // - solidity-va.surya.describe
    // - solidity-va.surya.graph
    // - solidity-va.surya.graphSimple
    // - solidity-va.surya.graphThis
    // - solidity-va.surya.inheritance
    // - solidity-va.surya.mdreport
    // - solidity-va.test.createTemplate
    // - solidity-va.tools.flaterra
    // - solidity-va.tools.flattenCandidates
    // - solidity-va.tools.function.signatures
    // - solidity-va.tools.function.signatures.forWorkspace
    // - solidity-va.tools.function.signatures.forWorkspace.json
    // - solidity-va.tools.function.signatures.json
    // - solidity-va.tools.remix.openExternal
    // - solidity-va.whatsNew.show
    // - solidity.changeDefaultCompilerType
    // - solidity.codeGenFromNethereumGenAbisFile
    // - solidity.codegenCSharpProject
    // - solidity.codegenCSharpProjectAll
    // - solidity.codegenCSharpProjectAllAbiCurrent
    // - solidity.codegenFSharpProject
    // - solidity.codegenFSharpProjectAll
    // - solidity.codegenFSharpProjectAllAbiCurrent
    // - solidity.codegenNethereumCodeGenSettings
    // - solidity.codegenVbNetProject
    // - solidity.codegenVbNetProjectAll
    // - solidity.codegenVbNetProjectAllAbiCurrent
    // - solidity.compile.activeUsingLocalFile
    // - solidity.compile.activeUsingNodeModule
    // - solidity.compile.activeUsingRemote
    // - solidity.compileAndCodegenCSharpProject
    // - solidity.compileAndCodegenFSharpProject
    // - solidity.compileAndCodegenVbNetProject
    // - solidity.compilerInfo
    // - solidity.downloadRemoteSolcVersion
    // - solidity.downloadRemoteVersionAndSetLocalPathSetting
    // - solidity.downloadVerifiedSmartContractEtherscan
    // - solidity.fixDocument
    // - solidity.selectGlobalRemoteSolcVersion
    // - solidity.selectWorkspaceRemoteSolcVersion
    // - solidity.solcReleases
    // - sqltools.aboutVersion
    // - sqltools.addConnection
    // - sqltools.attachFileToConnection
    // - sqltools.clearBookmarks
    // - sqltools.clearHistory
    // - sqltools.closeConnection
    // - sqltools.copyText
    // - sqltools.deleteConnection
    // - sqltools.describeFunction
    // - sqltools.detachConnectionFromFile
    // - sqltools.editBookmark
    // - sqltools.editHistory
    // - sqltools.executeCurrentQuery
    // - sqltools.executeFromInput
    // - sqltools.executeQueryFromFile
    // - sqltools.generateInsertQuery
    // - sqltools.getChildrenForTreeItem
    // - sqltools.getConnections
    // - sqltools.getInsertQuery
    // - sqltools.insertText
    // - sqltools.newSqlFile
    // - sqltools.openAddConnectionScreen
    // - sqltools.openDocs
    // - sqltools.openEditConnectionScreen
    // - sqltools.openResults
    // - sqltools.openSettings
    // - sqltools.refreshTree
    // - sqltools.saveResults
    // - sqltools.selectConnection
    // - sqltools.setSelection
    // - sqltools.showOutputChannel
    // - sqltools.testConnection
    // - sqltools.updateConnection
    // - sqltoolsViewBookmarksExplorer.focus
    // - sqltoolsViewBookmarksExplorer.removeView
    // - sqltoolsViewBookmarksExplorer.resetViewLocation
    // - sqltoolsViewBookmarksExplorer.toggleVisibility
    // - sqltoolsViewConnectionExplorer.focus
    // - sqltoolsViewConnectionExplorer.removeView
    // - sqltoolsViewConnectionExplorer.resetViewLocation
    // - sqltoolsViewConnectionExplorer.toggleVisibility
    // - sqltoolsViewConsoleMessages.focus
    // - sqltoolsViewConsoleMessages.removeView
    // - sqltoolsViewConsoleMessages.resetViewLocation
    // - sqltoolsViewConsoleMessages.toggleVisibility
    // - sqltoolsViewHistoryExplorer.focus
    // - sqltoolsViewHistoryExplorer.removeView
    // - sqltoolsViewHistoryExplorer.resetViewLocation
    // - sqltoolsViewHistoryExplorer.toggleVisibility
    // - switchToPrivateFTModels
    // - tailwindCSS.showOutput
    // - tailwindCSS.sortSelection
    // - targetsContainers.focus
    // - targetsContainers.resetViewLocation
    // - terminal.focus
    // - terminal.removeView
    // - terminal.resetViewContainerLocation
    // - terminal.resetViewLocation
    // - terminal.toggleVisibility
    // - testing.cancelTestRefresh
    // - testing.clearTestResults
    // - testing.collapseAll
    // - testing.configureProfile
    // - testing.continuousRunUsingForTest
    // - testing.coverage
    // - testing.coverage.close
    // - testing.coverage.uri
    // - testing.coverageFilterToTest
    // - testing.coverageFilterToTestInEditor
    // - testing.coverageSelected
    // - testing.coverageToggleToolbar
    // - testing.coverageViewChangeSorting
    // - testing.debug
    // - testing.debug.uri
    // - testing.debugSelected
    // - testing.getSelectedProfiles
    // - testing.hideTest
    // - testing.openCoverage
    // - testing.openMessageInEditor
    // - testing.run
    // - testing.run.uri
    // - testing.runSelected
    // - testing.runUsing
    // - testing.searchForTestExtension
    // - testing.selectDefaultTestProfiles
    // - testing.sortByDuration
    // - testing.sortByLocation
    // - testing.sortByStatus
    // - testing.startContinuousRun
    // - testing.stopContinuousRun
    // - testing.toggleContinuousRunForTest
    // - testing.unhideAllTests
    // - testing.unhideTest
    // - testing.viewAsList
    // - testing.viewAsTree
    // - thunder-client-sidebar.focus
    // - thunder-client-sidebar.removeView
    // - thunder-client-sidebar.resetViewLocation
    // - thunder-client-sidebar.toggleVisibility
    // - thunder-client.account
    // - thunder-client.change-multi-workspace
    // - thunder-client.convert-postman
    // - thunder-client.cookies
    // - thunder-client.debug
    // - thunder-client.dns-test
    // - thunder-client.new-request
    // - thunder-client.open-docs
    // - thunder-client.open-settings
    // - thunder-client.release-notes
    // - thunder-client.reload-sidebar
    // - thunder-client.reset-sort
    // - thunder-client.run-last-request
    // - thunder-client.save-to-workspace
    // - thunder-client.show-logs
    // - thunder-client.upgrade-v4
    // - timeline.focus
    // - timeline.refresh
    // - timeline.removeView
    // - timeline.resetViewLocation
    // - timeline.toggleExcludeSource:git-history
    // - timeline.toggleExcludeSource:timeline.localHistory
    // - timeline.toggleFollowActiveEditor
    // - timeline.toggleVisibility
    // - toggle.diff.ignoreTrimWhitespace
    // - toggle.diff.renderSideBySide
    // - toggle.toggleCustomTitleBar
    // - toggle.window.commandCenter
    // - toggle.window.customTitleBarVisibility
    // - toggle.window.customTitleBarVisibility.windowed
    // - toggle.workbench.editor.editorActionsLocation
    // - toggle.workbench.layoutControl.enabled
    // - tooltip.close.register
    // - tree.toggleStickyScroll
    // - tunnel-forwarding.restart
    // - tunnel-forwarding.showLog
    // - typescript.findAllFileReferences
    // - typescript.goToProjectConfig
    // - typescript.goToSourceDefinition
    // - typescript.openTsServerLog
    // - typescript.reloadProjects
    // - typescript.removeUnusedImports
    // - typescript.restartTsServer
    // - typescript.selectTypeScriptVersion
    // - typescript.sortImports
    // - typescript.tsserverRequest
    // - update.check
    // - update.checkForUpdate
    // - update.checking
    // - update.downloadNow
    // - update.downloadUpdate
    // - update.downloading
    // - update.install
    // - update.installUpdate
    // - update.restart
    // - update.restartToUpdate
    // - update.showCurrentReleaseNotes
    // - update.showUpdateReleaseNotes
    // - update.updating
    // - userDataProfiles
    // - userDataProfiles.resetViewContainerLocation
    // - variables.collapse
    // - versionlens.icons.hidePrereleaseVersions
    // - versionlens.icons.hideVersionLenses
    // - versionlens.icons.showError
    // - versionlens.icons.showPrereleaseVersions
    // - versionlens.icons.showVersionLenses
    // - versionlens.icons.showingProgress
    // - versionlens.suggestions.clearCache
    // - vscode-docker.activateRegistryProviders
    // - vscode-docker.compose.down
    // - vscode-docker.compose.restart
    // - vscode-docker.compose.up
    // - vscode-docker.compose.up.subset
    // - vscode-docker.configure
    // - vscode-docker.configureCompose
    // - vscode-docker.containers.attachShell
    // - vscode-docker.containers.browse
    // - vscode-docker.containers.composeGroup.down
    // - vscode-docker.containers.composeGroup.logs
    // - vscode-docker.containers.composeGroup.restart
    // - vscode-docker.containers.composeGroup.start
    // - vscode-docker.containers.composeGroup.stop
    // - vscode-docker.containers.configureExplorer
    // - vscode-docker.containers.downloadFile
    // - vscode-docker.containers.group.remove
    // - vscode-docker.containers.inspect
    // - vscode-docker.containers.openFile
    // - vscode-docker.containers.prune
    // - vscode-docker.containers.refresh
    // - vscode-docker.containers.remove
    // - vscode-docker.containers.restart
    // - vscode-docker.containers.select
    // - vscode-docker.containers.start
    // - vscode-docker.containers.stats
    // - vscode-docker.containers.stop
    // - vscode-docker.containers.viewLogs
    // - vscode-docker.contexts.configureExplorer
    // - vscode-docker.contexts.help
    // - vscode-docker.contexts.inspect
    // - vscode-docker.contexts.refresh
    // - vscode-docker.contexts.remove
    // - vscode-docker.contexts.use
    // - vscode-docker.debugging.initializeForDebugging
    // - vscode-docker.help
    // - vscode-docker.help.openWalkthrough
    // - vscode-docker.help.reportIssue
    // - vscode-docker.images.build
    // - vscode-docker.images.configureExplorer
    // - vscode-docker.images.copyFullTag
    // - vscode-docker.images.group.remove
    // - vscode-docker.images.hideDangling
    // - vscode-docker.images.inspect
    // - vscode-docker.images.prune
    // - vscode-docker.images.pull
    // - vscode-docker.images.push
    // - vscode-docker.images.refresh
    // - vscode-docker.images.remove
    // - vscode-docker.images.run
    // - vscode-docker.images.runAzureCli
    // - vscode-docker.images.runInteractive
    // - vscode-docker.images.showDangling
    // - vscode-docker.images.tag
    // - vscode-docker.networks.configureExplorer
    // - vscode-docker.networks.create
    // - vscode-docker.networks.inspect
    // - vscode-docker.networks.prune
    // - vscode-docker.networks.refresh
    // - vscode-docker.networks.remove
    // - vscode-docker.openDockerDownloadPage
    // - vscode-docker.pruneSystem
    // - vscode-docker.registries.azure.buildImage
    // - vscode-docker.registries.azure.createRegistry
    // - vscode-docker.registries.azure.deleteRegistry
    // - vscode-docker.registries.azure.deleteRepository
    // - vscode-docker.registries.azure.openInPortal
    // - vscode-docker.registries.azure.untagImage
    // - vscode-docker.registries.azure.viewProperties
    // - vscode-docker.registries.connectRegistry
    // - vscode-docker.registries.copyImageDigest
    // - vscode-docker.registries.copyRemoteFullTag
    // - vscode-docker.registries.deleteImage
    // - vscode-docker.registries.deployImageToAca
    // - vscode-docker.registries.deployImageToAzure
    // - vscode-docker.registries.disconnectRegistry
    // - vscode-docker.registries.dockerHub.openInBrowser
    // - vscode-docker.registries.genericV2.addTrackedRegistry
    // - vscode-docker.registries.genericV2.removeTrackedRegistry
    // - vscode-docker.registries.help
    // - vscode-docker.registries.inspectRemoteImageManifest
    // - vscode-docker.registries.logInToDockerCli
    // - vscode-docker.registries.logOutOfDockerCli
    // - vscode-docker.registries.pullImage
    // - vscode-docker.registries.pullRepository
    // - vscode-docker.registries.reconnectRegistry
    // - vscode-docker.registries.refresh
    // - vscode-docker.views.dockerContexts.focus
    // - vscode-docker.views.dockerContexts.removeView
    // - vscode-docker.views.dockerContexts.resetViewLocation
    // - vscode-docker.views.dockerContexts.toggleVisibility
    // - vscode-docker.views.help.focus
    // - vscode-docker.views.help.removeView
    // - vscode-docker.views.help.resetViewLocation
    // - vscode-docker.views.help.toggleVisibility
    // - vscode-docker.volumes.configureExplorer
    // - vscode-docker.volumes.inspect
    // - vscode-docker.volumes.prune
    // - vscode-docker.volumes.refresh
    // - vscode-docker.volumes.remove
    // - vscode-ethover.account.getCode
    // - vscode-ethover.activeFile.evmjs.getDecompiledByteCode
    // - vscode-ethover.activeFile.getDisassembledByteCode
    // - vscode-ethover.ui.eveem.getDecompiledSourceCode
    // - vscode-ethover.ui.evmjs.getDecompiledSourceCode
    // - vscode-ethover.ui.getByteCode
    // - vscode-ethover.ui.getDecompiledSourceCode
    // - vscode-ethover.ui.getDisassembledByteCode
    // - vscode-ethover.ui.getVerifiedSource
    // - vscode-solidity-flattener.activeFile.flatten
    // - vscode-solidity-flattener.contextMenu.flatten
    // - vscode-solidity-flattener.flatten
    // - vue.action.doctor
    // - vue.action.restartServer
    // - vue.action.splitEditors
    // - vue.action.writeVirtualFiles
    // - watch.collapse
    // - workbench.action.acceptSelectedQuickOpenItem
    // - workbench.action.activityBarLocation.bottom
    // - workbench.action.activityBarLocation.default
    // - workbench.action.activityBarLocation.hide
    // - workbench.action.activityBarLocation.top
    // - workbench.action.addRootFolder
    // - workbench.action.alignPanelCenter
    // - workbench.action.alignPanelJustify
    // - workbench.action.alignPanelLeft
    // - workbench.action.alignPanelRight
    // - workbench.action.alternativeAcceptSelectedQuickOpenItem
    // - workbench.action.blur
    // - workbench.action.browseColorThemesInMarketplace
    // - workbench.action.chat.addDynamicVariable
    // - workbench.action.chat.applyCompareEdits
    // - workbench.action.chat.assignSelectedAgent
    // - workbench.action.chat.attachFile
    // - workbench.action.chat.attachSelection
    // - workbench.action.chat.clearHistory
    // - workbench.action.chat.clearInputHistory
    // - workbench.action.chat.copyAll
    // - workbench.action.chat.copyCodeBlock
    // - workbench.action.chat.copyItem
    // - workbench.action.chat.discardCompareEdits
    // - workbench.action.chat.export
    // - workbench.action.chat.history
    // - workbench.action.chat.import
    // - workbench.action.chat.inlineVoiceChat
    // - workbench.action.chat.insertIntoNewFile
    // - workbench.action.chat.insertIntoNotebook
    // - workbench.action.chat.installProviderForSynthesis
    // - workbench.action.chat.installProviderForVoiceChat
    // - workbench.action.chat.logInputHistory
    // - workbench.action.chat.markHelpful
    // - workbench.action.chat.markUnhelpful
    // - workbench.action.chat.openInEditor
    // - workbench.action.chat.openInNewWindow
    // - workbench.action.chat.openInSidebar
    // - workbench.action.chat.quickVoiceChat
    // - workbench.action.chat.readChatResponseAloud
    // - workbench.action.chat.reportIssueForBug
    // - workbench.action.chat.selectAndInsertFile
    // - workbench.action.chat.voiceChatInChatView
    // - workbench.action.chatEditor.newChat
    // - workbench.action.clearCommandHistory
    // - workbench.action.clearEditorHistory
    // - workbench.action.clearLocalePreference
    // - workbench.action.clearRecentFiles
    // - workbench.action.closeActivePinnedEditor
    // - workbench.action.closeEditorInAllGroups
    // - workbench.action.closeEditorsAndGroup
    // - workbench.action.closeEditorsInOtherGroups
    // - workbench.action.closeEditorsToTheLeft
    // - workbench.action.closeEditorsToTheRight
    // - workbench.action.closeOtherEditors
    // - workbench.action.closePanel
    // - workbench.action.closeSidebar
    // - workbench.action.collapseAllComments
    // - workbench.action.compareEditor.focusOtherSide
    // - workbench.action.compareEditor.focusPrimarySide
    // - workbench.action.compareEditor.focusSecondarySide
    // - workbench.action.compareEditor.swapSides
    // - workbench.action.configureLanguageBasedSettings
    // - workbench.action.configureLocale
    // - workbench.action.configureRuntimeArguments
    // - workbench.action.continueOn.extensions
    // - workbench.action.copyEditorGroupToNewWindow
    // - workbench.action.createAIProject
    // - workbench.action.createTerminalEditor
    // - workbench.action.createTerminalEditorSameGroup
    // - workbench.action.createTerminalEditorSide
    // - workbench.action.customizeLayout
    // - workbench.action.debug.callStackBottom
    // - workbench.action.debug.callStackDown
    // - workbench.action.debug.callStackTop
    // - workbench.action.debug.callStackUp
    // - workbench.action.debug.configure
    // - workbench.action.debug.disconnectAndSuspend
    // - workbench.action.debug.focusProcess
    // - workbench.action.debug.recordStepByStep
    // - workbench.action.debug.restartFrame
    // - workbench.action.debug.reverseContinue
    // - workbench.action.debug.selectDebugConsole
    // - workbench.action.debug.selectDebugSession
    // - workbench.action.debug.selectRepl
    // - workbench.action.debug.selectandstart
    // - workbench.action.debug.showLoadedScripts
    // - workbench.action.debug.stepBack
    // - workbench.action.debug.stopRecording
    // - workbench.action.debug.terminateThread
    // - workbench.action.decreaseViewHeight
    // - workbench.action.decreaseViewWidth
    // - workbench.action.disableAutocompletes
    // - workbench.action.download
    // - workbench.action.duplicateActiveEditorGroupDown
    // - workbench.action.duplicateActiveEditorGroupLeft
    // - workbench.action.duplicateActiveEditorGroupRight
    // - workbench.action.duplicateActiveEditorGroupUp
    // - workbench.action.duplicateWorkspaceInNewWindow
    // - workbench.action.editor.changeEOL
    // - workbench.action.editor.changeEncoding
    // - workbench.action.editorActionsDefault
    // - workbench.action.editorActionsTitleBar
    // - workbench.action.editorLayoutSingle
    // - workbench.action.editorLayoutThreeColumns
    // - workbench.action.editorLayoutThreeRows
    // - workbench.action.editorLayoutTwoByTwoGrid
    // - workbench.action.editorLayoutTwoColumns
    // - workbench.action.editorLayoutTwoColumnsBottom
    // - workbench.action.editorLayoutTwoRows
    // - workbench.action.editorLayoutTwoRowsRight
    // - workbench.action.evenEditorWidths
    // - workbench.action.expandAllComments
    // - workbench.action.expandUnresolvedComments
    // - workbench.action.extensionHostProfiler.stop
    // - workbench.action.files.newFile
    // - workbench.action.files.openFileFolderInNewWindow
    // - workbench.action.files.openFileInNewWindow
    // - workbench.action.files.openFolderInNewWindow
    // - workbench.action.files.resetActiveEditorReadonlyInSession
    // - workbench.action.files.revert
    // - workbench.action.files.saveAll
    // - workbench.action.files.saveFiles
    // - workbench.action.files.setActiveEditorReadonlyInSession
    // - workbench.action.files.setActiveEditorWriteableInSession
    // - workbench.action.files.showOpenedFileInNewWindow
    // - workbench.action.files.toggleActiveEditorReadonlyInSession
    // - workbench.action.firstEditorInGroup
    // - workbench.action.fixWSL
    // - workbench.action.focusAboveGroupWithoutWrap
    // - workbench.action.focusActiveEditorGroup
    // - workbench.action.focusActivityBar
    // - workbench.action.focusAuxiliaryBar
    // - workbench.action.focusBanner
    // - workbench.action.focusBelowGroupWithoutWrap
    // - workbench.action.focusFirstSideEditor
    // - workbench.action.focusLastEditorGroup
    // - workbench.action.focusLeftGroupWithoutWrap
    // - workbench.action.focusNextGroup
    // - workbench.action.focusOtherSideEditor
    // - workbench.action.focusPanel
    // - workbench.action.focusPreviousGroup
    // - workbench.action.focusQuickOpen
    // - workbench.action.focusRightGroupWithoutWrap
    // - workbench.action.focusSecondSideEditor
    // - workbench.action.focusStatusBar
    // - workbench.action.focusTitleBar
    // - workbench.action.generateColorTheme
    // - workbench.action.getLastRunningAiActionID
    // - workbench.action.getLastRunningCmdKID
    // - workbench.action.hideEditorActions
    // - workbench.action.hideEditorTabs
    // - workbench.action.holdLockedScrolling
    // - workbench.action.increaseViewHeight
    // - workbench.action.increaseViewWidth
    // - workbench.action.inspectContextKeys
    // - workbench.action.inspectKeyMappings
    // - workbench.action.inspectKeyMappingsJSON
    // - workbench.action.installCommandLine
    // - workbench.action.joinAllGroups
    // - workbench.action.joinTwoGroups
    // - workbench.action.localHistory.compareWithFile
    // - workbench.action.localHistory.compareWithPrevious
    // - workbench.action.localHistory.compareWithSelected
    // - workbench.action.localHistory.create
    // - workbench.action.localHistory.delete
    // - workbench.action.localHistory.deleteAll
    // - workbench.action.localHistory.open
    // - workbench.action.localHistory.rename
    // - workbench.action.localHistory.restore
    // - workbench.action.localHistory.restoreViaEditor
    // - workbench.action.localHistory.restoreViaPicker
    // - workbench.action.localHistory.revealInOS
    // - workbench.action.localHistory.selectForCompare
    // - workbench.action.lockEditorGroup
    // - workbench.action.logStorage
    // - workbench.action.logWorkingCopies
    // - workbench.action.manageTrustedDomain
    // - workbench.action.maximizeEditorHideSidebar
    // - workbench.action.minimizeOtherEditors
    // - workbench.action.minimizeOtherEditorsHideSidebar
    // - workbench.action.moveEditorGroupToNewWindow
    // - workbench.action.moveEditorToAboveGroup
    // - workbench.action.moveEditorToBelowGroup
    // - workbench.action.moveEditorToLeftGroup
    // - workbench.action.moveEditorToNewWindow
    // - workbench.action.moveEditorToRightGroup
    // - workbench.action.moveFocusedView
    // - workbench.action.movePanelToSecondarySideBar
    // - workbench.action.movePanelToSidePanel
    // - workbench.action.moveSecondarySideBarToPanel
    // - workbench.action.moveSideBarLeft
    // - workbench.action.moveSideBarRight
    // - workbench.action.moveSidePanelToPanel
    // - workbench.action.moveView
    // - workbench.action.navigateBackInEditLocations
    // - workbench.action.navigateBackInNavigationLocations
    // - workbench.action.navigateDown
    // - workbench.action.navigateEditorGroups
    // - workbench.action.navigateForwardInEditLocations
    // - workbench.action.navigateForwardInNavigationLocations
    // - workbench.action.navigateLast
    // - workbench.action.navigateLeft
    // - workbench.action.navigatePreviousInEditLocations
    // - workbench.action.navigatePreviousInNavigationLocations
    // - workbench.action.navigateRight
    // - workbench.action.navigateToLastNavigationLocation
    // - workbench.action.navigateUp
    // - workbench.action.newEmptyEditorWindow
    // - workbench.action.newGroupAbove
    // - workbench.action.newGroupBelow
    // - workbench.action.newGroupLeft
    // - workbench.action.newGroupRight
    // - workbench.action.nextPanelView
    // - workbench.action.nextSideBarView
    // - workbench.action.openAccessibilitySettings
    // - workbench.action.openActiveLogOutputFile
    // - workbench.action.openActiveLogOutputFileInNewWindow
    // - workbench.action.openApplicationSettingsJson
    // - workbench.action.openChat
    // - workbench.action.openDefaultKeybindingsFile
    // - workbench.action.openEditorAtIndex
    // - workbench.action.openExtensionLogsFolder
    // - workbench.action.openFolderSettings
    // - workbench.action.openFolderSettingsFile
    // - workbench.action.openGlobalKeybindingsFile
    // - workbench.action.openGlobalSettings
    // - workbench.action.openGlobalSettingsCursorAlias
    // - workbench.action.openLicenseUrl
    // - workbench.action.openLogFile
    // - workbench.action.openLogsFolder
    // - workbench.action.openNextRecentlyUsedEditor
    // - workbench.action.openNextRecentlyUsedEditorInGroup
    // - workbench.action.openPreviousEditorFromHistory
    // - workbench.action.openPreviousRecentlyUsedEditor
    // - workbench.action.openPreviousRecentlyUsedEditorInGroup
    // - workbench.action.openProcessExplorer
    // - workbench.action.openProfile.default
    // - workbench.action.openQuickChat
    // - workbench.action.openRawDefaultSettings
    // - workbench.action.openRemoteSettings
    // - workbench.action.openRemoteSettingsFile
    // - workbench.action.openSettings2
    // - workbench.action.openSettingsJson
    // - workbench.action.openSnippets
    // - workbench.action.openUserDataFolder
    // - workbench.action.openView
    // - workbench.action.openWorkspace
    // - workbench.action.openWorkspaceConfigFile
    // - workbench.action.openWorkspaceFromEditor
    // - workbench.action.openWorkspaceInNewWindow
    // - workbench.action.openWorkspaceSettings
    // - workbench.action.openWorkspaceSettingsFile
    // - workbench.action.output.activeOutputLogLevel.0
    // - workbench.action.output.activeOutputLogLevel.1
    // - workbench.action.output.activeOutputLogLevel.2
    // - workbench.action.output.activeOutputLogLevel.3
    // - workbench.action.output.activeOutputLogLevel.4
    // - workbench.action.output.activeOutputLogLevel.5
    // - workbench.action.output.activeOutputLogLevelDefault
    // - workbench.action.output.show.GitHub.vscode-pull-request-github.GitHub Pull Request
    // - workbench.action.output.show.anysphere.cursor-always-local.Cursor Always Local
    // - workbench.action.output.show.anysphere.cursor-always-local.Cursor Tab
    // - workbench.action.output.show.anysphere.cursor-always-local.Search++
    // - workbench.action.output.show.anysphere.cursor-retrieval.Cursor Git Graph
    // - workbench.action.output.show.anysphere.cursor-retrieval.Cursor Indexing & Retrieval
    // - workbench.action.output.show.editSessions
    // - workbench.action.output.show.extension-output-DEVSENSE.composer-php-vscode-#1-Composer
    // - workbench.action.output.show.extension-output-DEVSENSE.intelli-php-vscode-#1-IntelliPHP
    // - workbench.action.output.show.extension-output-DEVSENSE.phptools-vscode-#1-PHP
    // - workbench.action.output.show.extension-output-DEVSENSE.phptools-vscode-#2-PHP (PHPUnit)
    // - workbench.action.output.show.extension-output-DEVSENSE.phptools-vscode-#3-PHP Language Server
    // - workbench.action.output.show.extension-output-bradlc.vscode-tailwindcss-#1-Tailwind CSS IntelliSense
    // - workbench.action.output.show.extension-output-dbaeumer.vscode-eslint-#1-ESLint
    // - workbench.action.output.show.extension-output-esbenp.prettier-vscode-#1-Prettier
    // - workbench.action.output.show.extension-output-formulahendry.auto-rename-tag-#1-Auto Rename Tag
    // - workbench.action.output.show.extension-output-mtxr.sqltools-#1-SQLTools
    // - workbench.action.output.show.extension-output-small.php-ci-#1-small-ci
    // - workbench.action.output.show.extension-output-vadimcn.vscode-lldb-#1-LLDB
    // - workbench.action.output.show.extension-output-vscode.html-language-features-#1-HTML Language Server
    // - workbench.action.output.show.exthost
    // - workbench.action.output.show.main
    // - workbench.action.output.show.mechatroner.rainbow-csv.rainbow_csv_debug_channel
    // - workbench.action.output.show.notebook.rendering
    // - workbench.action.output.show.ptyhost
    // - workbench.action.output.show.remoteTunnelService
    // - workbench.action.output.show.rendererLog
    // - workbench.action.output.show.sharedprocess
    // - workbench.action.output.show.tasks
    // - workbench.action.output.show.terminal
    // - workbench.action.output.show.userDataSync
    // - workbench.action.output.show.vscode.git.Git
    // - workbench.action.output.show.vscode.github-authentication.GitHub Authentication
    // - workbench.action.output.show.vscode.github.GitHub
    // - workbench.action.pauseSocketWriting
    // - workbench.action.populateFileFromSnippet
    // - workbench.action.positionPanelBottom
    // - workbench.action.positionPanelLeft
    // - workbench.action.positionPanelRight
    // - workbench.action.previewColorTheme
    // - workbench.action.previousPanelView
    // - workbench.action.previousSideBarView
    // - workbench.action.problems.focus
    // - workbench.action.quickOpenLeastRecentlyUsedEditor
    // - workbench.action.quickOpenNavigateNext
    // - workbench.action.quickOpenNavigateNextInTerminalPicker
    // - workbench.action.quickOpenNavigatePrevious
    // - workbench.action.quickOpenNavigatePreviousInTerminalPicker
    // - workbench.action.quickOpenPreviousEditor
    // - workbench.action.quickOpenPreviousRecentlyUsedEditor
    // - workbench.action.quickOpenRecent
    // - workbench.action.quickOpenSelectNext
    // - workbench.action.quickOpenSelectPrevious
    // - workbench.action.quickOpenTerm
    // - workbench.action.quickOpenWithModes
    // - workbench.action.quickPickManyToggle
    // - workbench.action.quickSwitchWindow
    // - workbench.action.quickTextSearch
    // - workbench.action.quickchat.close
    // - workbench.action.quickchat.launchInlineChat
    // - workbench.action.quickchat.openInChatView
    // - workbench.action.quit
    // - workbench.action.reloadWindowWithExtensionsDisabled
    // - workbench.action.remote.close
    // - workbench.action.remote.extensions
    // - workbench.action.removeLargeStorageDatabaseEntries
    // - workbench.action.removeRootFolder
    // - workbench.action.reopenTextEditor
    // - workbench.action.reopenWithEditor
    // - workbench.action.replaceCommandLine
    // - workbench.action.reportPerformanceIssueUsingReporter
    // - workbench.action.resetFocusedViewLocation
    // - workbench.action.resetViewLocations
    // - workbench.action.restartExtensionHost
    // - workbench.action.restoreEditorsToMainWindow
    // - workbench.action.revertAndCloseActiveEditor
    // - workbench.action.saveWorkspaceAs
    // - workbench.action.selectIconTheme
    // - workbench.action.selectProductIconTheme
    // - workbench.action.setDefaultLogLevel
    // - workbench.action.setLogLevel
    // - workbench.action.showAboutDialog
    // - workbench.action.showAllEditorsByMostRecentlyUsed
    // - workbench.action.showEditorActions
    // - workbench.action.showEditorTab
    // - workbench.action.showEditorsInActiveGroup
    // - workbench.action.showEditorsInGroup
    // - workbench.action.showEmmetCommands
    // - workbench.action.showErrorsWarnings
    // - workbench.action.showInteractivePlayground
    // - workbench.action.showLogs
    // - workbench.action.showMultipleEditorTabs
    // - workbench.action.showOutputChannels
    // - workbench.action.showRuntimeExtensions
    // - workbench.action.showWindowLog
    // - workbench.action.splitEditorToAboveGroup
    // - workbench.action.splitEditorToBelowGroup
    // - workbench.action.splitEditorToFirstGroup
    // - workbench.action.splitEditorToLastGroup
    // - workbench.action.splitEditorToLeftGroup
    // - workbench.action.splitEditorToNextGroup
    // - workbench.action.splitEditorToPreviousGroup
    // - workbench.action.splitEditorToRightGroup
    // - workbench.action.stopTracing
    // - workbench.action.switchWindow
    // - workbench.action.tasks.configureDefaultBuildTask
    // - workbench.action.tasks.configureDefaultTestTask
    // - workbench.action.tasks.configureTaskRunner
    // - workbench.action.tasks.manageAutomaticRunning
    // - workbench.action.tasks.openUserTasks
    // - workbench.action.tasks.openWorkspaceFileTasks
    // - workbench.action.tasks.reRunTask
    // - workbench.action.tasks.restartTask
    // - workbench.action.tasks.runTask
    // - workbench.action.tasks.showLog
    // - workbench.action.tasks.showTasks
    // - workbench.action.tasks.terminate
    // - workbench.action.tasks.test
    // - workbench.action.tasks.toggleProblems
    // - workbench.action.terminal.addTooltip
    // - workbench.action.terminal.attachToSession
    // - workbench.action.terminal.changeColor
    // - workbench.action.terminal.changeColorActiveTab
    // - workbench.action.terminal.changeIcon
    // - workbench.action.terminal.changeIconActiveTab
    // - workbench.action.terminal.chat.cancel
    // - workbench.action.terminal.chat.discard
    // - workbench.action.terminal.chat.viewInChat
    // - workbench.action.terminal.clear
    // - workbench.action.terminal.clearPreviousSessionHistory
    // - workbench.action.terminal.copyLastCommand
    // - workbench.action.terminal.copyLastCommandAndLastCommandOutput
    // - workbench.action.terminal.copyLastCommandOutput
    // - workbench.action.terminal.copySelectionAsHtml
    // - workbench.action.terminal.detachSession
    // - workbench.action.terminal.focusAtIndex1
    // - workbench.action.terminal.focusAtIndex2
    // - workbench.action.terminal.focusAtIndex3
    // - workbench.action.terminal.focusAtIndex4
    // - workbench.action.terminal.focusAtIndex5
    // - workbench.action.terminal.focusAtIndex6
    // - workbench.action.terminal.focusAtIndex7
    // - workbench.action.terminal.focusAtIndex8
    // - workbench.action.terminal.focusAtIndex9
    // - workbench.action.terminal.fontZoomIn
    // - workbench.action.terminal.fontZoomOut
    // - workbench.action.terminal.fontZoomReset
    // - workbench.action.terminal.join
    // - workbench.action.terminal.joinActiveTab
    // - workbench.action.terminal.kill
    // - workbench.action.terminal.killAll
    // - workbench.action.terminal.killViewOrEditor
    // - workbench.action.terminal.moveIntoNewWindow
    // - workbench.action.terminal.moveToEditor
    // - workbench.action.terminal.moveToTerminalPanel
    // - workbench.action.terminal.newInActiveWorkspace
    // - workbench.action.terminal.newWithCwd
    // - workbench.action.terminal.newWithProfile
    // - workbench.action.terminal.openFileLink
    // - workbench.action.terminal.openSettings
    // - workbench.action.terminal.openUrlLink
    // - workbench.action.terminal.recordSession
    // - workbench.action.terminal.relaunch
    // - workbench.action.terminal.rename
    // - workbench.action.terminal.renameWithArg
    // - workbench.action.terminal.resizePaneDown
    // - workbench.action.terminal.resizePaneLeft
    // - workbench.action.terminal.resizePaneRight
    // - workbench.action.terminal.resizePaneUp
    // - workbench.action.terminal.restartPtyHost
    // - workbench.action.terminal.runActiveFile
    // - workbench.action.terminal.runSelectedText
    // - workbench.action.terminal.selectAll
    // - workbench.action.terminal.selectDefaultShell
    // - workbench.action.terminal.selectToNextLine
    // - workbench.action.terminal.selectToPreviousLine
    // - workbench.action.terminal.setDimensions
    // - workbench.action.terminal.showEnvironmentContributions
    // - workbench.action.terminal.showTextureAtlas
    // - workbench.action.terminal.splitInActiveWorkspace
    // - workbench.action.terminal.switchTerminal
    // - workbench.action.terminal.toggleStickyScroll
    // - workbench.action.terminal.unsplit
    // - workbench.action.terminal.writeDataToTerminal
    // - workbench.action.toggleAutoSave
    // - workbench.action.toggleCenteredLayout
    // - workbench.action.toggleCommenting
    // - workbench.action.toggleConfirmBeforeClose
    // - workbench.action.toggleEditorGroupLock
    // - workbench.action.toggleEditorType
    // - workbench.action.toggleEditorVisibility
    // - workbench.action.toggleEditorWidths
    // - workbench.action.toggleKeepEditors
    // - workbench.action.toggleKeybindingsLog
    // - workbench.action.toggleLightDarkThemes
    // - workbench.action.toggleLockedScrolling
    // - workbench.action.toggleMaximizedPanel
    // - workbench.action.toggleMenuBar
    // - workbench.action.toggleMultiCursorModifier
    // - workbench.action.toggleNotebookClipboardLog
    // - workbench.action.toggleScreencastMode
    // - workbench.action.toggleSearchOnType
    // - workbench.action.toggleSeparatePinnedEditorTabs
    // - workbench.action.toggleSidebarPosition
    // - workbench.action.toggleSplitEditorInGroup
    // - workbench.action.toggleSplitEditorInGroupLayout
    // - workbench.action.toggleStatusbarVisibility
    // - workbench.action.triggerReconnect
    // - workbench.action.troubleshootIssue.start
    // - workbench.action.troubleshootIssue.stop
    // - workbench.action.uninstallCommandLine
    // - workbench.action.unlockEditorGroup
    // - workbench.action.url.openUrl
    // - workbench.action.webview.openDeveloperTools
    // - workbench.action.webview.reloadWebviewAction
    // - workbench.action.zenHideEditorTabs
    // - workbench.action.zenShowEditorTab
    // - workbench.action.zenShowMultipleEditorTabs
    // - workbench.actions.table.workbench.panel.markers.view.viewAsTable
    // - workbench.actions.table.workbench.panel.markers.view.viewAsTree
    // - workbench.actions.treeView.inlineBookmarksExplorer.collapseAll
    // - workbench.actions.treeView.inlineBookmarksExplorer.refresh
    // - workbench.actions.treeView.workbench.panel.markers.view.collapseAll
    // - workbench.actions.view.toggleProblems
    // - workbench.actions.workbench.panel.comments.toggleResolvedComments
    // - workbench.actions.workbench.panel.comments.toggleUnResolvedComments
    // - workbench.actions.workbench.panel.markers.view.toggleActiveFile
    // - workbench.actions.workbench.panel.markers.view.toggleErrors
    // - workbench.actions.workbench.panel.markers.view.toggleExcludedFiles
    // - workbench.actions.workbench.panel.markers.view.toggleInfos
    // - workbench.actions.workbench.panel.markers.view.toggleWarnings
    // - workbench.debug.action.copyAll
    // - workbench.debug.action.focusBreakpointsView
    // - workbench.debug.action.focusCallStackView
    // - workbench.debug.action.focusRepl
    // - workbench.debug.action.focusVariablesView
    // - workbench.debug.action.focusWatchView
    // - workbench.debug.breakPointsView.resetViewLocation
    // - workbench.debug.callStackView.resetViewLocation
    // - workbench.debug.loadedScriptsView.focus
    // - workbench.debug.loadedScriptsView.resetViewLocation
    // - workbench.debug.panel.action.clearReplAction
    // - workbench.debug.variablesView.resetViewLocation
    // - workbench.debug.viewlet.action.addDataBreakpointOnAddress
    // - workbench.debug.viewlet.action.addFunctionBreakpointAction
    // - workbench.debug.viewlet.action.addWatchExpression
    // - workbench.debug.viewlet.action.copyValue
    // - workbench.debug.viewlet.action.copyWorkspaceVariableValue
    // - workbench.debug.viewlet.action.disableAllBreakpoints
    // - workbench.debug.viewlet.action.editDataBreakpointOnAddress
    // - workbench.debug.viewlet.action.enableAllBreakpoints
    // - workbench.debug.viewlet.action.reapplyBreakpointsAction
    // - workbench.debug.viewlet.action.removeAllBreakpoints
    // - workbench.debug.viewlet.action.removeAllWatchExpressions
    // - workbench.debug.viewlet.action.removeBreakpoint
    // - workbench.debug.viewlet.action.toggleBreakpointsActivatedAction
    // - workbench.debug.viewlet.action.viewMemory
    // - workbench.debug.watchExpressionsView.resetViewLocation
    // - workbench.debug.welcome.focus
    // - workbench.debug.welcome.removeView
    // - workbench.debug.welcome.resetViewLocation
    // - workbench.debug.welcome.toggleVisibility
    // - workbench.editSessions.actions.resetAuth
    // - workbench.editSessions.actions.signIn
    // - workbench.explorer.fileView.focus
    // - workbench.explorer.fileView.removeView
    // - workbench.explorer.fileView.resetViewLocation
    // - workbench.explorer.fileView.toggleVisibility
    // - workbench.explorer.openEditorsView.removeView
    // - workbench.explorer.openEditorsView.resetViewLocation
    // - workbench.explorer.openEditorsView.toggleVisibility
    // - workbench.extensions.action.addExtensionToWorkspaceRecommendations
    // - workbench.extensions.action.addToWorkspaceFolderIgnoredRecommendations
    // - workbench.extensions.action.addToWorkspaceFolderRecommendations
    // - workbench.extensions.action.addToWorkspaceIgnoredRecommendations
    // - workbench.extensions.action.addToWorkspaceRecommendations
    // - workbench.extensions.action.checkForUpdates
    // - workbench.extensions.action.clearExtensionsSearchResults
    // - workbench.extensions.action.clearLanguage
    // - workbench.extensions.action.configure
    // - workbench.extensions.action.configureKeybindings
    // - workbench.extensions.action.configureWorkspaceFolderRecommendedExtensions
    // - workbench.extensions.action.configureWorkspaceRecommendedExtensions
    // - workbench.extensions.action.copyExtension
    // - workbench.extensions.action.copyExtensionId
    // - workbench.extensions.action.debugExtensionHost
    // - workbench.extensions.action.disableAll
    // - workbench.extensions.action.disableAllWorkspace
    // - workbench.extensions.action.disableAutoUpdate
    // - workbench.extensions.action.enableAll
    // - workbench.extensions.action.enableAllWorkspace
    // - workbench.extensions.action.enableAutoUpdate
    // - workbench.extensions.action.extensionHostProfile
    // - workbench.extensions.action.extensionUpdates
    // - workbench.extensions.action.focusExtensionsView
    // - workbench.extensions.action.ignoreRecommendation
    // - workbench.extensions.action.install.anotherVersion
    // - workbench.extensions.action.install.specificVersion
    // - workbench.extensions.action.installAndDonotSync
    // - workbench.extensions.action.installExtensionFromLocation
    // - workbench.extensions.action.installExtensions
    // - workbench.extensions.action.installPrereleaseAndDonotSync
    // - workbench.extensions.action.installVSIX
    // - workbench.extensions.action.installWorkspaceRecommendedExtensions
    // - workbench.extensions.action.listBuiltInExtensions
    // - workbench.extensions.action.listWorkspaceUnsupportedExtensions
    // - workbench.extensions.action.manageAuthorizedExtensionURIs
    // - workbench.extensions.action.openExtensionsFolder
    // - workbench.extensions.action.recentlyPublishedExtensions
    // - workbench.extensions.action.refreshExtension
    // - workbench.extensions.action.reinstall
    // - workbench.extensions.action.removeExtensionFromWorkspaceRecommendations
    // - workbench.extensions.action.saveExtensionHostProfile
    // - workbench.extensions.action.setColorTheme
    // - workbench.extensions.action.setFileIconTheme
    // - workbench.extensions.action.setProductIconTheme
    // - workbench.extensions.action.showDisabledExtensions
    // - workbench.extensions.action.showEnabledExtensions
    // - workbench.extensions.action.showExtensionsForLanguage
    // - workbench.extensions.action.showExtensionsWithIds
    // - workbench.extensions.action.showLanguageExtensions
    // - workbench.extensions.action.showPopularExtensions
    // - workbench.extensions.action.showPreReleaseVersion
    // - workbench.extensions.action.showRecommendedExtensions
    // - workbench.extensions.action.showRecommendedKeymapExtensions
    // - workbench.extensions.action.showReleasedVersion
    // - workbench.extensions.action.stopExtensionHostProfile
    // - workbench.extensions.action.switchToPreRlease
    // - workbench.extensions.action.switchToRelease
    // - workbench.extensions.action.toggleApplyToAllProfiles
    // - workbench.extensions.action.toggleAutoUpdateForExtension
    // - workbench.extensions.action.toggleAutoUpdatesForPublisher
    // - workbench.extensions.action.toggleIgnoreExtension
    // - workbench.extensions.action.undoIgnoredRecommendation
    // - workbench.extensions.action.updateAllExtensions
    // - workbench.extensions.command.installFromVSIX
    // - workbench.extensions.installMissingDependencies
    // - workbench.files.action.acceptLocalChanges
    // - workbench.files.action.collapseExplorerFolders
    // - workbench.files.action.compareFileWith
    // - workbench.files.action.compareNewUntitledTextFiles
    // - workbench.files.action.createFileFromExplorer
    // - workbench.files.action.createFolderFromExplorer
    // - workbench.files.action.focusFilesExplorer
    // - workbench.files.action.refreshFilesExplorer
    // - workbench.files.action.revertLocalChanges
    // - workbench.files.action.saveAllInGroup
    // - workbench.files.action.showActiveFileInExplorer
    // - workbench.getCodeExchangeProxyEndpoints
    // - workbench.notebook.layout.configure
    // - workbench.notebook.layout.configure.editorTitle
    // - workbench.notebook.layout.gettingStarted
    // - workbench.notebook.layout.select
    // - workbench.notebook.layout.webview.reset
    // - workbench.output.action.clearOutput
    // - workbench.output.action.switchBetweenOutputs
    // - workbench.output.action.toggleAutoScroll
    // - workbench.panel.aichat.resetViewContainerLocation
    // - workbench.panel.aichat.view.removeView
    // - workbench.panel.aichat.view.resetViewLocation
    // - workbench.panel.aichat.view.toggleVisibility
    // - workbench.panel.chatSidebar
    // - workbench.panel.chatSidebar.resetViewContainerLocation
    // - workbench.panel.composerViewPane
    // - workbench.panel.composerViewPane.resetViewContainerLocation
    // - workbench.panel.markers.resetViewContainerLocation
    // - workbench.panel.markers.view.focus
    // - workbench.panel.markers.view.removeView
    // - workbench.panel.markers.view.resetViewLocation
    // - workbench.panel.markers.view.toggleVisibility
    // - workbench.panel.output.focus
    // - workbench.panel.output.removeView
    // - workbench.panel.output.resetViewContainerLocation
    // - workbench.panel.output.resetViewLocation
    // - workbench.panel.output.toggleVisibility
    // - workbench.panel.repl.resetViewContainerLocation
    // - workbench.panel.repl.view.focus
    // - workbench.panel.repl.view.removeView
    // - workbench.panel.repl.view.resetViewLocation
    // - workbench.panel.repl.view.toggleVisibility
    // - workbench.panel.testResults.resetViewContainerLocation
    // - workbench.panel.testResults.view.focus
    // - workbench.panel.testResults.view.resetViewLocation
    // - workbench.profiles.actions.cleanupProfiles
    // - workbench.profiles.actions.createFromCurrentProfile
    // - workbench.profiles.actions.createProfile
    // - workbench.profiles.actions.createTemporaryProfile
    // - workbench.profiles.actions.deleteProfile
    // - workbench.profiles.actions.editCurrentProfile
    // - workbench.profiles.actions.exportProfile
    // - workbench.profiles.actions.help
    // - workbench.profiles.actions.importProfile
    // - workbench.profiles.actions.manage
    // - workbench.profiles.actions.manageProfiles
    // - workbench.profiles.actions.profileEntry.__default__profile__
    // - workbench.profiles.actions.renameProfile
    // - workbench.profiles.actions.resetWorkspaces
    // - workbench.profiles.actions.showProfileContents
    // - workbench.profiles.actions.switchProfile
    // - workbench.scm.action.collapseAllRepositories
    // - workbench.scm.action.expandAllRepositories
    // - workbench.scm.action.focusNextInput
    // - workbench.scm.action.focusNextResourceGroup
    // - workbench.scm.action.focusPreviousInput
    // - workbench.scm.action.focusPreviousResourceGroup
    // - workbench.scm.action.repositories.setSortKey.discoveryTime
    // - workbench.scm.action.repositories.setSortKey.name
    // - workbench.scm.action.repositories.setSortKey.path
    // - workbench.scm.action.scm.showChangesSummary
    // - workbench.scm.action.setListViewMode
    // - workbench.scm.action.setListViewModeNavigation
    // - workbench.scm.action.setSortKey.name
    // - workbench.scm.action.setSortKey.path
    // - workbench.scm.action.setSortKey.status
    // - workbench.scm.action.setTreeViewMode
    // - workbench.scm.action.setTreeViewModeNavigation
    // - workbench.scm.action.showIncomingChanges.always
    // - workbench.scm.action.showIncomingChanges.auto
    // - workbench.scm.action.showIncomingChanges.never
    // - workbench.scm.action.showOutgoingChanges.always
    // - workbench.scm.action.showOutgoingChanges.auto
    // - workbench.scm.action.showOutgoingChanges.never
    // - workbench.scm.action.toggleRepositoryVisibility.scm0
    // - workbench.scm.focus
    // - workbench.scm.removeView
    // - workbench.scm.repositories.focus
    // - workbench.scm.repositories.removeView
    // - workbench.scm.repositories.resetViewLocation
    // - workbench.scm.repositories.toggleVisibility
    // - workbench.scm.resetViewLocation
    // - workbench.scm.toggleVisibility
    // - workbench.trust.configure
    // - workbench.trust.manage
    // - workbench.userData.actions.openSyncBackupsFolder
    // - workbench.userDataSync.actions.downloadSyncActivity
    // - workbench.view.debug.resetViewContainerLocation
    // - workbench.view.explorer.resetViewContainerLocation
    // - workbench.view.extension.cmake-view
    // - workbench.view.extension.cmake-view.resetViewContainerLocation
    // - workbench.view.extension.cspell-explorer
    // - workbench.view.extension.cspell-explorer.resetViewContainerLocation
    // - workbench.view.extension.dockerView
    // - workbench.view.extension.dockerView.resetViewContainerLocation
    // - workbench.view.extension.flutter
    // - workbench.view.extension.flutter.resetViewContainerLocation
    // - workbench.view.extension.github-pull-request
    // - workbench.view.extension.github-pull-request.resetViewContainerLocation
    // - workbench.view.extension.github-pull-requests
    // - workbench.view.extension.github-pull-requests.resetViewContainerLocation
    // - workbench.view.extension.jupyter
    // - workbench.view.extension.jupyter-variables
    // - workbench.view.extension.jupyter-variables.resetViewContainerLocation
    // - workbench.view.extension.jupyter.resetViewContainerLocation
    // - workbench.view.extension.references-view
    // - workbench.view.extension.references-view.resetViewContainerLocation
    // - workbench.view.extension.solidity-va-cockpit
    // - workbench.view.extension.solidity-va-cockpit.resetViewContainerLocation
    // - workbench.view.extension.sqltoolsActivityBarContainer
    // - workbench.view.extension.sqltoolsActivityBarContainer.resetViewContainerLocation
    // - workbench.view.extension.sqltoolsPanelContainer
    // - workbench.view.extension.sqltoolsPanelContainer.resetViewContainerLocation
    // - workbench.view.extension.test
    // - workbench.view.extension.test.resetViewContainerLocation
    // - workbench.view.extension.thunder-client.resetViewContainerLocation
    // - workbench.view.extensions.resetViewContainerLocation
    // - workbench.view.remote
    // - workbench.view.remote.resetViewContainerLocation
    // - workbench.view.scm.resetViewContainerLocation
    // - workbench.view.search.focus
    // - workbench.view.search.removeView
    // - workbench.view.search.resetViewContainerLocation
    // - workbench.view.search.resetViewLocation
    // - workbench.view.search.toggleVisibility
    // - workbench.view.testCoverage.focus
    // - workbench.view.testCoverage.resetViewLocation
    // - workbench.view.testing.focus
    // - workbench.view.testing.removeView
    // - workbench.view.testing.resetViewLocation
    // - workbench.view.testing.toggleVisibility
    // - workbench.views.extensions.builtinFeatureExtensions.focus
    // - workbench.views.extensions.builtinFeatureExtensions.resetViewLocation
    // - workbench.views.extensions.builtinProgrammingLanguageExtensions.focus
    // - workbench.views.extensions.builtinProgrammingLanguageExtensions.resetViewLocation
    // - workbench.views.extensions.builtinThemeExtensions.focus
    // - workbench.views.extensions.builtinThemeExtensions.resetViewLocation
    // - workbench.views.extensions.deprecatedExtensions.focus
    // - workbench.views.extensions.deprecatedExtensions.resetViewLocation
    // - workbench.views.extensions.disabled.focus
    // - workbench.views.extensions.disabled.resetViewLocation
    // - workbench.views.extensions.enabled.focus
    // - workbench.views.extensions.enabled.resetViewLocation
    // - workbench.views.extensions.installed.focus
    // - workbench.views.extensions.installed.resetViewLocation
    // - workbench.views.extensions.marketplace.focus
    // - workbench.views.extensions.marketplace.removeView
    // - workbench.views.extensions.marketplace.resetViewLocation
    // - workbench.views.extensions.marketplace.toggleVisibility
    // - workbench.views.extensions.otherRecommendations.focus
    // - workbench.views.extensions.otherRecommendations.resetViewLocation
    // - workbench.views.extensions.popular.focus
    // - workbench.views.extensions.popular.resetViewLocation
    // - workbench.views.extensions.searchBuiltin.focus
    // - workbench.views.extensions.searchBuiltin.resetViewLocation
    // - workbench.views.extensions.searchDisabled.focus
    // - workbench.views.extensions.searchDisabled.resetViewLocation
    // - workbench.views.extensions.searchEnabled.focus
    // - workbench.views.extensions.searchEnabled.resetViewLocation
    // - workbench.views.extensions.searchInstalled.focus
    // - workbench.views.extensions.searchInstalled.resetViewLocation
    // - workbench.views.extensions.searchOutdated.focus
    // - workbench.views.extensions.searchOutdated.resetViewLocation
    // - workbench.views.extensions.searchRecentlyUpdated.focus
    // - workbench.views.extensions.searchRecentlyUpdated.resetViewLocation
    // - workbench.views.extensions.searchWorkspaceUnsupported.focus
    // - workbench.views.extensions.searchWorkspaceUnsupported.resetViewLocation
    // - workbench.views.extensions.untrustedPartiallySupportedExtensions.focus
    // - workbench.views.extensions.untrustedPartiallySupportedExtensions.resetViewLocation
    // - workbench.views.extensions.untrustedUnsupportedExtensions.focus
    // - workbench.views.extensions.untrustedUnsupportedExtensions.resetViewLocation
    // - workbench.views.extensions.virtualPartiallySupportedExtensions.focus
    // - workbench.views.extensions.virtualPartiallySupportedExtensions.resetViewLocation
    // - workbench.views.extensions.virtualUnsupportedExtensions.focus
    // - workbench.views.extensions.virtualUnsupportedExtensions.resetViewLocation
    // - workbench.views.extensions.workspaceRecommendations.focus
    // - workbench.views.extensions.workspaceRecommendations.resetViewLocation
    // - ~remote.forwardedPorts.focus
    // - ~remote.forwardedPorts.removeView
    // - ~remote.forwardedPorts.resetViewLocation
    // - ~remote.forwardedPorts.toggleVisibility
    // - ~remote.forwardedPortsContainer
    // - ~remote.forwardedPortsContainer.resetViewContainerLocation